// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	time "time"

	internal "github.com/hassan-ptpal/vapi-server-sdk-go/internal"
)

type AssistantsListRequest struct {
	// This is the maximum number of items to return. Defaults to 100.
	Limit *float64 `json:"-" url:"limit,omitempty"`
	// This will return items where the createdAt is greater than the specified value.
	CreatedAtGt *time.Time `json:"-" url:"createdAtGt,omitempty"`
	// This will return items where the createdAt is less than the specified value.
	CreatedAtLt *time.Time `json:"-" url:"createdAtLt,omitempty"`
	// This will return items where the createdAt is greater than or equal to the specified value.
	CreatedAtGe *time.Time `json:"-" url:"createdAtGe,omitempty"`
	// This will return items where the createdAt is less than or equal to the specified value.
	CreatedAtLe *time.Time `json:"-" url:"createdAtLe,omitempty"`
	// This will return items where the updatedAt is greater than the specified value.
	UpdatedAtGt *time.Time `json:"-" url:"updatedAtGt,omitempty"`
	// This will return items where the updatedAt is less than the specified value.
	UpdatedAtLt *time.Time `json:"-" url:"updatedAtLt,omitempty"`
	// This will return items where the updatedAt is greater than or equal to the specified value.
	UpdatedAtGe *time.Time `json:"-" url:"updatedAtGe,omitempty"`
	// This will return items where the updatedAt is less than or equal to the specified value.
	UpdatedAtLe *time.Time `json:"-" url:"updatedAtLe,omitempty"`
}

type Assistant struct {
	// These are the options for the assistant's transcriber.
	Transcriber *AssistantTranscriber `json:"transcriber,omitempty" url:"transcriber,omitempty"`
	// These are the options for the assistant's LLM.
	Model *AssistantModel `json:"model,omitempty" url:"model,omitempty"`
	// These are the options for the assistant's voice.
	Voice *AssistantVoice `json:"voice,omitempty" url:"voice,omitempty"`
	// This is the first message that the assistant will say. This can also be a URL to a containerized audio file (mp3, wav, etc.).
	//
	// If unspecified, assistant will wait for user to speak and use the model to respond once they speak.
	FirstMessage                     *string `json:"firstMessage,omitempty" url:"firstMessage,omitempty"`
	FirstMessageInterruptionsEnabled *bool   `json:"firstMessageInterruptionsEnabled,omitempty" url:"firstMessageInterruptionsEnabled,omitempty"`
	// This is the mode for the first message. Default is 'assistant-speaks-first'.
	//
	// Use:
	// - 'assistant-speaks-first' to have the assistant speak first.
	// - 'assistant-waits-for-user' to have the assistant wait for the user to speak first.
	// - 'assistant-speaks-first-with-model-generated-message' to have the assistant speak first with a message generated by the model based on the conversation state. (`assistant.model.messages` at call start, `call.messages` at squad transfer points).
	//
	// @default 'assistant-speaks-first'
	FirstMessageMode *AssistantFirstMessageMode `json:"firstMessageMode,omitempty" url:"firstMessageMode,omitempty"`
	// These are the settings to configure or disable voicemail detection. Alternatively, voicemail detection can be configured using the model.tools=[VoicemailTool].
	// This uses Twilio's built-in detection while the VoicemailTool relies on the model to detect if a voicemail was reached.
	// You can use neither of them, one of them, or both of them. By default, Twilio built-in detection is enabled while VoicemailTool is not.
	VoicemailDetection *AssistantVoicemailDetection `json:"voicemailDetection,omitempty" url:"voicemailDetection,omitempty"`
	// These are the messages that will be sent to your Client SDKs. Default is conversation-update,function-call,hang,model-output,speech-update,status-update,transfer-update,transcript,tool-calls,user-interrupted,voice-input,workflow.node.started. You can check the shape of the messages in ClientMessage schema.
	ClientMessages []AssistantClientMessagesItem `json:"clientMessages,omitempty" url:"clientMessages,omitempty"`
	// These are the messages that will be sent to your Server URL. Default is conversation-update,end-of-call-report,function-call,hang,speech-update,status-update,tool-calls,transfer-destination-request,user-interrupted. You can check the shape of the messages in ServerMessage schema.
	ServerMessages []AssistantServerMessagesItem `json:"serverMessages,omitempty" url:"serverMessages,omitempty"`
	// How many seconds of silence to wait before ending the call. Defaults to 30.
	//
	// @default 30
	SilenceTimeoutSeconds *float64 `json:"silenceTimeoutSeconds,omitempty" url:"silenceTimeoutSeconds,omitempty"`
	// This is the maximum number of seconds that the call will last. When the call reaches this duration, it will be ended.
	//
	// @default 600 (10 minutes)
	MaxDurationSeconds *float64 `json:"maxDurationSeconds,omitempty" url:"maxDurationSeconds,omitempty"`
	// This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.
	// You can also provide a custom sound by providing a URL to an audio file.
	BackgroundSound *AssistantBackgroundSound `json:"backgroundSound,omitempty" url:"backgroundSound,omitempty"`
	// This enables filtering of noise and background speech while the user is talking.
	//
	// Default `false` while in beta.
	//
	// @default false
	BackgroundDenoisingEnabled *bool `json:"backgroundDenoisingEnabled,omitempty" url:"backgroundDenoisingEnabled,omitempty"`
	// This determines whether the model's output is used in conversation history rather than the transcription of assistant's speech.
	//
	// Default `false` while in beta.
	//
	// @default false
	ModelOutputInMessagesEnabled *bool `json:"modelOutputInMessagesEnabled,omitempty" url:"modelOutputInMessagesEnabled,omitempty"`
	// These are the configurations to be passed to the transport providers of assistant's calls, like Twilio. You can store multiple configurations for different transport providers. For a call, only the configuration matching the call transport provider is used.
	TransportConfigurations []*TransportConfigurationTwilio `json:"transportConfigurations,omitempty" url:"transportConfigurations,omitempty"`
	// This is the plan for observability configuration of assistant's calls.
	// Currently supports Langfuse for tracing and monitoring.
	ObservabilityPlan *LangfuseObservabilityPlan `json:"observabilityPlan,omitempty" url:"observabilityPlan,omitempty"`
	// These are dynamic credentials that will be used for the assistant calls. By default, all the credentials are available for use in the call but you can supplement an additional credentials using this. Dynamic credentials override existing credentials.
	Credentials []*AssistantCredentialsItem `json:"credentials,omitempty" url:"credentials,omitempty"`
	// This is a set of actions that will be performed on certain events.
	Hooks []*AssistantHooksItem `json:"hooks,omitempty" url:"hooks,omitempty"`
	// This is the name of the assistant.
	//
	// This is required when you want to transfer between assistants in a call.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// This is the message that the assistant will say if the call is forwarded to voicemail.
	//
	// If unspecified, it will hang up.
	VoicemailMessage *string `json:"voicemailMessage,omitempty" url:"voicemailMessage,omitempty"`
	// This is the message that the assistant will say if it ends the call.
	//
	// If unspecified, it will hang up without saying anything.
	EndCallMessage *string `json:"endCallMessage,omitempty" url:"endCallMessage,omitempty"`
	// This list contains phrases that, if spoken by the assistant, will trigger the call to be hung up. Case insensitive.
	EndCallPhrases []string        `json:"endCallPhrases,omitempty" url:"endCallPhrases,omitempty"`
	CompliancePlan *CompliancePlan `json:"compliancePlan,omitempty" url:"compliancePlan,omitempty"`
	// This is for metadata you want to store on the assistant.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	// This is the plan for analysis of assistant's calls. Stored in `call.analysis`.
	AnalysisPlan *AnalysisPlan `json:"analysisPlan,omitempty" url:"analysisPlan,omitempty"`
	// This is the plan for artifacts generated during assistant's calls. Stored in `call.artifact`.
	//
	// Note: `recordingEnabled` is currently at the root level. It will be moved to `artifactPlan` in the future, but will remain backwards compatible.
	ArtifactPlan *ArtifactPlan `json:"artifactPlan,omitempty" url:"artifactPlan,omitempty"`
	// This is the plan for static predefined messages that can be spoken by the assistant during the call, like `idleMessages`.
	//
	// Note: `firstMessage`, `voicemailMessage`, and `endCallMessage` are currently at the root level. They will be moved to `messagePlan` in the future, but will remain backwards compatible.
	MessagePlan *MessagePlan `json:"messagePlan,omitempty" url:"messagePlan,omitempty"`
	// This is the plan for when the assistant should start talking.
	//
	// You should configure this if you're running into these issues:
	// - The assistant is too slow to start talking after the customer is done speaking.
	// - The assistant is too fast to start talking after the customer is done speaking.
	// - The assistant is so fast that it's actually interrupting the customer.
	StartSpeakingPlan *StartSpeakingPlan `json:"startSpeakingPlan,omitempty" url:"startSpeakingPlan,omitempty"`
	// This is the plan for when assistant should stop talking on customer interruption.
	//
	// You should configure this if you're running into these issues:
	// - The assistant is too slow to recognize customer's interruption.
	// - The assistant is too fast to recognize customer's interruption.
	// - The assistant is getting interrupted by phrases that are just acknowledgments.
	// - The assistant is getting interrupted by background noises.
	// - The assistant is not properly stopping -- it starts talking right after getting interrupted.
	StopSpeakingPlan *StopSpeakingPlan `json:"stopSpeakingPlan,omitempty" url:"stopSpeakingPlan,omitempty"`
	// This is the plan for real-time monitoring of the assistant's calls.
	//
	// Usage:
	// - To enable live listening of the assistant's calls, set `monitorPlan.listenEnabled` to `true`.
	// - To enable live control of the assistant's calls, set `monitorPlan.controlEnabled` to `true`.
	//
	// Note, `serverMessages`, `clientMessages`, `serverUrl` and `serverUrlSecret` are currently at the root level but will be moved to `monitorPlan` in the future. Will remain backwards compatible
	MonitorPlan *MonitorPlan `json:"monitorPlan,omitempty" url:"monitorPlan,omitempty"`
	// These are the credentials that will be used for the assistant calls. By default, all the credentials are available for use in the call but you can provide a subset using this.
	CredentialIds []string `json:"credentialIds,omitempty" url:"credentialIds,omitempty"`
	// This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.
	//
	// The order of precedence is:
	//
	// 1. assistant.server.url
	// 2. phoneNumber.serverUrl
	// 3. org.serverUrl
	Server          *Server          `json:"server,omitempty" url:"server,omitempty"`
	KeypadInputPlan *KeypadInputPlan `json:"keypadInputPlan,omitempty" url:"keypadInputPlan,omitempty"`
	// This is the unique identifier for the assistant.
	Id string `json:"id" url:"id"`
	// This is the unique identifier for the org that this assistant belongs to.
	OrgId string `json:"orgId" url:"orgId"`
	// This is the ISO 8601 date-time string of when the assistant was created.
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`
	// This is the ISO 8601 date-time string of when the assistant was last updated.
	UpdatedAt time.Time `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Assistant) GetTranscriber() *AssistantTranscriber {
	if a == nil {
		return nil
	}
	return a.Transcriber
}

func (a *Assistant) GetModel() *AssistantModel {
	if a == nil {
		return nil
	}
	return a.Model
}

func (a *Assistant) GetVoice() *AssistantVoice {
	if a == nil {
		return nil
	}
	return a.Voice
}

func (a *Assistant) GetFirstMessage() *string {
	if a == nil {
		return nil
	}
	return a.FirstMessage
}

func (a *Assistant) GetFirstMessageInterruptionsEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.FirstMessageInterruptionsEnabled
}

func (a *Assistant) GetFirstMessageMode() *AssistantFirstMessageMode {
	if a == nil {
		return nil
	}
	return a.FirstMessageMode
}

func (a *Assistant) GetVoicemailDetection() *AssistantVoicemailDetection {
	if a == nil {
		return nil
	}
	return a.VoicemailDetection
}

func (a *Assistant) GetClientMessages() []AssistantClientMessagesItem {
	if a == nil {
		return nil
	}
	return a.ClientMessages
}

func (a *Assistant) GetServerMessages() []AssistantServerMessagesItem {
	if a == nil {
		return nil
	}
	return a.ServerMessages
}

func (a *Assistant) GetSilenceTimeoutSeconds() *float64 {
	if a == nil {
		return nil
	}
	return a.SilenceTimeoutSeconds
}

func (a *Assistant) GetMaxDurationSeconds() *float64 {
	if a == nil {
		return nil
	}
	return a.MaxDurationSeconds
}

func (a *Assistant) GetBackgroundSound() *AssistantBackgroundSound {
	if a == nil {
		return nil
	}
	return a.BackgroundSound
}

func (a *Assistant) GetBackgroundDenoisingEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.BackgroundDenoisingEnabled
}

func (a *Assistant) GetModelOutputInMessagesEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.ModelOutputInMessagesEnabled
}

func (a *Assistant) GetTransportConfigurations() []*TransportConfigurationTwilio {
	if a == nil {
		return nil
	}
	return a.TransportConfigurations
}

func (a *Assistant) GetObservabilityPlan() *LangfuseObservabilityPlan {
	if a == nil {
		return nil
	}
	return a.ObservabilityPlan
}

func (a *Assistant) GetCredentials() []*AssistantCredentialsItem {
	if a == nil {
		return nil
	}
	return a.Credentials
}

func (a *Assistant) GetHooks() []*AssistantHooksItem {
	if a == nil {
		return nil
	}
	return a.Hooks
}

func (a *Assistant) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *Assistant) GetVoicemailMessage() *string {
	if a == nil {
		return nil
	}
	return a.VoicemailMessage
}

func (a *Assistant) GetEndCallMessage() *string {
	if a == nil {
		return nil
	}
	return a.EndCallMessage
}

func (a *Assistant) GetEndCallPhrases() []string {
	if a == nil {
		return nil
	}
	return a.EndCallPhrases
}

func (a *Assistant) GetCompliancePlan() *CompliancePlan {
	if a == nil {
		return nil
	}
	return a.CompliancePlan
}

func (a *Assistant) GetMetadata() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *Assistant) GetAnalysisPlan() *AnalysisPlan {
	if a == nil {
		return nil
	}
	return a.AnalysisPlan
}

func (a *Assistant) GetArtifactPlan() *ArtifactPlan {
	if a == nil {
		return nil
	}
	return a.ArtifactPlan
}

func (a *Assistant) GetMessagePlan() *MessagePlan {
	if a == nil {
		return nil
	}
	return a.MessagePlan
}

func (a *Assistant) GetStartSpeakingPlan() *StartSpeakingPlan {
	if a == nil {
		return nil
	}
	return a.StartSpeakingPlan
}

func (a *Assistant) GetStopSpeakingPlan() *StopSpeakingPlan {
	if a == nil {
		return nil
	}
	return a.StopSpeakingPlan
}

func (a *Assistant) GetMonitorPlan() *MonitorPlan {
	if a == nil {
		return nil
	}
	return a.MonitorPlan
}

func (a *Assistant) GetCredentialIds() []string {
	if a == nil {
		return nil
	}
	return a.CredentialIds
}

func (a *Assistant) GetServer() *Server {
	if a == nil {
		return nil
	}
	return a.Server
}

func (a *Assistant) GetKeypadInputPlan() *KeypadInputPlan {
	if a == nil {
		return nil
	}
	return a.KeypadInputPlan
}

func (a *Assistant) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *Assistant) GetOrgId() string {
	if a == nil {
		return ""
	}
	return a.OrgId
}

func (a *Assistant) GetCreatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.CreatedAt
}

func (a *Assistant) GetUpdatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.UpdatedAt
}

func (a *Assistant) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Assistant) UnmarshalJSON(data []byte) error {
	type embed Assistant
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = Assistant(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Assistant) MarshalJSON() ([]byte, error) {
	type embed Assistant
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*a),
		CreatedAt: internal.NewDateTime(a.CreatedAt),
		UpdatedAt: internal.NewDateTime(a.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *Assistant) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.
// You can also provide a custom sound by providing a URL to an audio file.
type AssistantBackgroundSound struct {
	AssistantBackgroundSoundZero AssistantBackgroundSoundZero
	String                       string

	typ string
}

func (a *AssistantBackgroundSound) GetAssistantBackgroundSoundZero() AssistantBackgroundSoundZero {
	if a == nil {
		return ""
	}
	return a.AssistantBackgroundSoundZero
}

func (a *AssistantBackgroundSound) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AssistantBackgroundSound) UnmarshalJSON(data []byte) error {
	var valueAssistantBackgroundSoundZero AssistantBackgroundSoundZero
	if err := json.Unmarshal(data, &valueAssistantBackgroundSoundZero); err == nil {
		a.typ = "AssistantBackgroundSoundZero"
		a.AssistantBackgroundSoundZero = valueAssistantBackgroundSoundZero
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AssistantBackgroundSound) MarshalJSON() ([]byte, error) {
	if a.typ == "AssistantBackgroundSoundZero" || a.AssistantBackgroundSoundZero != "" {
		return json.Marshal(a.AssistantBackgroundSoundZero)
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AssistantBackgroundSoundVisitor interface {
	VisitAssistantBackgroundSoundZero(AssistantBackgroundSoundZero) error
	VisitString(string) error
}

func (a *AssistantBackgroundSound) Accept(visitor AssistantBackgroundSoundVisitor) error {
	if a.typ == "AssistantBackgroundSoundZero" || a.AssistantBackgroundSoundZero != "" {
		return visitor.VisitAssistantBackgroundSoundZero(a.AssistantBackgroundSoundZero)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AssistantBackgroundSoundZero string

const (
	AssistantBackgroundSoundZeroOff    AssistantBackgroundSoundZero = "off"
	AssistantBackgroundSoundZeroOffice AssistantBackgroundSoundZero = "office"
)

func NewAssistantBackgroundSoundZeroFromString(s string) (AssistantBackgroundSoundZero, error) {
	switch s {
	case "off":
		return AssistantBackgroundSoundZeroOff, nil
	case "office":
		return AssistantBackgroundSoundZeroOffice, nil
	}
	var t AssistantBackgroundSoundZero
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AssistantBackgroundSoundZero) Ptr() *AssistantBackgroundSoundZero {
	return &a
}

type AssistantClientMessagesItem string

const (
	AssistantClientMessagesItemConversationUpdate  AssistantClientMessagesItem = "conversation-update"
	AssistantClientMessagesItemFunctionCall        AssistantClientMessagesItem = "function-call"
	AssistantClientMessagesItemFunctionCallResult  AssistantClientMessagesItem = "function-call-result"
	AssistantClientMessagesItemHang                AssistantClientMessagesItem = "hang"
	AssistantClientMessagesItemLanguageChanged     AssistantClientMessagesItem = "language-changed"
	AssistantClientMessagesItemMetadata            AssistantClientMessagesItem = "metadata"
	AssistantClientMessagesItemModelOutput         AssistantClientMessagesItem = "model-output"
	AssistantClientMessagesItemSpeechUpdate        AssistantClientMessagesItem = "speech-update"
	AssistantClientMessagesItemStatusUpdate        AssistantClientMessagesItem = "status-update"
	AssistantClientMessagesItemTranscript          AssistantClientMessagesItem = "transcript"
	AssistantClientMessagesItemToolCalls           AssistantClientMessagesItem = "tool-calls"
	AssistantClientMessagesItemToolCallsResult     AssistantClientMessagesItem = "tool-calls-result"
	AssistantClientMessagesItemToolCompleted       AssistantClientMessagesItem = "tool.completed"
	AssistantClientMessagesItemTransferUpdate      AssistantClientMessagesItem = "transfer-update"
	AssistantClientMessagesItemUserInterrupted     AssistantClientMessagesItem = "user-interrupted"
	AssistantClientMessagesItemVoiceInput          AssistantClientMessagesItem = "voice-input"
	AssistantClientMessagesItemWorkflowNodeStarted AssistantClientMessagesItem = "workflow.node.started"
)

func NewAssistantClientMessagesItemFromString(s string) (AssistantClientMessagesItem, error) {
	switch s {
	case "conversation-update":
		return AssistantClientMessagesItemConversationUpdate, nil
	case "function-call":
		return AssistantClientMessagesItemFunctionCall, nil
	case "function-call-result":
		return AssistantClientMessagesItemFunctionCallResult, nil
	case "hang":
		return AssistantClientMessagesItemHang, nil
	case "language-changed":
		return AssistantClientMessagesItemLanguageChanged, nil
	case "metadata":
		return AssistantClientMessagesItemMetadata, nil
	case "model-output":
		return AssistantClientMessagesItemModelOutput, nil
	case "speech-update":
		return AssistantClientMessagesItemSpeechUpdate, nil
	case "status-update":
		return AssistantClientMessagesItemStatusUpdate, nil
	case "transcript":
		return AssistantClientMessagesItemTranscript, nil
	case "tool-calls":
		return AssistantClientMessagesItemToolCalls, nil
	case "tool-calls-result":
		return AssistantClientMessagesItemToolCallsResult, nil
	case "tool.completed":
		return AssistantClientMessagesItemToolCompleted, nil
	case "transfer-update":
		return AssistantClientMessagesItemTransferUpdate, nil
	case "user-interrupted":
		return AssistantClientMessagesItemUserInterrupted, nil
	case "voice-input":
		return AssistantClientMessagesItemVoiceInput, nil
	case "workflow.node.started":
		return AssistantClientMessagesItemWorkflowNodeStarted, nil
	}
	var t AssistantClientMessagesItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AssistantClientMessagesItem) Ptr() *AssistantClientMessagesItem {
	return &a
}

type AssistantCredentialsItem struct {
	CreateElevenLabsCredentialDto                        *CreateElevenLabsCredentialDto
	CreateAnthropicCredentialDto                         *CreateAnthropicCredentialDto
	CreateAnyscaleCredentialDto                          *CreateAnyscaleCredentialDto
	CreateAssemblyAiCredentialDto                        *CreateAssemblyAiCredentialDto
	CreateAzureOpenAiCredentialDto                       *CreateAzureOpenAiCredentialDto
	CreateAzureCredentialDto                             *CreateAzureCredentialDto
	CreateByoSipTrunkCredentialDto                       *CreateByoSipTrunkCredentialDto
	CreateCartesiaCredentialDto                          *CreateCartesiaCredentialDto
	CreateCerebrasCredentialDto                          *CreateCerebrasCredentialDto
	CreateCloudflareCredentialDto                        *CreateCloudflareCredentialDto
	CreateCustomLlmCredentialDto                         *CreateCustomLlmCredentialDto
	CreateDeepgramCredentialDto                          *CreateDeepgramCredentialDto
	CreateDeepInfraCredentialDto                         *CreateDeepInfraCredentialDto
	CreateDeepSeekCredentialDto                          *CreateDeepSeekCredentialDto
	CreateGcpCredentialDto                               *CreateGcpCredentialDto
	CreateGladiaCredentialDto                            *CreateGladiaCredentialDto
	CreateGoHighLevelCredentialDto                       *CreateGoHighLevelCredentialDto
	CreateGoogleCredentialDto                            *CreateGoogleCredentialDto
	CreateGroqCredentialDto                              *CreateGroqCredentialDto
	CreateInflectionAiCredentialDto                      *CreateInflectionAiCredentialDto
	CreateLangfuseCredentialDto                          *CreateLangfuseCredentialDto
	CreateLmntCredentialDto                              *CreateLmntCredentialDto
	CreateMakeCredentialDto                              *CreateMakeCredentialDto
	CreateOpenAiCredentialDto                            *CreateOpenAiCredentialDto
	CreateOpenRouterCredentialDto                        *CreateOpenRouterCredentialDto
	CreatePerplexityAiCredentialDto                      *CreatePerplexityAiCredentialDto
	CreatePlayHtCredentialDto                            *CreatePlayHtCredentialDto
	CreateRimeAiCredentialDto                            *CreateRimeAiCredentialDto
	CreateRunpodCredentialDto                            *CreateRunpodCredentialDto
	CreateS3CredentialDto                                *CreateS3CredentialDto
	CreateSupabaseCredentialDto                          *CreateSupabaseCredentialDto
	CreateSmallestAiCredentialDto                        *CreateSmallestAiCredentialDto
	CreateTavusCredentialDto                             *CreateTavusCredentialDto
	CreateTogetherAiCredentialDto                        *CreateTogetherAiCredentialDto
	CreateTwilioCredentialDto                            *CreateTwilioCredentialDto
	CreateVonageCredentialDto                            *CreateVonageCredentialDto
	CreateWebhookCredentialDto                           *CreateWebhookCredentialDto
	CreateXAiCredentialDto                               *CreateXAiCredentialDto
	CreateNeuphonicCredentialDto                         *CreateNeuphonicCredentialDto
	CreateHumeCredentialDto                              *CreateHumeCredentialDto
	CreateMistralCredentialDto                           *CreateMistralCredentialDto
	CreateSpeechmaticsCredentialDto                      *CreateSpeechmaticsCredentialDto
	CreateTrieveCredentialDto                            *CreateTrieveCredentialDto
	CreateGoogleCalendarOAuth2ClientCredentialDto        *CreateGoogleCalendarOAuth2ClientCredentialDto
	CreateGoogleCalendarOAuth2AuthorizationCredentialDto *CreateGoogleCalendarOAuth2AuthorizationCredentialDto
	CreateGoogleSheetsOAuth2AuthorizationCredentialDto   *CreateGoogleSheetsOAuth2AuthorizationCredentialDto
	CreateSlackOAuth2AuthorizationCredentialDto          *CreateSlackOAuth2AuthorizationCredentialDto
	CreateGoHighLevelMcpCredentialDto                    *CreateGoHighLevelMcpCredentialDto

	typ string
}

func (a *AssistantCredentialsItem) GetCreateElevenLabsCredentialDto() *CreateElevenLabsCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateElevenLabsCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateAnthropicCredentialDto() *CreateAnthropicCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateAnthropicCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateAnyscaleCredentialDto() *CreateAnyscaleCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateAnyscaleCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateAssemblyAiCredentialDto() *CreateAssemblyAiCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateAssemblyAiCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateAzureOpenAiCredentialDto() *CreateAzureOpenAiCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateAzureOpenAiCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateAzureCredentialDto() *CreateAzureCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateAzureCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateByoSipTrunkCredentialDto() *CreateByoSipTrunkCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateByoSipTrunkCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateCartesiaCredentialDto() *CreateCartesiaCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateCartesiaCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateCerebrasCredentialDto() *CreateCerebrasCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateCerebrasCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateCloudflareCredentialDto() *CreateCloudflareCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateCloudflareCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateCustomLlmCredentialDto() *CreateCustomLlmCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateCustomLlmCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateDeepgramCredentialDto() *CreateDeepgramCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateDeepgramCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateDeepInfraCredentialDto() *CreateDeepInfraCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateDeepInfraCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateDeepSeekCredentialDto() *CreateDeepSeekCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateDeepSeekCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateGcpCredentialDto() *CreateGcpCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateGcpCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateGladiaCredentialDto() *CreateGladiaCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateGladiaCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateGoHighLevelCredentialDto() *CreateGoHighLevelCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateGoHighLevelCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateGoogleCredentialDto() *CreateGoogleCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateGoogleCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateGroqCredentialDto() *CreateGroqCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateGroqCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateInflectionAiCredentialDto() *CreateInflectionAiCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateInflectionAiCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateLangfuseCredentialDto() *CreateLangfuseCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateLangfuseCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateLmntCredentialDto() *CreateLmntCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateLmntCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateMakeCredentialDto() *CreateMakeCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateMakeCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateOpenAiCredentialDto() *CreateOpenAiCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateOpenAiCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateOpenRouterCredentialDto() *CreateOpenRouterCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateOpenRouterCredentialDto
}

func (a *AssistantCredentialsItem) GetCreatePerplexityAiCredentialDto() *CreatePerplexityAiCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreatePerplexityAiCredentialDto
}

func (a *AssistantCredentialsItem) GetCreatePlayHtCredentialDto() *CreatePlayHtCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreatePlayHtCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateRimeAiCredentialDto() *CreateRimeAiCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateRimeAiCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateRunpodCredentialDto() *CreateRunpodCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateRunpodCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateS3CredentialDto() *CreateS3CredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateS3CredentialDto
}

func (a *AssistantCredentialsItem) GetCreateSupabaseCredentialDto() *CreateSupabaseCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateSupabaseCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateSmallestAiCredentialDto() *CreateSmallestAiCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateSmallestAiCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateTavusCredentialDto() *CreateTavusCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateTavusCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateTogetherAiCredentialDto() *CreateTogetherAiCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateTogetherAiCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateTwilioCredentialDto() *CreateTwilioCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateTwilioCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateVonageCredentialDto() *CreateVonageCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateVonageCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateWebhookCredentialDto() *CreateWebhookCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateWebhookCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateXAiCredentialDto() *CreateXAiCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateXAiCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateNeuphonicCredentialDto() *CreateNeuphonicCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateNeuphonicCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateHumeCredentialDto() *CreateHumeCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateHumeCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateMistralCredentialDto() *CreateMistralCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateMistralCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateSpeechmaticsCredentialDto() *CreateSpeechmaticsCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateSpeechmaticsCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateTrieveCredentialDto() *CreateTrieveCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateTrieveCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateGoogleCalendarOAuth2ClientCredentialDto() *CreateGoogleCalendarOAuth2ClientCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateGoogleCalendarOAuth2ClientCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateGoogleCalendarOAuth2AuthorizationCredentialDto() *CreateGoogleCalendarOAuth2AuthorizationCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateGoogleCalendarOAuth2AuthorizationCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateGoogleSheetsOAuth2AuthorizationCredentialDto() *CreateGoogleSheetsOAuth2AuthorizationCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateGoogleSheetsOAuth2AuthorizationCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateSlackOAuth2AuthorizationCredentialDto() *CreateSlackOAuth2AuthorizationCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateSlackOAuth2AuthorizationCredentialDto
}

func (a *AssistantCredentialsItem) GetCreateGoHighLevelMcpCredentialDto() *CreateGoHighLevelMcpCredentialDto {
	if a == nil {
		return nil
	}
	return a.CreateGoHighLevelMcpCredentialDto
}

func (a *AssistantCredentialsItem) UnmarshalJSON(data []byte) error {
	valueCreateElevenLabsCredentialDto := new(CreateElevenLabsCredentialDto)
	if err := json.Unmarshal(data, &valueCreateElevenLabsCredentialDto); err == nil {
		a.typ = "CreateElevenLabsCredentialDto"
		a.CreateElevenLabsCredentialDto = valueCreateElevenLabsCredentialDto
		return nil
	}
	valueCreateAnthropicCredentialDto := new(CreateAnthropicCredentialDto)
	if err := json.Unmarshal(data, &valueCreateAnthropicCredentialDto); err == nil {
		a.typ = "CreateAnthropicCredentialDto"
		a.CreateAnthropicCredentialDto = valueCreateAnthropicCredentialDto
		return nil
	}
	valueCreateAnyscaleCredentialDto := new(CreateAnyscaleCredentialDto)
	if err := json.Unmarshal(data, &valueCreateAnyscaleCredentialDto); err == nil {
		a.typ = "CreateAnyscaleCredentialDto"
		a.CreateAnyscaleCredentialDto = valueCreateAnyscaleCredentialDto
		return nil
	}
	valueCreateAssemblyAiCredentialDto := new(CreateAssemblyAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateAssemblyAiCredentialDto); err == nil {
		a.typ = "CreateAssemblyAiCredentialDto"
		a.CreateAssemblyAiCredentialDto = valueCreateAssemblyAiCredentialDto
		return nil
	}
	valueCreateAzureOpenAiCredentialDto := new(CreateAzureOpenAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateAzureOpenAiCredentialDto); err == nil {
		a.typ = "CreateAzureOpenAiCredentialDto"
		a.CreateAzureOpenAiCredentialDto = valueCreateAzureOpenAiCredentialDto
		return nil
	}
	valueCreateAzureCredentialDto := new(CreateAzureCredentialDto)
	if err := json.Unmarshal(data, &valueCreateAzureCredentialDto); err == nil {
		a.typ = "CreateAzureCredentialDto"
		a.CreateAzureCredentialDto = valueCreateAzureCredentialDto
		return nil
	}
	valueCreateByoSipTrunkCredentialDto := new(CreateByoSipTrunkCredentialDto)
	if err := json.Unmarshal(data, &valueCreateByoSipTrunkCredentialDto); err == nil {
		a.typ = "CreateByoSipTrunkCredentialDto"
		a.CreateByoSipTrunkCredentialDto = valueCreateByoSipTrunkCredentialDto
		return nil
	}
	valueCreateCartesiaCredentialDto := new(CreateCartesiaCredentialDto)
	if err := json.Unmarshal(data, &valueCreateCartesiaCredentialDto); err == nil {
		a.typ = "CreateCartesiaCredentialDto"
		a.CreateCartesiaCredentialDto = valueCreateCartesiaCredentialDto
		return nil
	}
	valueCreateCerebrasCredentialDto := new(CreateCerebrasCredentialDto)
	if err := json.Unmarshal(data, &valueCreateCerebrasCredentialDto); err == nil {
		a.typ = "CreateCerebrasCredentialDto"
		a.CreateCerebrasCredentialDto = valueCreateCerebrasCredentialDto
		return nil
	}
	valueCreateCloudflareCredentialDto := new(CreateCloudflareCredentialDto)
	if err := json.Unmarshal(data, &valueCreateCloudflareCredentialDto); err == nil {
		a.typ = "CreateCloudflareCredentialDto"
		a.CreateCloudflareCredentialDto = valueCreateCloudflareCredentialDto
		return nil
	}
	valueCreateCustomLlmCredentialDto := new(CreateCustomLlmCredentialDto)
	if err := json.Unmarshal(data, &valueCreateCustomLlmCredentialDto); err == nil {
		a.typ = "CreateCustomLlmCredentialDto"
		a.CreateCustomLlmCredentialDto = valueCreateCustomLlmCredentialDto
		return nil
	}
	valueCreateDeepgramCredentialDto := new(CreateDeepgramCredentialDto)
	if err := json.Unmarshal(data, &valueCreateDeepgramCredentialDto); err == nil {
		a.typ = "CreateDeepgramCredentialDto"
		a.CreateDeepgramCredentialDto = valueCreateDeepgramCredentialDto
		return nil
	}
	valueCreateDeepInfraCredentialDto := new(CreateDeepInfraCredentialDto)
	if err := json.Unmarshal(data, &valueCreateDeepInfraCredentialDto); err == nil {
		a.typ = "CreateDeepInfraCredentialDto"
		a.CreateDeepInfraCredentialDto = valueCreateDeepInfraCredentialDto
		return nil
	}
	valueCreateDeepSeekCredentialDto := new(CreateDeepSeekCredentialDto)
	if err := json.Unmarshal(data, &valueCreateDeepSeekCredentialDto); err == nil {
		a.typ = "CreateDeepSeekCredentialDto"
		a.CreateDeepSeekCredentialDto = valueCreateDeepSeekCredentialDto
		return nil
	}
	valueCreateGcpCredentialDto := new(CreateGcpCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGcpCredentialDto); err == nil {
		a.typ = "CreateGcpCredentialDto"
		a.CreateGcpCredentialDto = valueCreateGcpCredentialDto
		return nil
	}
	valueCreateGladiaCredentialDto := new(CreateGladiaCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGladiaCredentialDto); err == nil {
		a.typ = "CreateGladiaCredentialDto"
		a.CreateGladiaCredentialDto = valueCreateGladiaCredentialDto
		return nil
	}
	valueCreateGoHighLevelCredentialDto := new(CreateGoHighLevelCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGoHighLevelCredentialDto); err == nil {
		a.typ = "CreateGoHighLevelCredentialDto"
		a.CreateGoHighLevelCredentialDto = valueCreateGoHighLevelCredentialDto
		return nil
	}
	valueCreateGoogleCredentialDto := new(CreateGoogleCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGoogleCredentialDto); err == nil {
		a.typ = "CreateGoogleCredentialDto"
		a.CreateGoogleCredentialDto = valueCreateGoogleCredentialDto
		return nil
	}
	valueCreateGroqCredentialDto := new(CreateGroqCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGroqCredentialDto); err == nil {
		a.typ = "CreateGroqCredentialDto"
		a.CreateGroqCredentialDto = valueCreateGroqCredentialDto
		return nil
	}
	valueCreateInflectionAiCredentialDto := new(CreateInflectionAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateInflectionAiCredentialDto); err == nil {
		a.typ = "CreateInflectionAiCredentialDto"
		a.CreateInflectionAiCredentialDto = valueCreateInflectionAiCredentialDto
		return nil
	}
	valueCreateLangfuseCredentialDto := new(CreateLangfuseCredentialDto)
	if err := json.Unmarshal(data, &valueCreateLangfuseCredentialDto); err == nil {
		a.typ = "CreateLangfuseCredentialDto"
		a.CreateLangfuseCredentialDto = valueCreateLangfuseCredentialDto
		return nil
	}
	valueCreateLmntCredentialDto := new(CreateLmntCredentialDto)
	if err := json.Unmarshal(data, &valueCreateLmntCredentialDto); err == nil {
		a.typ = "CreateLmntCredentialDto"
		a.CreateLmntCredentialDto = valueCreateLmntCredentialDto
		return nil
	}
	valueCreateMakeCredentialDto := new(CreateMakeCredentialDto)
	if err := json.Unmarshal(data, &valueCreateMakeCredentialDto); err == nil {
		a.typ = "CreateMakeCredentialDto"
		a.CreateMakeCredentialDto = valueCreateMakeCredentialDto
		return nil
	}
	valueCreateOpenAiCredentialDto := new(CreateOpenAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateOpenAiCredentialDto); err == nil {
		a.typ = "CreateOpenAiCredentialDto"
		a.CreateOpenAiCredentialDto = valueCreateOpenAiCredentialDto
		return nil
	}
	valueCreateOpenRouterCredentialDto := new(CreateOpenRouterCredentialDto)
	if err := json.Unmarshal(data, &valueCreateOpenRouterCredentialDto); err == nil {
		a.typ = "CreateOpenRouterCredentialDto"
		a.CreateOpenRouterCredentialDto = valueCreateOpenRouterCredentialDto
		return nil
	}
	valueCreatePerplexityAiCredentialDto := new(CreatePerplexityAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreatePerplexityAiCredentialDto); err == nil {
		a.typ = "CreatePerplexityAiCredentialDto"
		a.CreatePerplexityAiCredentialDto = valueCreatePerplexityAiCredentialDto
		return nil
	}
	valueCreatePlayHtCredentialDto := new(CreatePlayHtCredentialDto)
	if err := json.Unmarshal(data, &valueCreatePlayHtCredentialDto); err == nil {
		a.typ = "CreatePlayHtCredentialDto"
		a.CreatePlayHtCredentialDto = valueCreatePlayHtCredentialDto
		return nil
	}
	valueCreateRimeAiCredentialDto := new(CreateRimeAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateRimeAiCredentialDto); err == nil {
		a.typ = "CreateRimeAiCredentialDto"
		a.CreateRimeAiCredentialDto = valueCreateRimeAiCredentialDto
		return nil
	}
	valueCreateRunpodCredentialDto := new(CreateRunpodCredentialDto)
	if err := json.Unmarshal(data, &valueCreateRunpodCredentialDto); err == nil {
		a.typ = "CreateRunpodCredentialDto"
		a.CreateRunpodCredentialDto = valueCreateRunpodCredentialDto
		return nil
	}
	valueCreateS3CredentialDto := new(CreateS3CredentialDto)
	if err := json.Unmarshal(data, &valueCreateS3CredentialDto); err == nil {
		a.typ = "CreateS3CredentialDto"
		a.CreateS3CredentialDto = valueCreateS3CredentialDto
		return nil
	}
	valueCreateSupabaseCredentialDto := new(CreateSupabaseCredentialDto)
	if err := json.Unmarshal(data, &valueCreateSupabaseCredentialDto); err == nil {
		a.typ = "CreateSupabaseCredentialDto"
		a.CreateSupabaseCredentialDto = valueCreateSupabaseCredentialDto
		return nil
	}
	valueCreateSmallestAiCredentialDto := new(CreateSmallestAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateSmallestAiCredentialDto); err == nil {
		a.typ = "CreateSmallestAiCredentialDto"
		a.CreateSmallestAiCredentialDto = valueCreateSmallestAiCredentialDto
		return nil
	}
	valueCreateTavusCredentialDto := new(CreateTavusCredentialDto)
	if err := json.Unmarshal(data, &valueCreateTavusCredentialDto); err == nil {
		a.typ = "CreateTavusCredentialDto"
		a.CreateTavusCredentialDto = valueCreateTavusCredentialDto
		return nil
	}
	valueCreateTogetherAiCredentialDto := new(CreateTogetherAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateTogetherAiCredentialDto); err == nil {
		a.typ = "CreateTogetherAiCredentialDto"
		a.CreateTogetherAiCredentialDto = valueCreateTogetherAiCredentialDto
		return nil
	}
	valueCreateTwilioCredentialDto := new(CreateTwilioCredentialDto)
	if err := json.Unmarshal(data, &valueCreateTwilioCredentialDto); err == nil {
		a.typ = "CreateTwilioCredentialDto"
		a.CreateTwilioCredentialDto = valueCreateTwilioCredentialDto
		return nil
	}
	valueCreateVonageCredentialDto := new(CreateVonageCredentialDto)
	if err := json.Unmarshal(data, &valueCreateVonageCredentialDto); err == nil {
		a.typ = "CreateVonageCredentialDto"
		a.CreateVonageCredentialDto = valueCreateVonageCredentialDto
		return nil
	}
	valueCreateWebhookCredentialDto := new(CreateWebhookCredentialDto)
	if err := json.Unmarshal(data, &valueCreateWebhookCredentialDto); err == nil {
		a.typ = "CreateWebhookCredentialDto"
		a.CreateWebhookCredentialDto = valueCreateWebhookCredentialDto
		return nil
	}
	valueCreateXAiCredentialDto := new(CreateXAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateXAiCredentialDto); err == nil {
		a.typ = "CreateXAiCredentialDto"
		a.CreateXAiCredentialDto = valueCreateXAiCredentialDto
		return nil
	}
	valueCreateNeuphonicCredentialDto := new(CreateNeuphonicCredentialDto)
	if err := json.Unmarshal(data, &valueCreateNeuphonicCredentialDto); err == nil {
		a.typ = "CreateNeuphonicCredentialDto"
		a.CreateNeuphonicCredentialDto = valueCreateNeuphonicCredentialDto
		return nil
	}
	valueCreateHumeCredentialDto := new(CreateHumeCredentialDto)
	if err := json.Unmarshal(data, &valueCreateHumeCredentialDto); err == nil {
		a.typ = "CreateHumeCredentialDto"
		a.CreateHumeCredentialDto = valueCreateHumeCredentialDto
		return nil
	}
	valueCreateMistralCredentialDto := new(CreateMistralCredentialDto)
	if err := json.Unmarshal(data, &valueCreateMistralCredentialDto); err == nil {
		a.typ = "CreateMistralCredentialDto"
		a.CreateMistralCredentialDto = valueCreateMistralCredentialDto
		return nil
	}
	valueCreateSpeechmaticsCredentialDto := new(CreateSpeechmaticsCredentialDto)
	if err := json.Unmarshal(data, &valueCreateSpeechmaticsCredentialDto); err == nil {
		a.typ = "CreateSpeechmaticsCredentialDto"
		a.CreateSpeechmaticsCredentialDto = valueCreateSpeechmaticsCredentialDto
		return nil
	}
	valueCreateTrieveCredentialDto := new(CreateTrieveCredentialDto)
	if err := json.Unmarshal(data, &valueCreateTrieveCredentialDto); err == nil {
		a.typ = "CreateTrieveCredentialDto"
		a.CreateTrieveCredentialDto = valueCreateTrieveCredentialDto
		return nil
	}
	valueCreateGoogleCalendarOAuth2ClientCredentialDto := new(CreateGoogleCalendarOAuth2ClientCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGoogleCalendarOAuth2ClientCredentialDto); err == nil {
		a.typ = "CreateGoogleCalendarOAuth2ClientCredentialDto"
		a.CreateGoogleCalendarOAuth2ClientCredentialDto = valueCreateGoogleCalendarOAuth2ClientCredentialDto
		return nil
	}
	valueCreateGoogleCalendarOAuth2AuthorizationCredentialDto := new(CreateGoogleCalendarOAuth2AuthorizationCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGoogleCalendarOAuth2AuthorizationCredentialDto); err == nil {
		a.typ = "CreateGoogleCalendarOAuth2AuthorizationCredentialDto"
		a.CreateGoogleCalendarOAuth2AuthorizationCredentialDto = valueCreateGoogleCalendarOAuth2AuthorizationCredentialDto
		return nil
	}
	valueCreateGoogleSheetsOAuth2AuthorizationCredentialDto := new(CreateGoogleSheetsOAuth2AuthorizationCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGoogleSheetsOAuth2AuthorizationCredentialDto); err == nil {
		a.typ = "CreateGoogleSheetsOAuth2AuthorizationCredentialDto"
		a.CreateGoogleSheetsOAuth2AuthorizationCredentialDto = valueCreateGoogleSheetsOAuth2AuthorizationCredentialDto
		return nil
	}
	valueCreateSlackOAuth2AuthorizationCredentialDto := new(CreateSlackOAuth2AuthorizationCredentialDto)
	if err := json.Unmarshal(data, &valueCreateSlackOAuth2AuthorizationCredentialDto); err == nil {
		a.typ = "CreateSlackOAuth2AuthorizationCredentialDto"
		a.CreateSlackOAuth2AuthorizationCredentialDto = valueCreateSlackOAuth2AuthorizationCredentialDto
		return nil
	}
	valueCreateGoHighLevelMcpCredentialDto := new(CreateGoHighLevelMcpCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGoHighLevelMcpCredentialDto); err == nil {
		a.typ = "CreateGoHighLevelMcpCredentialDto"
		a.CreateGoHighLevelMcpCredentialDto = valueCreateGoHighLevelMcpCredentialDto
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AssistantCredentialsItem) MarshalJSON() ([]byte, error) {
	if a.typ == "CreateElevenLabsCredentialDto" || a.CreateElevenLabsCredentialDto != nil {
		return json.Marshal(a.CreateElevenLabsCredentialDto)
	}
	if a.typ == "CreateAnthropicCredentialDto" || a.CreateAnthropicCredentialDto != nil {
		return json.Marshal(a.CreateAnthropicCredentialDto)
	}
	if a.typ == "CreateAnyscaleCredentialDto" || a.CreateAnyscaleCredentialDto != nil {
		return json.Marshal(a.CreateAnyscaleCredentialDto)
	}
	if a.typ == "CreateAssemblyAiCredentialDto" || a.CreateAssemblyAiCredentialDto != nil {
		return json.Marshal(a.CreateAssemblyAiCredentialDto)
	}
	if a.typ == "CreateAzureOpenAiCredentialDto" || a.CreateAzureOpenAiCredentialDto != nil {
		return json.Marshal(a.CreateAzureOpenAiCredentialDto)
	}
	if a.typ == "CreateAzureCredentialDto" || a.CreateAzureCredentialDto != nil {
		return json.Marshal(a.CreateAzureCredentialDto)
	}
	if a.typ == "CreateByoSipTrunkCredentialDto" || a.CreateByoSipTrunkCredentialDto != nil {
		return json.Marshal(a.CreateByoSipTrunkCredentialDto)
	}
	if a.typ == "CreateCartesiaCredentialDto" || a.CreateCartesiaCredentialDto != nil {
		return json.Marshal(a.CreateCartesiaCredentialDto)
	}
	if a.typ == "CreateCerebrasCredentialDto" || a.CreateCerebrasCredentialDto != nil {
		return json.Marshal(a.CreateCerebrasCredentialDto)
	}
	if a.typ == "CreateCloudflareCredentialDto" || a.CreateCloudflareCredentialDto != nil {
		return json.Marshal(a.CreateCloudflareCredentialDto)
	}
	if a.typ == "CreateCustomLlmCredentialDto" || a.CreateCustomLlmCredentialDto != nil {
		return json.Marshal(a.CreateCustomLlmCredentialDto)
	}
	if a.typ == "CreateDeepgramCredentialDto" || a.CreateDeepgramCredentialDto != nil {
		return json.Marshal(a.CreateDeepgramCredentialDto)
	}
	if a.typ == "CreateDeepInfraCredentialDto" || a.CreateDeepInfraCredentialDto != nil {
		return json.Marshal(a.CreateDeepInfraCredentialDto)
	}
	if a.typ == "CreateDeepSeekCredentialDto" || a.CreateDeepSeekCredentialDto != nil {
		return json.Marshal(a.CreateDeepSeekCredentialDto)
	}
	if a.typ == "CreateGcpCredentialDto" || a.CreateGcpCredentialDto != nil {
		return json.Marshal(a.CreateGcpCredentialDto)
	}
	if a.typ == "CreateGladiaCredentialDto" || a.CreateGladiaCredentialDto != nil {
		return json.Marshal(a.CreateGladiaCredentialDto)
	}
	if a.typ == "CreateGoHighLevelCredentialDto" || a.CreateGoHighLevelCredentialDto != nil {
		return json.Marshal(a.CreateGoHighLevelCredentialDto)
	}
	if a.typ == "CreateGoogleCredentialDto" || a.CreateGoogleCredentialDto != nil {
		return json.Marshal(a.CreateGoogleCredentialDto)
	}
	if a.typ == "CreateGroqCredentialDto" || a.CreateGroqCredentialDto != nil {
		return json.Marshal(a.CreateGroqCredentialDto)
	}
	if a.typ == "CreateInflectionAiCredentialDto" || a.CreateInflectionAiCredentialDto != nil {
		return json.Marshal(a.CreateInflectionAiCredentialDto)
	}
	if a.typ == "CreateLangfuseCredentialDto" || a.CreateLangfuseCredentialDto != nil {
		return json.Marshal(a.CreateLangfuseCredentialDto)
	}
	if a.typ == "CreateLmntCredentialDto" || a.CreateLmntCredentialDto != nil {
		return json.Marshal(a.CreateLmntCredentialDto)
	}
	if a.typ == "CreateMakeCredentialDto" || a.CreateMakeCredentialDto != nil {
		return json.Marshal(a.CreateMakeCredentialDto)
	}
	if a.typ == "CreateOpenAiCredentialDto" || a.CreateOpenAiCredentialDto != nil {
		return json.Marshal(a.CreateOpenAiCredentialDto)
	}
	if a.typ == "CreateOpenRouterCredentialDto" || a.CreateOpenRouterCredentialDto != nil {
		return json.Marshal(a.CreateOpenRouterCredentialDto)
	}
	if a.typ == "CreatePerplexityAiCredentialDto" || a.CreatePerplexityAiCredentialDto != nil {
		return json.Marshal(a.CreatePerplexityAiCredentialDto)
	}
	if a.typ == "CreatePlayHtCredentialDto" || a.CreatePlayHtCredentialDto != nil {
		return json.Marshal(a.CreatePlayHtCredentialDto)
	}
	if a.typ == "CreateRimeAiCredentialDto" || a.CreateRimeAiCredentialDto != nil {
		return json.Marshal(a.CreateRimeAiCredentialDto)
	}
	if a.typ == "CreateRunpodCredentialDto" || a.CreateRunpodCredentialDto != nil {
		return json.Marshal(a.CreateRunpodCredentialDto)
	}
	if a.typ == "CreateS3CredentialDto" || a.CreateS3CredentialDto != nil {
		return json.Marshal(a.CreateS3CredentialDto)
	}
	if a.typ == "CreateSupabaseCredentialDto" || a.CreateSupabaseCredentialDto != nil {
		return json.Marshal(a.CreateSupabaseCredentialDto)
	}
	if a.typ == "CreateSmallestAiCredentialDto" || a.CreateSmallestAiCredentialDto != nil {
		return json.Marshal(a.CreateSmallestAiCredentialDto)
	}
	if a.typ == "CreateTavusCredentialDto" || a.CreateTavusCredentialDto != nil {
		return json.Marshal(a.CreateTavusCredentialDto)
	}
	if a.typ == "CreateTogetherAiCredentialDto" || a.CreateTogetherAiCredentialDto != nil {
		return json.Marshal(a.CreateTogetherAiCredentialDto)
	}
	if a.typ == "CreateTwilioCredentialDto" || a.CreateTwilioCredentialDto != nil {
		return json.Marshal(a.CreateTwilioCredentialDto)
	}
	if a.typ == "CreateVonageCredentialDto" || a.CreateVonageCredentialDto != nil {
		return json.Marshal(a.CreateVonageCredentialDto)
	}
	if a.typ == "CreateWebhookCredentialDto" || a.CreateWebhookCredentialDto != nil {
		return json.Marshal(a.CreateWebhookCredentialDto)
	}
	if a.typ == "CreateXAiCredentialDto" || a.CreateXAiCredentialDto != nil {
		return json.Marshal(a.CreateXAiCredentialDto)
	}
	if a.typ == "CreateNeuphonicCredentialDto" || a.CreateNeuphonicCredentialDto != nil {
		return json.Marshal(a.CreateNeuphonicCredentialDto)
	}
	if a.typ == "CreateHumeCredentialDto" || a.CreateHumeCredentialDto != nil {
		return json.Marshal(a.CreateHumeCredentialDto)
	}
	if a.typ == "CreateMistralCredentialDto" || a.CreateMistralCredentialDto != nil {
		return json.Marshal(a.CreateMistralCredentialDto)
	}
	if a.typ == "CreateSpeechmaticsCredentialDto" || a.CreateSpeechmaticsCredentialDto != nil {
		return json.Marshal(a.CreateSpeechmaticsCredentialDto)
	}
	if a.typ == "CreateTrieveCredentialDto" || a.CreateTrieveCredentialDto != nil {
		return json.Marshal(a.CreateTrieveCredentialDto)
	}
	if a.typ == "CreateGoogleCalendarOAuth2ClientCredentialDto" || a.CreateGoogleCalendarOAuth2ClientCredentialDto != nil {
		return json.Marshal(a.CreateGoogleCalendarOAuth2ClientCredentialDto)
	}
	if a.typ == "CreateGoogleCalendarOAuth2AuthorizationCredentialDto" || a.CreateGoogleCalendarOAuth2AuthorizationCredentialDto != nil {
		return json.Marshal(a.CreateGoogleCalendarOAuth2AuthorizationCredentialDto)
	}
	if a.typ == "CreateGoogleSheetsOAuth2AuthorizationCredentialDto" || a.CreateGoogleSheetsOAuth2AuthorizationCredentialDto != nil {
		return json.Marshal(a.CreateGoogleSheetsOAuth2AuthorizationCredentialDto)
	}
	if a.typ == "CreateSlackOAuth2AuthorizationCredentialDto" || a.CreateSlackOAuth2AuthorizationCredentialDto != nil {
		return json.Marshal(a.CreateSlackOAuth2AuthorizationCredentialDto)
	}
	if a.typ == "CreateGoHighLevelMcpCredentialDto" || a.CreateGoHighLevelMcpCredentialDto != nil {
		return json.Marshal(a.CreateGoHighLevelMcpCredentialDto)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AssistantCredentialsItemVisitor interface {
	VisitCreateElevenLabsCredentialDto(*CreateElevenLabsCredentialDto) error
	VisitCreateAnthropicCredentialDto(*CreateAnthropicCredentialDto) error
	VisitCreateAnyscaleCredentialDto(*CreateAnyscaleCredentialDto) error
	VisitCreateAssemblyAiCredentialDto(*CreateAssemblyAiCredentialDto) error
	VisitCreateAzureOpenAiCredentialDto(*CreateAzureOpenAiCredentialDto) error
	VisitCreateAzureCredentialDto(*CreateAzureCredentialDto) error
	VisitCreateByoSipTrunkCredentialDto(*CreateByoSipTrunkCredentialDto) error
	VisitCreateCartesiaCredentialDto(*CreateCartesiaCredentialDto) error
	VisitCreateCerebrasCredentialDto(*CreateCerebrasCredentialDto) error
	VisitCreateCloudflareCredentialDto(*CreateCloudflareCredentialDto) error
	VisitCreateCustomLlmCredentialDto(*CreateCustomLlmCredentialDto) error
	VisitCreateDeepgramCredentialDto(*CreateDeepgramCredentialDto) error
	VisitCreateDeepInfraCredentialDto(*CreateDeepInfraCredentialDto) error
	VisitCreateDeepSeekCredentialDto(*CreateDeepSeekCredentialDto) error
	VisitCreateGcpCredentialDto(*CreateGcpCredentialDto) error
	VisitCreateGladiaCredentialDto(*CreateGladiaCredentialDto) error
	VisitCreateGoHighLevelCredentialDto(*CreateGoHighLevelCredentialDto) error
	VisitCreateGoogleCredentialDto(*CreateGoogleCredentialDto) error
	VisitCreateGroqCredentialDto(*CreateGroqCredentialDto) error
	VisitCreateInflectionAiCredentialDto(*CreateInflectionAiCredentialDto) error
	VisitCreateLangfuseCredentialDto(*CreateLangfuseCredentialDto) error
	VisitCreateLmntCredentialDto(*CreateLmntCredentialDto) error
	VisitCreateMakeCredentialDto(*CreateMakeCredentialDto) error
	VisitCreateOpenAiCredentialDto(*CreateOpenAiCredentialDto) error
	VisitCreateOpenRouterCredentialDto(*CreateOpenRouterCredentialDto) error
	VisitCreatePerplexityAiCredentialDto(*CreatePerplexityAiCredentialDto) error
	VisitCreatePlayHtCredentialDto(*CreatePlayHtCredentialDto) error
	VisitCreateRimeAiCredentialDto(*CreateRimeAiCredentialDto) error
	VisitCreateRunpodCredentialDto(*CreateRunpodCredentialDto) error
	VisitCreateS3CredentialDto(*CreateS3CredentialDto) error
	VisitCreateSupabaseCredentialDto(*CreateSupabaseCredentialDto) error
	VisitCreateSmallestAiCredentialDto(*CreateSmallestAiCredentialDto) error
	VisitCreateTavusCredentialDto(*CreateTavusCredentialDto) error
	VisitCreateTogetherAiCredentialDto(*CreateTogetherAiCredentialDto) error
	VisitCreateTwilioCredentialDto(*CreateTwilioCredentialDto) error
	VisitCreateVonageCredentialDto(*CreateVonageCredentialDto) error
	VisitCreateWebhookCredentialDto(*CreateWebhookCredentialDto) error
	VisitCreateXAiCredentialDto(*CreateXAiCredentialDto) error
	VisitCreateNeuphonicCredentialDto(*CreateNeuphonicCredentialDto) error
	VisitCreateHumeCredentialDto(*CreateHumeCredentialDto) error
	VisitCreateMistralCredentialDto(*CreateMistralCredentialDto) error
	VisitCreateSpeechmaticsCredentialDto(*CreateSpeechmaticsCredentialDto) error
	VisitCreateTrieveCredentialDto(*CreateTrieveCredentialDto) error
	VisitCreateGoogleCalendarOAuth2ClientCredentialDto(*CreateGoogleCalendarOAuth2ClientCredentialDto) error
	VisitCreateGoogleCalendarOAuth2AuthorizationCredentialDto(*CreateGoogleCalendarOAuth2AuthorizationCredentialDto) error
	VisitCreateGoogleSheetsOAuth2AuthorizationCredentialDto(*CreateGoogleSheetsOAuth2AuthorizationCredentialDto) error
	VisitCreateSlackOAuth2AuthorizationCredentialDto(*CreateSlackOAuth2AuthorizationCredentialDto) error
	VisitCreateGoHighLevelMcpCredentialDto(*CreateGoHighLevelMcpCredentialDto) error
}

func (a *AssistantCredentialsItem) Accept(visitor AssistantCredentialsItemVisitor) error {
	if a.typ == "CreateElevenLabsCredentialDto" || a.CreateElevenLabsCredentialDto != nil {
		return visitor.VisitCreateElevenLabsCredentialDto(a.CreateElevenLabsCredentialDto)
	}
	if a.typ == "CreateAnthropicCredentialDto" || a.CreateAnthropicCredentialDto != nil {
		return visitor.VisitCreateAnthropicCredentialDto(a.CreateAnthropicCredentialDto)
	}
	if a.typ == "CreateAnyscaleCredentialDto" || a.CreateAnyscaleCredentialDto != nil {
		return visitor.VisitCreateAnyscaleCredentialDto(a.CreateAnyscaleCredentialDto)
	}
	if a.typ == "CreateAssemblyAiCredentialDto" || a.CreateAssemblyAiCredentialDto != nil {
		return visitor.VisitCreateAssemblyAiCredentialDto(a.CreateAssemblyAiCredentialDto)
	}
	if a.typ == "CreateAzureOpenAiCredentialDto" || a.CreateAzureOpenAiCredentialDto != nil {
		return visitor.VisitCreateAzureOpenAiCredentialDto(a.CreateAzureOpenAiCredentialDto)
	}
	if a.typ == "CreateAzureCredentialDto" || a.CreateAzureCredentialDto != nil {
		return visitor.VisitCreateAzureCredentialDto(a.CreateAzureCredentialDto)
	}
	if a.typ == "CreateByoSipTrunkCredentialDto" || a.CreateByoSipTrunkCredentialDto != nil {
		return visitor.VisitCreateByoSipTrunkCredentialDto(a.CreateByoSipTrunkCredentialDto)
	}
	if a.typ == "CreateCartesiaCredentialDto" || a.CreateCartesiaCredentialDto != nil {
		return visitor.VisitCreateCartesiaCredentialDto(a.CreateCartesiaCredentialDto)
	}
	if a.typ == "CreateCerebrasCredentialDto" || a.CreateCerebrasCredentialDto != nil {
		return visitor.VisitCreateCerebrasCredentialDto(a.CreateCerebrasCredentialDto)
	}
	if a.typ == "CreateCloudflareCredentialDto" || a.CreateCloudflareCredentialDto != nil {
		return visitor.VisitCreateCloudflareCredentialDto(a.CreateCloudflareCredentialDto)
	}
	if a.typ == "CreateCustomLlmCredentialDto" || a.CreateCustomLlmCredentialDto != nil {
		return visitor.VisitCreateCustomLlmCredentialDto(a.CreateCustomLlmCredentialDto)
	}
	if a.typ == "CreateDeepgramCredentialDto" || a.CreateDeepgramCredentialDto != nil {
		return visitor.VisitCreateDeepgramCredentialDto(a.CreateDeepgramCredentialDto)
	}
	if a.typ == "CreateDeepInfraCredentialDto" || a.CreateDeepInfraCredentialDto != nil {
		return visitor.VisitCreateDeepInfraCredentialDto(a.CreateDeepInfraCredentialDto)
	}
	if a.typ == "CreateDeepSeekCredentialDto" || a.CreateDeepSeekCredentialDto != nil {
		return visitor.VisitCreateDeepSeekCredentialDto(a.CreateDeepSeekCredentialDto)
	}
	if a.typ == "CreateGcpCredentialDto" || a.CreateGcpCredentialDto != nil {
		return visitor.VisitCreateGcpCredentialDto(a.CreateGcpCredentialDto)
	}
	if a.typ == "CreateGladiaCredentialDto" || a.CreateGladiaCredentialDto != nil {
		return visitor.VisitCreateGladiaCredentialDto(a.CreateGladiaCredentialDto)
	}
	if a.typ == "CreateGoHighLevelCredentialDto" || a.CreateGoHighLevelCredentialDto != nil {
		return visitor.VisitCreateGoHighLevelCredentialDto(a.CreateGoHighLevelCredentialDto)
	}
	if a.typ == "CreateGoogleCredentialDto" || a.CreateGoogleCredentialDto != nil {
		return visitor.VisitCreateGoogleCredentialDto(a.CreateGoogleCredentialDto)
	}
	if a.typ == "CreateGroqCredentialDto" || a.CreateGroqCredentialDto != nil {
		return visitor.VisitCreateGroqCredentialDto(a.CreateGroqCredentialDto)
	}
	if a.typ == "CreateInflectionAiCredentialDto" || a.CreateInflectionAiCredentialDto != nil {
		return visitor.VisitCreateInflectionAiCredentialDto(a.CreateInflectionAiCredentialDto)
	}
	if a.typ == "CreateLangfuseCredentialDto" || a.CreateLangfuseCredentialDto != nil {
		return visitor.VisitCreateLangfuseCredentialDto(a.CreateLangfuseCredentialDto)
	}
	if a.typ == "CreateLmntCredentialDto" || a.CreateLmntCredentialDto != nil {
		return visitor.VisitCreateLmntCredentialDto(a.CreateLmntCredentialDto)
	}
	if a.typ == "CreateMakeCredentialDto" || a.CreateMakeCredentialDto != nil {
		return visitor.VisitCreateMakeCredentialDto(a.CreateMakeCredentialDto)
	}
	if a.typ == "CreateOpenAiCredentialDto" || a.CreateOpenAiCredentialDto != nil {
		return visitor.VisitCreateOpenAiCredentialDto(a.CreateOpenAiCredentialDto)
	}
	if a.typ == "CreateOpenRouterCredentialDto" || a.CreateOpenRouterCredentialDto != nil {
		return visitor.VisitCreateOpenRouterCredentialDto(a.CreateOpenRouterCredentialDto)
	}
	if a.typ == "CreatePerplexityAiCredentialDto" || a.CreatePerplexityAiCredentialDto != nil {
		return visitor.VisitCreatePerplexityAiCredentialDto(a.CreatePerplexityAiCredentialDto)
	}
	if a.typ == "CreatePlayHtCredentialDto" || a.CreatePlayHtCredentialDto != nil {
		return visitor.VisitCreatePlayHtCredentialDto(a.CreatePlayHtCredentialDto)
	}
	if a.typ == "CreateRimeAiCredentialDto" || a.CreateRimeAiCredentialDto != nil {
		return visitor.VisitCreateRimeAiCredentialDto(a.CreateRimeAiCredentialDto)
	}
	if a.typ == "CreateRunpodCredentialDto" || a.CreateRunpodCredentialDto != nil {
		return visitor.VisitCreateRunpodCredentialDto(a.CreateRunpodCredentialDto)
	}
	if a.typ == "CreateS3CredentialDto" || a.CreateS3CredentialDto != nil {
		return visitor.VisitCreateS3CredentialDto(a.CreateS3CredentialDto)
	}
	if a.typ == "CreateSupabaseCredentialDto" || a.CreateSupabaseCredentialDto != nil {
		return visitor.VisitCreateSupabaseCredentialDto(a.CreateSupabaseCredentialDto)
	}
	if a.typ == "CreateSmallestAiCredentialDto" || a.CreateSmallestAiCredentialDto != nil {
		return visitor.VisitCreateSmallestAiCredentialDto(a.CreateSmallestAiCredentialDto)
	}
	if a.typ == "CreateTavusCredentialDto" || a.CreateTavusCredentialDto != nil {
		return visitor.VisitCreateTavusCredentialDto(a.CreateTavusCredentialDto)
	}
	if a.typ == "CreateTogetherAiCredentialDto" || a.CreateTogetherAiCredentialDto != nil {
		return visitor.VisitCreateTogetherAiCredentialDto(a.CreateTogetherAiCredentialDto)
	}
	if a.typ == "CreateTwilioCredentialDto" || a.CreateTwilioCredentialDto != nil {
		return visitor.VisitCreateTwilioCredentialDto(a.CreateTwilioCredentialDto)
	}
	if a.typ == "CreateVonageCredentialDto" || a.CreateVonageCredentialDto != nil {
		return visitor.VisitCreateVonageCredentialDto(a.CreateVonageCredentialDto)
	}
	if a.typ == "CreateWebhookCredentialDto" || a.CreateWebhookCredentialDto != nil {
		return visitor.VisitCreateWebhookCredentialDto(a.CreateWebhookCredentialDto)
	}
	if a.typ == "CreateXAiCredentialDto" || a.CreateXAiCredentialDto != nil {
		return visitor.VisitCreateXAiCredentialDto(a.CreateXAiCredentialDto)
	}
	if a.typ == "CreateNeuphonicCredentialDto" || a.CreateNeuphonicCredentialDto != nil {
		return visitor.VisitCreateNeuphonicCredentialDto(a.CreateNeuphonicCredentialDto)
	}
	if a.typ == "CreateHumeCredentialDto" || a.CreateHumeCredentialDto != nil {
		return visitor.VisitCreateHumeCredentialDto(a.CreateHumeCredentialDto)
	}
	if a.typ == "CreateMistralCredentialDto" || a.CreateMistralCredentialDto != nil {
		return visitor.VisitCreateMistralCredentialDto(a.CreateMistralCredentialDto)
	}
	if a.typ == "CreateSpeechmaticsCredentialDto" || a.CreateSpeechmaticsCredentialDto != nil {
		return visitor.VisitCreateSpeechmaticsCredentialDto(a.CreateSpeechmaticsCredentialDto)
	}
	if a.typ == "CreateTrieveCredentialDto" || a.CreateTrieveCredentialDto != nil {
		return visitor.VisitCreateTrieveCredentialDto(a.CreateTrieveCredentialDto)
	}
	if a.typ == "CreateGoogleCalendarOAuth2ClientCredentialDto" || a.CreateGoogleCalendarOAuth2ClientCredentialDto != nil {
		return visitor.VisitCreateGoogleCalendarOAuth2ClientCredentialDto(a.CreateGoogleCalendarOAuth2ClientCredentialDto)
	}
	if a.typ == "CreateGoogleCalendarOAuth2AuthorizationCredentialDto" || a.CreateGoogleCalendarOAuth2AuthorizationCredentialDto != nil {
		return visitor.VisitCreateGoogleCalendarOAuth2AuthorizationCredentialDto(a.CreateGoogleCalendarOAuth2AuthorizationCredentialDto)
	}
	if a.typ == "CreateGoogleSheetsOAuth2AuthorizationCredentialDto" || a.CreateGoogleSheetsOAuth2AuthorizationCredentialDto != nil {
		return visitor.VisitCreateGoogleSheetsOAuth2AuthorizationCredentialDto(a.CreateGoogleSheetsOAuth2AuthorizationCredentialDto)
	}
	if a.typ == "CreateSlackOAuth2AuthorizationCredentialDto" || a.CreateSlackOAuth2AuthorizationCredentialDto != nil {
		return visitor.VisitCreateSlackOAuth2AuthorizationCredentialDto(a.CreateSlackOAuth2AuthorizationCredentialDto)
	}
	if a.typ == "CreateGoHighLevelMcpCredentialDto" || a.CreateGoHighLevelMcpCredentialDto != nil {
		return visitor.VisitCreateGoHighLevelMcpCredentialDto(a.CreateGoHighLevelMcpCredentialDto)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// This is the mode for the first message. Default is 'assistant-speaks-first'.
//
// Use:
// - 'assistant-speaks-first' to have the assistant speak first.
// - 'assistant-waits-for-user' to have the assistant wait for the user to speak first.
// - 'assistant-speaks-first-with-model-generated-message' to have the assistant speak first with a message generated by the model based on the conversation state. (`assistant.model.messages` at call start, `call.messages` at squad transfer points).
//
// @default 'assistant-speaks-first'
type AssistantFirstMessageMode string

const (
	AssistantFirstMessageModeAssistantSpeaksFirst                          AssistantFirstMessageMode = "assistant-speaks-first"
	AssistantFirstMessageModeAssistantSpeaksFirstWithModelGeneratedMessage AssistantFirstMessageMode = "assistant-speaks-first-with-model-generated-message"
	AssistantFirstMessageModeAssistantWaitsForUser                         AssistantFirstMessageMode = "assistant-waits-for-user"
)

func NewAssistantFirstMessageModeFromString(s string) (AssistantFirstMessageMode, error) {
	switch s {
	case "assistant-speaks-first":
		return AssistantFirstMessageModeAssistantSpeaksFirst, nil
	case "assistant-speaks-first-with-model-generated-message":
		return AssistantFirstMessageModeAssistantSpeaksFirstWithModelGeneratedMessage, nil
	case "assistant-waits-for-user":
		return AssistantFirstMessageModeAssistantWaitsForUser, nil
	}
	var t AssistantFirstMessageMode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AssistantFirstMessageMode) Ptr() *AssistantFirstMessageMode {
	return &a
}

type AssistantHooksItem struct {
	AssistantHookCallEnding                 *AssistantHookCallEnding
	AssistantHookAssistantSpeechInterrupted *AssistantHookAssistantSpeechInterrupted
	AssistantHookCustomerSpeechInterrupted  *AssistantHookCustomerSpeechInterrupted

	typ string
}

func (a *AssistantHooksItem) GetAssistantHookCallEnding() *AssistantHookCallEnding {
	if a == nil {
		return nil
	}
	return a.AssistantHookCallEnding
}

func (a *AssistantHooksItem) GetAssistantHookAssistantSpeechInterrupted() *AssistantHookAssistantSpeechInterrupted {
	if a == nil {
		return nil
	}
	return a.AssistantHookAssistantSpeechInterrupted
}

func (a *AssistantHooksItem) GetAssistantHookCustomerSpeechInterrupted() *AssistantHookCustomerSpeechInterrupted {
	if a == nil {
		return nil
	}
	return a.AssistantHookCustomerSpeechInterrupted
}

func (a *AssistantHooksItem) UnmarshalJSON(data []byte) error {
	valueAssistantHookCallEnding := new(AssistantHookCallEnding)
	if err := json.Unmarshal(data, &valueAssistantHookCallEnding); err == nil {
		a.typ = "AssistantHookCallEnding"
		a.AssistantHookCallEnding = valueAssistantHookCallEnding
		return nil
	}
	valueAssistantHookAssistantSpeechInterrupted := new(AssistantHookAssistantSpeechInterrupted)
	if err := json.Unmarshal(data, &valueAssistantHookAssistantSpeechInterrupted); err == nil {
		a.typ = "AssistantHookAssistantSpeechInterrupted"
		a.AssistantHookAssistantSpeechInterrupted = valueAssistantHookAssistantSpeechInterrupted
		return nil
	}
	valueAssistantHookCustomerSpeechInterrupted := new(AssistantHookCustomerSpeechInterrupted)
	if err := json.Unmarshal(data, &valueAssistantHookCustomerSpeechInterrupted); err == nil {
		a.typ = "AssistantHookCustomerSpeechInterrupted"
		a.AssistantHookCustomerSpeechInterrupted = valueAssistantHookCustomerSpeechInterrupted
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AssistantHooksItem) MarshalJSON() ([]byte, error) {
	if a.typ == "AssistantHookCallEnding" || a.AssistantHookCallEnding != nil {
		return json.Marshal(a.AssistantHookCallEnding)
	}
	if a.typ == "AssistantHookAssistantSpeechInterrupted" || a.AssistantHookAssistantSpeechInterrupted != nil {
		return json.Marshal(a.AssistantHookAssistantSpeechInterrupted)
	}
	if a.typ == "AssistantHookCustomerSpeechInterrupted" || a.AssistantHookCustomerSpeechInterrupted != nil {
		return json.Marshal(a.AssistantHookCustomerSpeechInterrupted)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AssistantHooksItemVisitor interface {
	VisitAssistantHookCallEnding(*AssistantHookCallEnding) error
	VisitAssistantHookAssistantSpeechInterrupted(*AssistantHookAssistantSpeechInterrupted) error
	VisitAssistantHookCustomerSpeechInterrupted(*AssistantHookCustomerSpeechInterrupted) error
}

func (a *AssistantHooksItem) Accept(visitor AssistantHooksItemVisitor) error {
	if a.typ == "AssistantHookCallEnding" || a.AssistantHookCallEnding != nil {
		return visitor.VisitAssistantHookCallEnding(a.AssistantHookCallEnding)
	}
	if a.typ == "AssistantHookAssistantSpeechInterrupted" || a.AssistantHookAssistantSpeechInterrupted != nil {
		return visitor.VisitAssistantHookAssistantSpeechInterrupted(a.AssistantHookAssistantSpeechInterrupted)
	}
	if a.typ == "AssistantHookCustomerSpeechInterrupted" || a.AssistantHookCustomerSpeechInterrupted != nil {
		return visitor.VisitAssistantHookCustomerSpeechInterrupted(a.AssistantHookCustomerSpeechInterrupted)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// These are the options for the assistant's LLM.
type AssistantModel struct {
	AnthropicModel    *AnthropicModel
	AnyscaleModel     *AnyscaleModel
	CerebrasModel     *CerebrasModel
	CustomLlmModel    *CustomLlmModel
	DeepInfraModel    *DeepInfraModel
	DeepSeekModel     *DeepSeekModel
	GoogleModel       *GoogleModel
	GroqModel         *GroqModel
	InflectionAiModel *InflectionAiModel
	OpenAiModel       *OpenAiModel
	OpenRouterModel   *OpenRouterModel
	PerplexityAiModel *PerplexityAiModel
	TogetherAiModel   *TogetherAiModel
	XaiModel          *XaiModel

	typ string
}

func (a *AssistantModel) GetAnthropicModel() *AnthropicModel {
	if a == nil {
		return nil
	}
	return a.AnthropicModel
}

func (a *AssistantModel) GetAnyscaleModel() *AnyscaleModel {
	if a == nil {
		return nil
	}
	return a.AnyscaleModel
}

func (a *AssistantModel) GetCerebrasModel() *CerebrasModel {
	if a == nil {
		return nil
	}
	return a.CerebrasModel
}

func (a *AssistantModel) GetCustomLlmModel() *CustomLlmModel {
	if a == nil {
		return nil
	}
	return a.CustomLlmModel
}

func (a *AssistantModel) GetDeepInfraModel() *DeepInfraModel {
	if a == nil {
		return nil
	}
	return a.DeepInfraModel
}

func (a *AssistantModel) GetDeepSeekModel() *DeepSeekModel {
	if a == nil {
		return nil
	}
	return a.DeepSeekModel
}

func (a *AssistantModel) GetGoogleModel() *GoogleModel {
	if a == nil {
		return nil
	}
	return a.GoogleModel
}

func (a *AssistantModel) GetGroqModel() *GroqModel {
	if a == nil {
		return nil
	}
	return a.GroqModel
}

func (a *AssistantModel) GetInflectionAiModel() *InflectionAiModel {
	if a == nil {
		return nil
	}
	return a.InflectionAiModel
}

func (a *AssistantModel) GetOpenAiModel() *OpenAiModel {
	if a == nil {
		return nil
	}
	return a.OpenAiModel
}

func (a *AssistantModel) GetOpenRouterModel() *OpenRouterModel {
	if a == nil {
		return nil
	}
	return a.OpenRouterModel
}

func (a *AssistantModel) GetPerplexityAiModel() *PerplexityAiModel {
	if a == nil {
		return nil
	}
	return a.PerplexityAiModel
}

func (a *AssistantModel) GetTogetherAiModel() *TogetherAiModel {
	if a == nil {
		return nil
	}
	return a.TogetherAiModel
}

func (a *AssistantModel) GetXaiModel() *XaiModel {
	if a == nil {
		return nil
	}
	return a.XaiModel
}

func (a *AssistantModel) UnmarshalJSON(data []byte) error {
	valueAnthropicModel := new(AnthropicModel)
	if err := json.Unmarshal(data, &valueAnthropicModel); err == nil {
		a.typ = "AnthropicModel"
		a.AnthropicModel = valueAnthropicModel
		return nil
	}
	valueAnyscaleModel := new(AnyscaleModel)
	if err := json.Unmarshal(data, &valueAnyscaleModel); err == nil {
		a.typ = "AnyscaleModel"
		a.AnyscaleModel = valueAnyscaleModel
		return nil
	}
	valueCerebrasModel := new(CerebrasModel)
	if err := json.Unmarshal(data, &valueCerebrasModel); err == nil {
		a.typ = "CerebrasModel"
		a.CerebrasModel = valueCerebrasModel
		return nil
	}
	valueCustomLlmModel := new(CustomLlmModel)
	if err := json.Unmarshal(data, &valueCustomLlmModel); err == nil {
		a.typ = "CustomLlmModel"
		a.CustomLlmModel = valueCustomLlmModel
		return nil
	}
	valueDeepInfraModel := new(DeepInfraModel)
	if err := json.Unmarshal(data, &valueDeepInfraModel); err == nil {
		a.typ = "DeepInfraModel"
		a.DeepInfraModel = valueDeepInfraModel
		return nil
	}
	valueDeepSeekModel := new(DeepSeekModel)
	if err := json.Unmarshal(data, &valueDeepSeekModel); err == nil {
		a.typ = "DeepSeekModel"
		a.DeepSeekModel = valueDeepSeekModel
		return nil
	}
	valueGoogleModel := new(GoogleModel)
	if err := json.Unmarshal(data, &valueGoogleModel); err == nil {
		a.typ = "GoogleModel"
		a.GoogleModel = valueGoogleModel
		return nil
	}
	valueGroqModel := new(GroqModel)
	if err := json.Unmarshal(data, &valueGroqModel); err == nil {
		a.typ = "GroqModel"
		a.GroqModel = valueGroqModel
		return nil
	}
	valueInflectionAiModel := new(InflectionAiModel)
	if err := json.Unmarshal(data, &valueInflectionAiModel); err == nil {
		a.typ = "InflectionAiModel"
		a.InflectionAiModel = valueInflectionAiModel
		return nil
	}
	valueOpenAiModel := new(OpenAiModel)
	if err := json.Unmarshal(data, &valueOpenAiModel); err == nil {
		a.typ = "OpenAiModel"
		a.OpenAiModel = valueOpenAiModel
		return nil
	}
	valueOpenRouterModel := new(OpenRouterModel)
	if err := json.Unmarshal(data, &valueOpenRouterModel); err == nil {
		a.typ = "OpenRouterModel"
		a.OpenRouterModel = valueOpenRouterModel
		return nil
	}
	valuePerplexityAiModel := new(PerplexityAiModel)
	if err := json.Unmarshal(data, &valuePerplexityAiModel); err == nil {
		a.typ = "PerplexityAiModel"
		a.PerplexityAiModel = valuePerplexityAiModel
		return nil
	}
	valueTogetherAiModel := new(TogetherAiModel)
	if err := json.Unmarshal(data, &valueTogetherAiModel); err == nil {
		a.typ = "TogetherAiModel"
		a.TogetherAiModel = valueTogetherAiModel
		return nil
	}
	valueXaiModel := new(XaiModel)
	if err := json.Unmarshal(data, &valueXaiModel); err == nil {
		a.typ = "XaiModel"
		a.XaiModel = valueXaiModel
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AssistantModel) MarshalJSON() ([]byte, error) {
	if a.typ == "AnthropicModel" || a.AnthropicModel != nil {
		return json.Marshal(a.AnthropicModel)
	}
	if a.typ == "AnyscaleModel" || a.AnyscaleModel != nil {
		return json.Marshal(a.AnyscaleModel)
	}
	if a.typ == "CerebrasModel" || a.CerebrasModel != nil {
		return json.Marshal(a.CerebrasModel)
	}
	if a.typ == "CustomLlmModel" || a.CustomLlmModel != nil {
		return json.Marshal(a.CustomLlmModel)
	}
	if a.typ == "DeepInfraModel" || a.DeepInfraModel != nil {
		return json.Marshal(a.DeepInfraModel)
	}
	if a.typ == "DeepSeekModel" || a.DeepSeekModel != nil {
		return json.Marshal(a.DeepSeekModel)
	}
	if a.typ == "GoogleModel" || a.GoogleModel != nil {
		return json.Marshal(a.GoogleModel)
	}
	if a.typ == "GroqModel" || a.GroqModel != nil {
		return json.Marshal(a.GroqModel)
	}
	if a.typ == "InflectionAiModel" || a.InflectionAiModel != nil {
		return json.Marshal(a.InflectionAiModel)
	}
	if a.typ == "OpenAiModel" || a.OpenAiModel != nil {
		return json.Marshal(a.OpenAiModel)
	}
	if a.typ == "OpenRouterModel" || a.OpenRouterModel != nil {
		return json.Marshal(a.OpenRouterModel)
	}
	if a.typ == "PerplexityAiModel" || a.PerplexityAiModel != nil {
		return json.Marshal(a.PerplexityAiModel)
	}
	if a.typ == "TogetherAiModel" || a.TogetherAiModel != nil {
		return json.Marshal(a.TogetherAiModel)
	}
	if a.typ == "XaiModel" || a.XaiModel != nil {
		return json.Marshal(a.XaiModel)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AssistantModelVisitor interface {
	VisitAnthropicModel(*AnthropicModel) error
	VisitAnyscaleModel(*AnyscaleModel) error
	VisitCerebrasModel(*CerebrasModel) error
	VisitCustomLlmModel(*CustomLlmModel) error
	VisitDeepInfraModel(*DeepInfraModel) error
	VisitDeepSeekModel(*DeepSeekModel) error
	VisitGoogleModel(*GoogleModel) error
	VisitGroqModel(*GroqModel) error
	VisitInflectionAiModel(*InflectionAiModel) error
	VisitOpenAiModel(*OpenAiModel) error
	VisitOpenRouterModel(*OpenRouterModel) error
	VisitPerplexityAiModel(*PerplexityAiModel) error
	VisitTogetherAiModel(*TogetherAiModel) error
	VisitXaiModel(*XaiModel) error
}

func (a *AssistantModel) Accept(visitor AssistantModelVisitor) error {
	if a.typ == "AnthropicModel" || a.AnthropicModel != nil {
		return visitor.VisitAnthropicModel(a.AnthropicModel)
	}
	if a.typ == "AnyscaleModel" || a.AnyscaleModel != nil {
		return visitor.VisitAnyscaleModel(a.AnyscaleModel)
	}
	if a.typ == "CerebrasModel" || a.CerebrasModel != nil {
		return visitor.VisitCerebrasModel(a.CerebrasModel)
	}
	if a.typ == "CustomLlmModel" || a.CustomLlmModel != nil {
		return visitor.VisitCustomLlmModel(a.CustomLlmModel)
	}
	if a.typ == "DeepInfraModel" || a.DeepInfraModel != nil {
		return visitor.VisitDeepInfraModel(a.DeepInfraModel)
	}
	if a.typ == "DeepSeekModel" || a.DeepSeekModel != nil {
		return visitor.VisitDeepSeekModel(a.DeepSeekModel)
	}
	if a.typ == "GoogleModel" || a.GoogleModel != nil {
		return visitor.VisitGoogleModel(a.GoogleModel)
	}
	if a.typ == "GroqModel" || a.GroqModel != nil {
		return visitor.VisitGroqModel(a.GroqModel)
	}
	if a.typ == "InflectionAiModel" || a.InflectionAiModel != nil {
		return visitor.VisitInflectionAiModel(a.InflectionAiModel)
	}
	if a.typ == "OpenAiModel" || a.OpenAiModel != nil {
		return visitor.VisitOpenAiModel(a.OpenAiModel)
	}
	if a.typ == "OpenRouterModel" || a.OpenRouterModel != nil {
		return visitor.VisitOpenRouterModel(a.OpenRouterModel)
	}
	if a.typ == "PerplexityAiModel" || a.PerplexityAiModel != nil {
		return visitor.VisitPerplexityAiModel(a.PerplexityAiModel)
	}
	if a.typ == "TogetherAiModel" || a.TogetherAiModel != nil {
		return visitor.VisitTogetherAiModel(a.TogetherAiModel)
	}
	if a.typ == "XaiModel" || a.XaiModel != nil {
		return visitor.VisitXaiModel(a.XaiModel)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AssistantServerMessagesItem string

const (
	AssistantServerMessagesItemConversationUpdate            AssistantServerMessagesItem = "conversation-update"
	AssistantServerMessagesItemEndOfCallReport               AssistantServerMessagesItem = "end-of-call-report"
	AssistantServerMessagesItemFunctionCall                  AssistantServerMessagesItem = "function-call"
	AssistantServerMessagesItemHang                          AssistantServerMessagesItem = "hang"
	AssistantServerMessagesItemLanguageChanged               AssistantServerMessagesItem = "language-changed"
	AssistantServerMessagesItemLanguageChangeDetected        AssistantServerMessagesItem = "language-change-detected"
	AssistantServerMessagesItemModelOutput                   AssistantServerMessagesItem = "model-output"
	AssistantServerMessagesItemPhoneCallControl              AssistantServerMessagesItem = "phone-call-control"
	AssistantServerMessagesItemSpeechUpdate                  AssistantServerMessagesItem = "speech-update"
	AssistantServerMessagesItemStatusUpdate                  AssistantServerMessagesItem = "status-update"
	AssistantServerMessagesItemTranscript                    AssistantServerMessagesItem = "transcript"
	AssistantServerMessagesItemTranscriptTranscriptTypeFinal AssistantServerMessagesItem = "transcript[transcriptType=\\\"final\\\"]"
	AssistantServerMessagesItemToolCalls                     AssistantServerMessagesItem = "tool-calls"
	AssistantServerMessagesItemTransferDestinationRequest    AssistantServerMessagesItem = "transfer-destination-request"
	AssistantServerMessagesItemTransferUpdate                AssistantServerMessagesItem = "transfer-update"
	AssistantServerMessagesItemUserInterrupted               AssistantServerMessagesItem = "user-interrupted"
	AssistantServerMessagesItemVoiceInput                    AssistantServerMessagesItem = "voice-input"
)

func NewAssistantServerMessagesItemFromString(s string) (AssistantServerMessagesItem, error) {
	switch s {
	case "conversation-update":
		return AssistantServerMessagesItemConversationUpdate, nil
	case "end-of-call-report":
		return AssistantServerMessagesItemEndOfCallReport, nil
	case "function-call":
		return AssistantServerMessagesItemFunctionCall, nil
	case "hang":
		return AssistantServerMessagesItemHang, nil
	case "language-changed":
		return AssistantServerMessagesItemLanguageChanged, nil
	case "language-change-detected":
		return AssistantServerMessagesItemLanguageChangeDetected, nil
	case "model-output":
		return AssistantServerMessagesItemModelOutput, nil
	case "phone-call-control":
		return AssistantServerMessagesItemPhoneCallControl, nil
	case "speech-update":
		return AssistantServerMessagesItemSpeechUpdate, nil
	case "status-update":
		return AssistantServerMessagesItemStatusUpdate, nil
	case "transcript":
		return AssistantServerMessagesItemTranscript, nil
	case "transcript[transcriptType=\"final\"]":
		return AssistantServerMessagesItemTranscriptTranscriptTypeFinal, nil
	case "tool-calls":
		return AssistantServerMessagesItemToolCalls, nil
	case "transfer-destination-request":
		return AssistantServerMessagesItemTransferDestinationRequest, nil
	case "transfer-update":
		return AssistantServerMessagesItemTransferUpdate, nil
	case "user-interrupted":
		return AssistantServerMessagesItemUserInterrupted, nil
	case "voice-input":
		return AssistantServerMessagesItemVoiceInput, nil
	}
	var t AssistantServerMessagesItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AssistantServerMessagesItem) Ptr() *AssistantServerMessagesItem {
	return &a
}

// These are the options for the assistant's transcriber.
type AssistantTranscriber struct {
	AssemblyAiTranscriber   *AssemblyAiTranscriber
	AzureSpeechTranscriber  *AzureSpeechTranscriber
	CustomTranscriber       *CustomTranscriber
	DeepgramTranscriber     *DeepgramTranscriber
	ElevenLabsTranscriber   *ElevenLabsTranscriber
	GladiaTranscriber       *GladiaTranscriber
	GoogleTranscriber       *GoogleTranscriber
	SpeechmaticsTranscriber *SpeechmaticsTranscriber
	TalkscriberTranscriber  *TalkscriberTranscriber
	OpenAiTranscriber       *OpenAiTranscriber

	typ string
}

func (a *AssistantTranscriber) GetAssemblyAiTranscriber() *AssemblyAiTranscriber {
	if a == nil {
		return nil
	}
	return a.AssemblyAiTranscriber
}

func (a *AssistantTranscriber) GetAzureSpeechTranscriber() *AzureSpeechTranscriber {
	if a == nil {
		return nil
	}
	return a.AzureSpeechTranscriber
}

func (a *AssistantTranscriber) GetCustomTranscriber() *CustomTranscriber {
	if a == nil {
		return nil
	}
	return a.CustomTranscriber
}

func (a *AssistantTranscriber) GetDeepgramTranscriber() *DeepgramTranscriber {
	if a == nil {
		return nil
	}
	return a.DeepgramTranscriber
}

func (a *AssistantTranscriber) GetElevenLabsTranscriber() *ElevenLabsTranscriber {
	if a == nil {
		return nil
	}
	return a.ElevenLabsTranscriber
}

func (a *AssistantTranscriber) GetGladiaTranscriber() *GladiaTranscriber {
	if a == nil {
		return nil
	}
	return a.GladiaTranscriber
}

func (a *AssistantTranscriber) GetGoogleTranscriber() *GoogleTranscriber {
	if a == nil {
		return nil
	}
	return a.GoogleTranscriber
}

func (a *AssistantTranscriber) GetSpeechmaticsTranscriber() *SpeechmaticsTranscriber {
	if a == nil {
		return nil
	}
	return a.SpeechmaticsTranscriber
}

func (a *AssistantTranscriber) GetTalkscriberTranscriber() *TalkscriberTranscriber {
	if a == nil {
		return nil
	}
	return a.TalkscriberTranscriber
}

func (a *AssistantTranscriber) GetOpenAiTranscriber() *OpenAiTranscriber {
	if a == nil {
		return nil
	}
	return a.OpenAiTranscriber
}

func (a *AssistantTranscriber) UnmarshalJSON(data []byte) error {
	valueAssemblyAiTranscriber := new(AssemblyAiTranscriber)
	if err := json.Unmarshal(data, &valueAssemblyAiTranscriber); err == nil {
		a.typ = "AssemblyAiTranscriber"
		a.AssemblyAiTranscriber = valueAssemblyAiTranscriber
		return nil
	}
	valueAzureSpeechTranscriber := new(AzureSpeechTranscriber)
	if err := json.Unmarshal(data, &valueAzureSpeechTranscriber); err == nil {
		a.typ = "AzureSpeechTranscriber"
		a.AzureSpeechTranscriber = valueAzureSpeechTranscriber
		return nil
	}
	valueCustomTranscriber := new(CustomTranscriber)
	if err := json.Unmarshal(data, &valueCustomTranscriber); err == nil {
		a.typ = "CustomTranscriber"
		a.CustomTranscriber = valueCustomTranscriber
		return nil
	}
	valueDeepgramTranscriber := new(DeepgramTranscriber)
	if err := json.Unmarshal(data, &valueDeepgramTranscriber); err == nil {
		a.typ = "DeepgramTranscriber"
		a.DeepgramTranscriber = valueDeepgramTranscriber
		return nil
	}
	valueElevenLabsTranscriber := new(ElevenLabsTranscriber)
	if err := json.Unmarshal(data, &valueElevenLabsTranscriber); err == nil {
		a.typ = "ElevenLabsTranscriber"
		a.ElevenLabsTranscriber = valueElevenLabsTranscriber
		return nil
	}
	valueGladiaTranscriber := new(GladiaTranscriber)
	if err := json.Unmarshal(data, &valueGladiaTranscriber); err == nil {
		a.typ = "GladiaTranscriber"
		a.GladiaTranscriber = valueGladiaTranscriber
		return nil
	}
	valueGoogleTranscriber := new(GoogleTranscriber)
	if err := json.Unmarshal(data, &valueGoogleTranscriber); err == nil {
		a.typ = "GoogleTranscriber"
		a.GoogleTranscriber = valueGoogleTranscriber
		return nil
	}
	valueSpeechmaticsTranscriber := new(SpeechmaticsTranscriber)
	if err := json.Unmarshal(data, &valueSpeechmaticsTranscriber); err == nil {
		a.typ = "SpeechmaticsTranscriber"
		a.SpeechmaticsTranscriber = valueSpeechmaticsTranscriber
		return nil
	}
	valueTalkscriberTranscriber := new(TalkscriberTranscriber)
	if err := json.Unmarshal(data, &valueTalkscriberTranscriber); err == nil {
		a.typ = "TalkscriberTranscriber"
		a.TalkscriberTranscriber = valueTalkscriberTranscriber
		return nil
	}
	valueOpenAiTranscriber := new(OpenAiTranscriber)
	if err := json.Unmarshal(data, &valueOpenAiTranscriber); err == nil {
		a.typ = "OpenAiTranscriber"
		a.OpenAiTranscriber = valueOpenAiTranscriber
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AssistantTranscriber) MarshalJSON() ([]byte, error) {
	if a.typ == "AssemblyAiTranscriber" || a.AssemblyAiTranscriber != nil {
		return json.Marshal(a.AssemblyAiTranscriber)
	}
	if a.typ == "AzureSpeechTranscriber" || a.AzureSpeechTranscriber != nil {
		return json.Marshal(a.AzureSpeechTranscriber)
	}
	if a.typ == "CustomTranscriber" || a.CustomTranscriber != nil {
		return json.Marshal(a.CustomTranscriber)
	}
	if a.typ == "DeepgramTranscriber" || a.DeepgramTranscriber != nil {
		return json.Marshal(a.DeepgramTranscriber)
	}
	if a.typ == "ElevenLabsTranscriber" || a.ElevenLabsTranscriber != nil {
		return json.Marshal(a.ElevenLabsTranscriber)
	}
	if a.typ == "GladiaTranscriber" || a.GladiaTranscriber != nil {
		return json.Marshal(a.GladiaTranscriber)
	}
	if a.typ == "GoogleTranscriber" || a.GoogleTranscriber != nil {
		return json.Marshal(a.GoogleTranscriber)
	}
	if a.typ == "SpeechmaticsTranscriber" || a.SpeechmaticsTranscriber != nil {
		return json.Marshal(a.SpeechmaticsTranscriber)
	}
	if a.typ == "TalkscriberTranscriber" || a.TalkscriberTranscriber != nil {
		return json.Marshal(a.TalkscriberTranscriber)
	}
	if a.typ == "OpenAiTranscriber" || a.OpenAiTranscriber != nil {
		return json.Marshal(a.OpenAiTranscriber)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AssistantTranscriberVisitor interface {
	VisitAssemblyAiTranscriber(*AssemblyAiTranscriber) error
	VisitAzureSpeechTranscriber(*AzureSpeechTranscriber) error
	VisitCustomTranscriber(*CustomTranscriber) error
	VisitDeepgramTranscriber(*DeepgramTranscriber) error
	VisitElevenLabsTranscriber(*ElevenLabsTranscriber) error
	VisitGladiaTranscriber(*GladiaTranscriber) error
	VisitGoogleTranscriber(*GoogleTranscriber) error
	VisitSpeechmaticsTranscriber(*SpeechmaticsTranscriber) error
	VisitTalkscriberTranscriber(*TalkscriberTranscriber) error
	VisitOpenAiTranscriber(*OpenAiTranscriber) error
}

func (a *AssistantTranscriber) Accept(visitor AssistantTranscriberVisitor) error {
	if a.typ == "AssemblyAiTranscriber" || a.AssemblyAiTranscriber != nil {
		return visitor.VisitAssemblyAiTranscriber(a.AssemblyAiTranscriber)
	}
	if a.typ == "AzureSpeechTranscriber" || a.AzureSpeechTranscriber != nil {
		return visitor.VisitAzureSpeechTranscriber(a.AzureSpeechTranscriber)
	}
	if a.typ == "CustomTranscriber" || a.CustomTranscriber != nil {
		return visitor.VisitCustomTranscriber(a.CustomTranscriber)
	}
	if a.typ == "DeepgramTranscriber" || a.DeepgramTranscriber != nil {
		return visitor.VisitDeepgramTranscriber(a.DeepgramTranscriber)
	}
	if a.typ == "ElevenLabsTranscriber" || a.ElevenLabsTranscriber != nil {
		return visitor.VisitElevenLabsTranscriber(a.ElevenLabsTranscriber)
	}
	if a.typ == "GladiaTranscriber" || a.GladiaTranscriber != nil {
		return visitor.VisitGladiaTranscriber(a.GladiaTranscriber)
	}
	if a.typ == "GoogleTranscriber" || a.GoogleTranscriber != nil {
		return visitor.VisitGoogleTranscriber(a.GoogleTranscriber)
	}
	if a.typ == "SpeechmaticsTranscriber" || a.SpeechmaticsTranscriber != nil {
		return visitor.VisitSpeechmaticsTranscriber(a.SpeechmaticsTranscriber)
	}
	if a.typ == "TalkscriberTranscriber" || a.TalkscriberTranscriber != nil {
		return visitor.VisitTalkscriberTranscriber(a.TalkscriberTranscriber)
	}
	if a.typ == "OpenAiTranscriber" || a.OpenAiTranscriber != nil {
		return visitor.VisitOpenAiTranscriber(a.OpenAiTranscriber)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// These are the options for the assistant's voice.
type AssistantVoice struct {
	AzureVoice      *AzureVoice
	CartesiaVoice   *CartesiaVoice
	CustomVoice     *CustomVoice
	DeepgramVoice   *DeepgramVoice
	ElevenLabsVoice *ElevenLabsVoice
	HumeVoice       *HumeVoice
	LmntVoice       *LmntVoice
	NeuphonicVoice  *NeuphonicVoice
	OpenAiVoice     *OpenAiVoice
	PlayHtVoice     *PlayHtVoice
	RimeAiVoice     *RimeAiVoice
	SmallestAiVoice *SmallestAiVoice
	TavusVoice      *TavusVoice
	VapiVoice       *VapiVoice
	SesameVoice     *SesameVoice

	typ string
}

func (a *AssistantVoice) GetAzureVoice() *AzureVoice {
	if a == nil {
		return nil
	}
	return a.AzureVoice
}

func (a *AssistantVoice) GetCartesiaVoice() *CartesiaVoice {
	if a == nil {
		return nil
	}
	return a.CartesiaVoice
}

func (a *AssistantVoice) GetCustomVoice() *CustomVoice {
	if a == nil {
		return nil
	}
	return a.CustomVoice
}

func (a *AssistantVoice) GetDeepgramVoice() *DeepgramVoice {
	if a == nil {
		return nil
	}
	return a.DeepgramVoice
}

func (a *AssistantVoice) GetElevenLabsVoice() *ElevenLabsVoice {
	if a == nil {
		return nil
	}
	return a.ElevenLabsVoice
}

func (a *AssistantVoice) GetHumeVoice() *HumeVoice {
	if a == nil {
		return nil
	}
	return a.HumeVoice
}

func (a *AssistantVoice) GetLmntVoice() *LmntVoice {
	if a == nil {
		return nil
	}
	return a.LmntVoice
}

func (a *AssistantVoice) GetNeuphonicVoice() *NeuphonicVoice {
	if a == nil {
		return nil
	}
	return a.NeuphonicVoice
}

func (a *AssistantVoice) GetOpenAiVoice() *OpenAiVoice {
	if a == nil {
		return nil
	}
	return a.OpenAiVoice
}

func (a *AssistantVoice) GetPlayHtVoice() *PlayHtVoice {
	if a == nil {
		return nil
	}
	return a.PlayHtVoice
}

func (a *AssistantVoice) GetRimeAiVoice() *RimeAiVoice {
	if a == nil {
		return nil
	}
	return a.RimeAiVoice
}

func (a *AssistantVoice) GetSmallestAiVoice() *SmallestAiVoice {
	if a == nil {
		return nil
	}
	return a.SmallestAiVoice
}

func (a *AssistantVoice) GetTavusVoice() *TavusVoice {
	if a == nil {
		return nil
	}
	return a.TavusVoice
}

func (a *AssistantVoice) GetVapiVoice() *VapiVoice {
	if a == nil {
		return nil
	}
	return a.VapiVoice
}

func (a *AssistantVoice) GetSesameVoice() *SesameVoice {
	if a == nil {
		return nil
	}
	return a.SesameVoice
}

func (a *AssistantVoice) UnmarshalJSON(data []byte) error {
	valueAzureVoice := new(AzureVoice)
	if err := json.Unmarshal(data, &valueAzureVoice); err == nil {
		a.typ = "AzureVoice"
		a.AzureVoice = valueAzureVoice
		return nil
	}
	valueCartesiaVoice := new(CartesiaVoice)
	if err := json.Unmarshal(data, &valueCartesiaVoice); err == nil {
		a.typ = "CartesiaVoice"
		a.CartesiaVoice = valueCartesiaVoice
		return nil
	}
	valueCustomVoice := new(CustomVoice)
	if err := json.Unmarshal(data, &valueCustomVoice); err == nil {
		a.typ = "CustomVoice"
		a.CustomVoice = valueCustomVoice
		return nil
	}
	valueDeepgramVoice := new(DeepgramVoice)
	if err := json.Unmarshal(data, &valueDeepgramVoice); err == nil {
		a.typ = "DeepgramVoice"
		a.DeepgramVoice = valueDeepgramVoice
		return nil
	}
	valueElevenLabsVoice := new(ElevenLabsVoice)
	if err := json.Unmarshal(data, &valueElevenLabsVoice); err == nil {
		a.typ = "ElevenLabsVoice"
		a.ElevenLabsVoice = valueElevenLabsVoice
		return nil
	}
	valueHumeVoice := new(HumeVoice)
	if err := json.Unmarshal(data, &valueHumeVoice); err == nil {
		a.typ = "HumeVoice"
		a.HumeVoice = valueHumeVoice
		return nil
	}
	valueLmntVoice := new(LmntVoice)
	if err := json.Unmarshal(data, &valueLmntVoice); err == nil {
		a.typ = "LmntVoice"
		a.LmntVoice = valueLmntVoice
		return nil
	}
	valueNeuphonicVoice := new(NeuphonicVoice)
	if err := json.Unmarshal(data, &valueNeuphonicVoice); err == nil {
		a.typ = "NeuphonicVoice"
		a.NeuphonicVoice = valueNeuphonicVoice
		return nil
	}
	valueOpenAiVoice := new(OpenAiVoice)
	if err := json.Unmarshal(data, &valueOpenAiVoice); err == nil {
		a.typ = "OpenAiVoice"
		a.OpenAiVoice = valueOpenAiVoice
		return nil
	}
	valuePlayHtVoice := new(PlayHtVoice)
	if err := json.Unmarshal(data, &valuePlayHtVoice); err == nil {
		a.typ = "PlayHtVoice"
		a.PlayHtVoice = valuePlayHtVoice
		return nil
	}
	valueRimeAiVoice := new(RimeAiVoice)
	if err := json.Unmarshal(data, &valueRimeAiVoice); err == nil {
		a.typ = "RimeAiVoice"
		a.RimeAiVoice = valueRimeAiVoice
		return nil
	}
	valueSmallestAiVoice := new(SmallestAiVoice)
	if err := json.Unmarshal(data, &valueSmallestAiVoice); err == nil {
		a.typ = "SmallestAiVoice"
		a.SmallestAiVoice = valueSmallestAiVoice
		return nil
	}
	valueTavusVoice := new(TavusVoice)
	if err := json.Unmarshal(data, &valueTavusVoice); err == nil {
		a.typ = "TavusVoice"
		a.TavusVoice = valueTavusVoice
		return nil
	}
	valueVapiVoice := new(VapiVoice)
	if err := json.Unmarshal(data, &valueVapiVoice); err == nil {
		a.typ = "VapiVoice"
		a.VapiVoice = valueVapiVoice
		return nil
	}
	valueSesameVoice := new(SesameVoice)
	if err := json.Unmarshal(data, &valueSesameVoice); err == nil {
		a.typ = "SesameVoice"
		a.SesameVoice = valueSesameVoice
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AssistantVoice) MarshalJSON() ([]byte, error) {
	if a.typ == "AzureVoice" || a.AzureVoice != nil {
		return json.Marshal(a.AzureVoice)
	}
	if a.typ == "CartesiaVoice" || a.CartesiaVoice != nil {
		return json.Marshal(a.CartesiaVoice)
	}
	if a.typ == "CustomVoice" || a.CustomVoice != nil {
		return json.Marshal(a.CustomVoice)
	}
	if a.typ == "DeepgramVoice" || a.DeepgramVoice != nil {
		return json.Marshal(a.DeepgramVoice)
	}
	if a.typ == "ElevenLabsVoice" || a.ElevenLabsVoice != nil {
		return json.Marshal(a.ElevenLabsVoice)
	}
	if a.typ == "HumeVoice" || a.HumeVoice != nil {
		return json.Marshal(a.HumeVoice)
	}
	if a.typ == "LmntVoice" || a.LmntVoice != nil {
		return json.Marshal(a.LmntVoice)
	}
	if a.typ == "NeuphonicVoice" || a.NeuphonicVoice != nil {
		return json.Marshal(a.NeuphonicVoice)
	}
	if a.typ == "OpenAiVoice" || a.OpenAiVoice != nil {
		return json.Marshal(a.OpenAiVoice)
	}
	if a.typ == "PlayHtVoice" || a.PlayHtVoice != nil {
		return json.Marshal(a.PlayHtVoice)
	}
	if a.typ == "RimeAiVoice" || a.RimeAiVoice != nil {
		return json.Marshal(a.RimeAiVoice)
	}
	if a.typ == "SmallestAiVoice" || a.SmallestAiVoice != nil {
		return json.Marshal(a.SmallestAiVoice)
	}
	if a.typ == "TavusVoice" || a.TavusVoice != nil {
		return json.Marshal(a.TavusVoice)
	}
	if a.typ == "VapiVoice" || a.VapiVoice != nil {
		return json.Marshal(a.VapiVoice)
	}
	if a.typ == "SesameVoice" || a.SesameVoice != nil {
		return json.Marshal(a.SesameVoice)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AssistantVoiceVisitor interface {
	VisitAzureVoice(*AzureVoice) error
	VisitCartesiaVoice(*CartesiaVoice) error
	VisitCustomVoice(*CustomVoice) error
	VisitDeepgramVoice(*DeepgramVoice) error
	VisitElevenLabsVoice(*ElevenLabsVoice) error
	VisitHumeVoice(*HumeVoice) error
	VisitLmntVoice(*LmntVoice) error
	VisitNeuphonicVoice(*NeuphonicVoice) error
	VisitOpenAiVoice(*OpenAiVoice) error
	VisitPlayHtVoice(*PlayHtVoice) error
	VisitRimeAiVoice(*RimeAiVoice) error
	VisitSmallestAiVoice(*SmallestAiVoice) error
	VisitTavusVoice(*TavusVoice) error
	VisitVapiVoice(*VapiVoice) error
	VisitSesameVoice(*SesameVoice) error
}

func (a *AssistantVoice) Accept(visitor AssistantVoiceVisitor) error {
	if a.typ == "AzureVoice" || a.AzureVoice != nil {
		return visitor.VisitAzureVoice(a.AzureVoice)
	}
	if a.typ == "CartesiaVoice" || a.CartesiaVoice != nil {
		return visitor.VisitCartesiaVoice(a.CartesiaVoice)
	}
	if a.typ == "CustomVoice" || a.CustomVoice != nil {
		return visitor.VisitCustomVoice(a.CustomVoice)
	}
	if a.typ == "DeepgramVoice" || a.DeepgramVoice != nil {
		return visitor.VisitDeepgramVoice(a.DeepgramVoice)
	}
	if a.typ == "ElevenLabsVoice" || a.ElevenLabsVoice != nil {
		return visitor.VisitElevenLabsVoice(a.ElevenLabsVoice)
	}
	if a.typ == "HumeVoice" || a.HumeVoice != nil {
		return visitor.VisitHumeVoice(a.HumeVoice)
	}
	if a.typ == "LmntVoice" || a.LmntVoice != nil {
		return visitor.VisitLmntVoice(a.LmntVoice)
	}
	if a.typ == "NeuphonicVoice" || a.NeuphonicVoice != nil {
		return visitor.VisitNeuphonicVoice(a.NeuphonicVoice)
	}
	if a.typ == "OpenAiVoice" || a.OpenAiVoice != nil {
		return visitor.VisitOpenAiVoice(a.OpenAiVoice)
	}
	if a.typ == "PlayHtVoice" || a.PlayHtVoice != nil {
		return visitor.VisitPlayHtVoice(a.PlayHtVoice)
	}
	if a.typ == "RimeAiVoice" || a.RimeAiVoice != nil {
		return visitor.VisitRimeAiVoice(a.RimeAiVoice)
	}
	if a.typ == "SmallestAiVoice" || a.SmallestAiVoice != nil {
		return visitor.VisitSmallestAiVoice(a.SmallestAiVoice)
	}
	if a.typ == "TavusVoice" || a.TavusVoice != nil {
		return visitor.VisitTavusVoice(a.TavusVoice)
	}
	if a.typ == "VapiVoice" || a.VapiVoice != nil {
		return visitor.VisitVapiVoice(a.VapiVoice)
	}
	if a.typ == "SesameVoice" || a.SesameVoice != nil {
		return visitor.VisitSesameVoice(a.SesameVoice)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// These are the settings to configure or disable voicemail detection. Alternatively, voicemail detection can be configured using the model.tools=[VoicemailTool].
// This uses Twilio's built-in detection while the VoicemailTool relies on the model to detect if a voicemail was reached.
// You can use neither of them, one of them, or both of them. By default, Twilio built-in detection is enabled while VoicemailTool is not.
type AssistantVoicemailDetection struct {
	GoogleVoicemailDetectionPlan *GoogleVoicemailDetectionPlan
	OpenAiVoicemailDetectionPlan *OpenAiVoicemailDetectionPlan
	TwilioVoicemailDetectionPlan *TwilioVoicemailDetectionPlan
	VapiVoicemailDetectionPlan   *VapiVoicemailDetectionPlan

	typ string
}

func (a *AssistantVoicemailDetection) GetGoogleVoicemailDetectionPlan() *GoogleVoicemailDetectionPlan {
	if a == nil {
		return nil
	}
	return a.GoogleVoicemailDetectionPlan
}

func (a *AssistantVoicemailDetection) GetOpenAiVoicemailDetectionPlan() *OpenAiVoicemailDetectionPlan {
	if a == nil {
		return nil
	}
	return a.OpenAiVoicemailDetectionPlan
}

func (a *AssistantVoicemailDetection) GetTwilioVoicemailDetectionPlan() *TwilioVoicemailDetectionPlan {
	if a == nil {
		return nil
	}
	return a.TwilioVoicemailDetectionPlan
}

func (a *AssistantVoicemailDetection) GetVapiVoicemailDetectionPlan() *VapiVoicemailDetectionPlan {
	if a == nil {
		return nil
	}
	return a.VapiVoicemailDetectionPlan
}

func (a *AssistantVoicemailDetection) UnmarshalJSON(data []byte) error {
	valueGoogleVoicemailDetectionPlan := new(GoogleVoicemailDetectionPlan)
	if err := json.Unmarshal(data, &valueGoogleVoicemailDetectionPlan); err == nil {
		a.typ = "GoogleVoicemailDetectionPlan"
		a.GoogleVoicemailDetectionPlan = valueGoogleVoicemailDetectionPlan
		return nil
	}
	valueOpenAiVoicemailDetectionPlan := new(OpenAiVoicemailDetectionPlan)
	if err := json.Unmarshal(data, &valueOpenAiVoicemailDetectionPlan); err == nil {
		a.typ = "OpenAiVoicemailDetectionPlan"
		a.OpenAiVoicemailDetectionPlan = valueOpenAiVoicemailDetectionPlan
		return nil
	}
	valueTwilioVoicemailDetectionPlan := new(TwilioVoicemailDetectionPlan)
	if err := json.Unmarshal(data, &valueTwilioVoicemailDetectionPlan); err == nil {
		a.typ = "TwilioVoicemailDetectionPlan"
		a.TwilioVoicemailDetectionPlan = valueTwilioVoicemailDetectionPlan
		return nil
	}
	valueVapiVoicemailDetectionPlan := new(VapiVoicemailDetectionPlan)
	if err := json.Unmarshal(data, &valueVapiVoicemailDetectionPlan); err == nil {
		a.typ = "VapiVoicemailDetectionPlan"
		a.VapiVoicemailDetectionPlan = valueVapiVoicemailDetectionPlan
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AssistantVoicemailDetection) MarshalJSON() ([]byte, error) {
	if a.typ == "GoogleVoicemailDetectionPlan" || a.GoogleVoicemailDetectionPlan != nil {
		return json.Marshal(a.GoogleVoicemailDetectionPlan)
	}
	if a.typ == "OpenAiVoicemailDetectionPlan" || a.OpenAiVoicemailDetectionPlan != nil {
		return json.Marshal(a.OpenAiVoicemailDetectionPlan)
	}
	if a.typ == "TwilioVoicemailDetectionPlan" || a.TwilioVoicemailDetectionPlan != nil {
		return json.Marshal(a.TwilioVoicemailDetectionPlan)
	}
	if a.typ == "VapiVoicemailDetectionPlan" || a.VapiVoicemailDetectionPlan != nil {
		return json.Marshal(a.VapiVoicemailDetectionPlan)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AssistantVoicemailDetectionVisitor interface {
	VisitGoogleVoicemailDetectionPlan(*GoogleVoicemailDetectionPlan) error
	VisitOpenAiVoicemailDetectionPlan(*OpenAiVoicemailDetectionPlan) error
	VisitTwilioVoicemailDetectionPlan(*TwilioVoicemailDetectionPlan) error
	VisitVapiVoicemailDetectionPlan(*VapiVoicemailDetectionPlan) error
}

func (a *AssistantVoicemailDetection) Accept(visitor AssistantVoicemailDetectionVisitor) error {
	if a.typ == "GoogleVoicemailDetectionPlan" || a.GoogleVoicemailDetectionPlan != nil {
		return visitor.VisitGoogleVoicemailDetectionPlan(a.GoogleVoicemailDetectionPlan)
	}
	if a.typ == "OpenAiVoicemailDetectionPlan" || a.OpenAiVoicemailDetectionPlan != nil {
		return visitor.VisitOpenAiVoicemailDetectionPlan(a.OpenAiVoicemailDetectionPlan)
	}
	if a.typ == "TwilioVoicemailDetectionPlan" || a.TwilioVoicemailDetectionPlan != nil {
		return visitor.VisitTwilioVoicemailDetectionPlan(a.TwilioVoicemailDetectionPlan)
	}
	if a.typ == "VapiVoicemailDetectionPlan" || a.VapiVoicemailDetectionPlan != nil {
		return visitor.VisitVapiVoicemailDetectionPlan(a.VapiVoicemailDetectionPlan)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.
// You can also provide a custom sound by providing a URL to an audio file.
type UpdateAssistantDtoBackgroundSound struct {
	UpdateAssistantDtoBackgroundSoundZero UpdateAssistantDtoBackgroundSoundZero
	String                                string

	typ string
}

func (u *UpdateAssistantDtoBackgroundSound) GetUpdateAssistantDtoBackgroundSoundZero() UpdateAssistantDtoBackgroundSoundZero {
	if u == nil {
		return ""
	}
	return u.UpdateAssistantDtoBackgroundSoundZero
}

func (u *UpdateAssistantDtoBackgroundSound) GetString() string {
	if u == nil {
		return ""
	}
	return u.String
}

func (u *UpdateAssistantDtoBackgroundSound) UnmarshalJSON(data []byte) error {
	var valueUpdateAssistantDtoBackgroundSoundZero UpdateAssistantDtoBackgroundSoundZero
	if err := json.Unmarshal(data, &valueUpdateAssistantDtoBackgroundSoundZero); err == nil {
		u.typ = "UpdateAssistantDtoBackgroundSoundZero"
		u.UpdateAssistantDtoBackgroundSoundZero = valueUpdateAssistantDtoBackgroundSoundZero
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		u.typ = "String"
		u.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpdateAssistantDtoBackgroundSound) MarshalJSON() ([]byte, error) {
	if u.typ == "UpdateAssistantDtoBackgroundSoundZero" || u.UpdateAssistantDtoBackgroundSoundZero != "" {
		return json.Marshal(u.UpdateAssistantDtoBackgroundSoundZero)
	}
	if u.typ == "String" || u.String != "" {
		return json.Marshal(u.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateAssistantDtoBackgroundSoundVisitor interface {
	VisitUpdateAssistantDtoBackgroundSoundZero(UpdateAssistantDtoBackgroundSoundZero) error
	VisitString(string) error
}

func (u *UpdateAssistantDtoBackgroundSound) Accept(visitor UpdateAssistantDtoBackgroundSoundVisitor) error {
	if u.typ == "UpdateAssistantDtoBackgroundSoundZero" || u.UpdateAssistantDtoBackgroundSoundZero != "" {
		return visitor.VisitUpdateAssistantDtoBackgroundSoundZero(u.UpdateAssistantDtoBackgroundSoundZero)
	}
	if u.typ == "String" || u.String != "" {
		return visitor.VisitString(u.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateAssistantDtoBackgroundSoundZero string

const (
	UpdateAssistantDtoBackgroundSoundZeroOff    UpdateAssistantDtoBackgroundSoundZero = "off"
	UpdateAssistantDtoBackgroundSoundZeroOffice UpdateAssistantDtoBackgroundSoundZero = "office"
)

func NewUpdateAssistantDtoBackgroundSoundZeroFromString(s string) (UpdateAssistantDtoBackgroundSoundZero, error) {
	switch s {
	case "off":
		return UpdateAssistantDtoBackgroundSoundZeroOff, nil
	case "office":
		return UpdateAssistantDtoBackgroundSoundZeroOffice, nil
	}
	var t UpdateAssistantDtoBackgroundSoundZero
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateAssistantDtoBackgroundSoundZero) Ptr() *UpdateAssistantDtoBackgroundSoundZero {
	return &u
}

type UpdateAssistantDtoClientMessagesItem string

const (
	UpdateAssistantDtoClientMessagesItemConversationUpdate  UpdateAssistantDtoClientMessagesItem = "conversation-update"
	UpdateAssistantDtoClientMessagesItemFunctionCall        UpdateAssistantDtoClientMessagesItem = "function-call"
	UpdateAssistantDtoClientMessagesItemFunctionCallResult  UpdateAssistantDtoClientMessagesItem = "function-call-result"
	UpdateAssistantDtoClientMessagesItemHang                UpdateAssistantDtoClientMessagesItem = "hang"
	UpdateAssistantDtoClientMessagesItemLanguageChanged     UpdateAssistantDtoClientMessagesItem = "language-changed"
	UpdateAssistantDtoClientMessagesItemMetadata            UpdateAssistantDtoClientMessagesItem = "metadata"
	UpdateAssistantDtoClientMessagesItemModelOutput         UpdateAssistantDtoClientMessagesItem = "model-output"
	UpdateAssistantDtoClientMessagesItemSpeechUpdate        UpdateAssistantDtoClientMessagesItem = "speech-update"
	UpdateAssistantDtoClientMessagesItemStatusUpdate        UpdateAssistantDtoClientMessagesItem = "status-update"
	UpdateAssistantDtoClientMessagesItemTranscript          UpdateAssistantDtoClientMessagesItem = "transcript"
	UpdateAssistantDtoClientMessagesItemToolCalls           UpdateAssistantDtoClientMessagesItem = "tool-calls"
	UpdateAssistantDtoClientMessagesItemToolCallsResult     UpdateAssistantDtoClientMessagesItem = "tool-calls-result"
	UpdateAssistantDtoClientMessagesItemToolCompleted       UpdateAssistantDtoClientMessagesItem = "tool.completed"
	UpdateAssistantDtoClientMessagesItemTransferUpdate      UpdateAssistantDtoClientMessagesItem = "transfer-update"
	UpdateAssistantDtoClientMessagesItemUserInterrupted     UpdateAssistantDtoClientMessagesItem = "user-interrupted"
	UpdateAssistantDtoClientMessagesItemVoiceInput          UpdateAssistantDtoClientMessagesItem = "voice-input"
	UpdateAssistantDtoClientMessagesItemWorkflowNodeStarted UpdateAssistantDtoClientMessagesItem = "workflow.node.started"
)

func NewUpdateAssistantDtoClientMessagesItemFromString(s string) (UpdateAssistantDtoClientMessagesItem, error) {
	switch s {
	case "conversation-update":
		return UpdateAssistantDtoClientMessagesItemConversationUpdate, nil
	case "function-call":
		return UpdateAssistantDtoClientMessagesItemFunctionCall, nil
	case "function-call-result":
		return UpdateAssistantDtoClientMessagesItemFunctionCallResult, nil
	case "hang":
		return UpdateAssistantDtoClientMessagesItemHang, nil
	case "language-changed":
		return UpdateAssistantDtoClientMessagesItemLanguageChanged, nil
	case "metadata":
		return UpdateAssistantDtoClientMessagesItemMetadata, nil
	case "model-output":
		return UpdateAssistantDtoClientMessagesItemModelOutput, nil
	case "speech-update":
		return UpdateAssistantDtoClientMessagesItemSpeechUpdate, nil
	case "status-update":
		return UpdateAssistantDtoClientMessagesItemStatusUpdate, nil
	case "transcript":
		return UpdateAssistantDtoClientMessagesItemTranscript, nil
	case "tool-calls":
		return UpdateAssistantDtoClientMessagesItemToolCalls, nil
	case "tool-calls-result":
		return UpdateAssistantDtoClientMessagesItemToolCallsResult, nil
	case "tool.completed":
		return UpdateAssistantDtoClientMessagesItemToolCompleted, nil
	case "transfer-update":
		return UpdateAssistantDtoClientMessagesItemTransferUpdate, nil
	case "user-interrupted":
		return UpdateAssistantDtoClientMessagesItemUserInterrupted, nil
	case "voice-input":
		return UpdateAssistantDtoClientMessagesItemVoiceInput, nil
	case "workflow.node.started":
		return UpdateAssistantDtoClientMessagesItemWorkflowNodeStarted, nil
	}
	var t UpdateAssistantDtoClientMessagesItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateAssistantDtoClientMessagesItem) Ptr() *UpdateAssistantDtoClientMessagesItem {
	return &u
}

type UpdateAssistantDtoCredentialsItem struct {
	CreateElevenLabsCredentialDto                        *CreateElevenLabsCredentialDto
	CreateAnthropicCredentialDto                         *CreateAnthropicCredentialDto
	CreateAnyscaleCredentialDto                          *CreateAnyscaleCredentialDto
	CreateAssemblyAiCredentialDto                        *CreateAssemblyAiCredentialDto
	CreateAzureOpenAiCredentialDto                       *CreateAzureOpenAiCredentialDto
	CreateAzureCredentialDto                             *CreateAzureCredentialDto
	CreateByoSipTrunkCredentialDto                       *CreateByoSipTrunkCredentialDto
	CreateCartesiaCredentialDto                          *CreateCartesiaCredentialDto
	CreateCerebrasCredentialDto                          *CreateCerebrasCredentialDto
	CreateCloudflareCredentialDto                        *CreateCloudflareCredentialDto
	CreateCustomLlmCredentialDto                         *CreateCustomLlmCredentialDto
	CreateDeepgramCredentialDto                          *CreateDeepgramCredentialDto
	CreateDeepInfraCredentialDto                         *CreateDeepInfraCredentialDto
	CreateDeepSeekCredentialDto                          *CreateDeepSeekCredentialDto
	CreateGcpCredentialDto                               *CreateGcpCredentialDto
	CreateGladiaCredentialDto                            *CreateGladiaCredentialDto
	CreateGoHighLevelCredentialDto                       *CreateGoHighLevelCredentialDto
	CreateGoogleCredentialDto                            *CreateGoogleCredentialDto
	CreateGroqCredentialDto                              *CreateGroqCredentialDto
	CreateInflectionAiCredentialDto                      *CreateInflectionAiCredentialDto
	CreateLangfuseCredentialDto                          *CreateLangfuseCredentialDto
	CreateLmntCredentialDto                              *CreateLmntCredentialDto
	CreateMakeCredentialDto                              *CreateMakeCredentialDto
	CreateOpenAiCredentialDto                            *CreateOpenAiCredentialDto
	CreateOpenRouterCredentialDto                        *CreateOpenRouterCredentialDto
	CreatePerplexityAiCredentialDto                      *CreatePerplexityAiCredentialDto
	CreatePlayHtCredentialDto                            *CreatePlayHtCredentialDto
	CreateRimeAiCredentialDto                            *CreateRimeAiCredentialDto
	CreateRunpodCredentialDto                            *CreateRunpodCredentialDto
	CreateS3CredentialDto                                *CreateS3CredentialDto
	CreateSupabaseCredentialDto                          *CreateSupabaseCredentialDto
	CreateSmallestAiCredentialDto                        *CreateSmallestAiCredentialDto
	CreateTavusCredentialDto                             *CreateTavusCredentialDto
	CreateTogetherAiCredentialDto                        *CreateTogetherAiCredentialDto
	CreateTwilioCredentialDto                            *CreateTwilioCredentialDto
	CreateVonageCredentialDto                            *CreateVonageCredentialDto
	CreateWebhookCredentialDto                           *CreateWebhookCredentialDto
	CreateXAiCredentialDto                               *CreateXAiCredentialDto
	CreateNeuphonicCredentialDto                         *CreateNeuphonicCredentialDto
	CreateHumeCredentialDto                              *CreateHumeCredentialDto
	CreateMistralCredentialDto                           *CreateMistralCredentialDto
	CreateSpeechmaticsCredentialDto                      *CreateSpeechmaticsCredentialDto
	CreateTrieveCredentialDto                            *CreateTrieveCredentialDto
	CreateGoogleCalendarOAuth2ClientCredentialDto        *CreateGoogleCalendarOAuth2ClientCredentialDto
	CreateGoogleCalendarOAuth2AuthorizationCredentialDto *CreateGoogleCalendarOAuth2AuthorizationCredentialDto
	CreateGoogleSheetsOAuth2AuthorizationCredentialDto   *CreateGoogleSheetsOAuth2AuthorizationCredentialDto
	CreateSlackOAuth2AuthorizationCredentialDto          *CreateSlackOAuth2AuthorizationCredentialDto
	CreateGoHighLevelMcpCredentialDto                    *CreateGoHighLevelMcpCredentialDto

	typ string
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateElevenLabsCredentialDto() *CreateElevenLabsCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateElevenLabsCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateAnthropicCredentialDto() *CreateAnthropicCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateAnthropicCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateAnyscaleCredentialDto() *CreateAnyscaleCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateAnyscaleCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateAssemblyAiCredentialDto() *CreateAssemblyAiCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateAssemblyAiCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateAzureOpenAiCredentialDto() *CreateAzureOpenAiCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateAzureOpenAiCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateAzureCredentialDto() *CreateAzureCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateAzureCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateByoSipTrunkCredentialDto() *CreateByoSipTrunkCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateByoSipTrunkCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateCartesiaCredentialDto() *CreateCartesiaCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateCartesiaCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateCerebrasCredentialDto() *CreateCerebrasCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateCerebrasCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateCloudflareCredentialDto() *CreateCloudflareCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateCloudflareCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateCustomLlmCredentialDto() *CreateCustomLlmCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateCustomLlmCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateDeepgramCredentialDto() *CreateDeepgramCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateDeepgramCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateDeepInfraCredentialDto() *CreateDeepInfraCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateDeepInfraCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateDeepSeekCredentialDto() *CreateDeepSeekCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateDeepSeekCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateGcpCredentialDto() *CreateGcpCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateGcpCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateGladiaCredentialDto() *CreateGladiaCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateGladiaCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateGoHighLevelCredentialDto() *CreateGoHighLevelCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateGoHighLevelCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateGoogleCredentialDto() *CreateGoogleCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateGoogleCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateGroqCredentialDto() *CreateGroqCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateGroqCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateInflectionAiCredentialDto() *CreateInflectionAiCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateInflectionAiCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateLangfuseCredentialDto() *CreateLangfuseCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateLangfuseCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateLmntCredentialDto() *CreateLmntCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateLmntCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateMakeCredentialDto() *CreateMakeCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateMakeCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateOpenAiCredentialDto() *CreateOpenAiCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateOpenAiCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateOpenRouterCredentialDto() *CreateOpenRouterCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateOpenRouterCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreatePerplexityAiCredentialDto() *CreatePerplexityAiCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreatePerplexityAiCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreatePlayHtCredentialDto() *CreatePlayHtCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreatePlayHtCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateRimeAiCredentialDto() *CreateRimeAiCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateRimeAiCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateRunpodCredentialDto() *CreateRunpodCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateRunpodCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateS3CredentialDto() *CreateS3CredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateS3CredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateSupabaseCredentialDto() *CreateSupabaseCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateSupabaseCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateSmallestAiCredentialDto() *CreateSmallestAiCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateSmallestAiCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateTavusCredentialDto() *CreateTavusCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateTavusCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateTogetherAiCredentialDto() *CreateTogetherAiCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateTogetherAiCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateTwilioCredentialDto() *CreateTwilioCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateTwilioCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateVonageCredentialDto() *CreateVonageCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateVonageCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateWebhookCredentialDto() *CreateWebhookCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateWebhookCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateXAiCredentialDto() *CreateXAiCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateXAiCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateNeuphonicCredentialDto() *CreateNeuphonicCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateNeuphonicCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateHumeCredentialDto() *CreateHumeCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateHumeCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateMistralCredentialDto() *CreateMistralCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateMistralCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateSpeechmaticsCredentialDto() *CreateSpeechmaticsCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateSpeechmaticsCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateTrieveCredentialDto() *CreateTrieveCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateTrieveCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateGoogleCalendarOAuth2ClientCredentialDto() *CreateGoogleCalendarOAuth2ClientCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateGoogleCalendarOAuth2ClientCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateGoogleCalendarOAuth2AuthorizationCredentialDto() *CreateGoogleCalendarOAuth2AuthorizationCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateGoogleCalendarOAuth2AuthorizationCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateGoogleSheetsOAuth2AuthorizationCredentialDto() *CreateGoogleSheetsOAuth2AuthorizationCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateGoogleSheetsOAuth2AuthorizationCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateSlackOAuth2AuthorizationCredentialDto() *CreateSlackOAuth2AuthorizationCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateSlackOAuth2AuthorizationCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) GetCreateGoHighLevelMcpCredentialDto() *CreateGoHighLevelMcpCredentialDto {
	if u == nil {
		return nil
	}
	return u.CreateGoHighLevelMcpCredentialDto
}

func (u *UpdateAssistantDtoCredentialsItem) UnmarshalJSON(data []byte) error {
	valueCreateElevenLabsCredentialDto := new(CreateElevenLabsCredentialDto)
	if err := json.Unmarshal(data, &valueCreateElevenLabsCredentialDto); err == nil {
		u.typ = "CreateElevenLabsCredentialDto"
		u.CreateElevenLabsCredentialDto = valueCreateElevenLabsCredentialDto
		return nil
	}
	valueCreateAnthropicCredentialDto := new(CreateAnthropicCredentialDto)
	if err := json.Unmarshal(data, &valueCreateAnthropicCredentialDto); err == nil {
		u.typ = "CreateAnthropicCredentialDto"
		u.CreateAnthropicCredentialDto = valueCreateAnthropicCredentialDto
		return nil
	}
	valueCreateAnyscaleCredentialDto := new(CreateAnyscaleCredentialDto)
	if err := json.Unmarshal(data, &valueCreateAnyscaleCredentialDto); err == nil {
		u.typ = "CreateAnyscaleCredentialDto"
		u.CreateAnyscaleCredentialDto = valueCreateAnyscaleCredentialDto
		return nil
	}
	valueCreateAssemblyAiCredentialDto := new(CreateAssemblyAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateAssemblyAiCredentialDto); err == nil {
		u.typ = "CreateAssemblyAiCredentialDto"
		u.CreateAssemblyAiCredentialDto = valueCreateAssemblyAiCredentialDto
		return nil
	}
	valueCreateAzureOpenAiCredentialDto := new(CreateAzureOpenAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateAzureOpenAiCredentialDto); err == nil {
		u.typ = "CreateAzureOpenAiCredentialDto"
		u.CreateAzureOpenAiCredentialDto = valueCreateAzureOpenAiCredentialDto
		return nil
	}
	valueCreateAzureCredentialDto := new(CreateAzureCredentialDto)
	if err := json.Unmarshal(data, &valueCreateAzureCredentialDto); err == nil {
		u.typ = "CreateAzureCredentialDto"
		u.CreateAzureCredentialDto = valueCreateAzureCredentialDto
		return nil
	}
	valueCreateByoSipTrunkCredentialDto := new(CreateByoSipTrunkCredentialDto)
	if err := json.Unmarshal(data, &valueCreateByoSipTrunkCredentialDto); err == nil {
		u.typ = "CreateByoSipTrunkCredentialDto"
		u.CreateByoSipTrunkCredentialDto = valueCreateByoSipTrunkCredentialDto
		return nil
	}
	valueCreateCartesiaCredentialDto := new(CreateCartesiaCredentialDto)
	if err := json.Unmarshal(data, &valueCreateCartesiaCredentialDto); err == nil {
		u.typ = "CreateCartesiaCredentialDto"
		u.CreateCartesiaCredentialDto = valueCreateCartesiaCredentialDto
		return nil
	}
	valueCreateCerebrasCredentialDto := new(CreateCerebrasCredentialDto)
	if err := json.Unmarshal(data, &valueCreateCerebrasCredentialDto); err == nil {
		u.typ = "CreateCerebrasCredentialDto"
		u.CreateCerebrasCredentialDto = valueCreateCerebrasCredentialDto
		return nil
	}
	valueCreateCloudflareCredentialDto := new(CreateCloudflareCredentialDto)
	if err := json.Unmarshal(data, &valueCreateCloudflareCredentialDto); err == nil {
		u.typ = "CreateCloudflareCredentialDto"
		u.CreateCloudflareCredentialDto = valueCreateCloudflareCredentialDto
		return nil
	}
	valueCreateCustomLlmCredentialDto := new(CreateCustomLlmCredentialDto)
	if err := json.Unmarshal(data, &valueCreateCustomLlmCredentialDto); err == nil {
		u.typ = "CreateCustomLlmCredentialDto"
		u.CreateCustomLlmCredentialDto = valueCreateCustomLlmCredentialDto
		return nil
	}
	valueCreateDeepgramCredentialDto := new(CreateDeepgramCredentialDto)
	if err := json.Unmarshal(data, &valueCreateDeepgramCredentialDto); err == nil {
		u.typ = "CreateDeepgramCredentialDto"
		u.CreateDeepgramCredentialDto = valueCreateDeepgramCredentialDto
		return nil
	}
	valueCreateDeepInfraCredentialDto := new(CreateDeepInfraCredentialDto)
	if err := json.Unmarshal(data, &valueCreateDeepInfraCredentialDto); err == nil {
		u.typ = "CreateDeepInfraCredentialDto"
		u.CreateDeepInfraCredentialDto = valueCreateDeepInfraCredentialDto
		return nil
	}
	valueCreateDeepSeekCredentialDto := new(CreateDeepSeekCredentialDto)
	if err := json.Unmarshal(data, &valueCreateDeepSeekCredentialDto); err == nil {
		u.typ = "CreateDeepSeekCredentialDto"
		u.CreateDeepSeekCredentialDto = valueCreateDeepSeekCredentialDto
		return nil
	}
	valueCreateGcpCredentialDto := new(CreateGcpCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGcpCredentialDto); err == nil {
		u.typ = "CreateGcpCredentialDto"
		u.CreateGcpCredentialDto = valueCreateGcpCredentialDto
		return nil
	}
	valueCreateGladiaCredentialDto := new(CreateGladiaCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGladiaCredentialDto); err == nil {
		u.typ = "CreateGladiaCredentialDto"
		u.CreateGladiaCredentialDto = valueCreateGladiaCredentialDto
		return nil
	}
	valueCreateGoHighLevelCredentialDto := new(CreateGoHighLevelCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGoHighLevelCredentialDto); err == nil {
		u.typ = "CreateGoHighLevelCredentialDto"
		u.CreateGoHighLevelCredentialDto = valueCreateGoHighLevelCredentialDto
		return nil
	}
	valueCreateGoogleCredentialDto := new(CreateGoogleCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGoogleCredentialDto); err == nil {
		u.typ = "CreateGoogleCredentialDto"
		u.CreateGoogleCredentialDto = valueCreateGoogleCredentialDto
		return nil
	}
	valueCreateGroqCredentialDto := new(CreateGroqCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGroqCredentialDto); err == nil {
		u.typ = "CreateGroqCredentialDto"
		u.CreateGroqCredentialDto = valueCreateGroqCredentialDto
		return nil
	}
	valueCreateInflectionAiCredentialDto := new(CreateInflectionAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateInflectionAiCredentialDto); err == nil {
		u.typ = "CreateInflectionAiCredentialDto"
		u.CreateInflectionAiCredentialDto = valueCreateInflectionAiCredentialDto
		return nil
	}
	valueCreateLangfuseCredentialDto := new(CreateLangfuseCredentialDto)
	if err := json.Unmarshal(data, &valueCreateLangfuseCredentialDto); err == nil {
		u.typ = "CreateLangfuseCredentialDto"
		u.CreateLangfuseCredentialDto = valueCreateLangfuseCredentialDto
		return nil
	}
	valueCreateLmntCredentialDto := new(CreateLmntCredentialDto)
	if err := json.Unmarshal(data, &valueCreateLmntCredentialDto); err == nil {
		u.typ = "CreateLmntCredentialDto"
		u.CreateLmntCredentialDto = valueCreateLmntCredentialDto
		return nil
	}
	valueCreateMakeCredentialDto := new(CreateMakeCredentialDto)
	if err := json.Unmarshal(data, &valueCreateMakeCredentialDto); err == nil {
		u.typ = "CreateMakeCredentialDto"
		u.CreateMakeCredentialDto = valueCreateMakeCredentialDto
		return nil
	}
	valueCreateOpenAiCredentialDto := new(CreateOpenAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateOpenAiCredentialDto); err == nil {
		u.typ = "CreateOpenAiCredentialDto"
		u.CreateOpenAiCredentialDto = valueCreateOpenAiCredentialDto
		return nil
	}
	valueCreateOpenRouterCredentialDto := new(CreateOpenRouterCredentialDto)
	if err := json.Unmarshal(data, &valueCreateOpenRouterCredentialDto); err == nil {
		u.typ = "CreateOpenRouterCredentialDto"
		u.CreateOpenRouterCredentialDto = valueCreateOpenRouterCredentialDto
		return nil
	}
	valueCreatePerplexityAiCredentialDto := new(CreatePerplexityAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreatePerplexityAiCredentialDto); err == nil {
		u.typ = "CreatePerplexityAiCredentialDto"
		u.CreatePerplexityAiCredentialDto = valueCreatePerplexityAiCredentialDto
		return nil
	}
	valueCreatePlayHtCredentialDto := new(CreatePlayHtCredentialDto)
	if err := json.Unmarshal(data, &valueCreatePlayHtCredentialDto); err == nil {
		u.typ = "CreatePlayHtCredentialDto"
		u.CreatePlayHtCredentialDto = valueCreatePlayHtCredentialDto
		return nil
	}
	valueCreateRimeAiCredentialDto := new(CreateRimeAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateRimeAiCredentialDto); err == nil {
		u.typ = "CreateRimeAiCredentialDto"
		u.CreateRimeAiCredentialDto = valueCreateRimeAiCredentialDto
		return nil
	}
	valueCreateRunpodCredentialDto := new(CreateRunpodCredentialDto)
	if err := json.Unmarshal(data, &valueCreateRunpodCredentialDto); err == nil {
		u.typ = "CreateRunpodCredentialDto"
		u.CreateRunpodCredentialDto = valueCreateRunpodCredentialDto
		return nil
	}
	valueCreateS3CredentialDto := new(CreateS3CredentialDto)
	if err := json.Unmarshal(data, &valueCreateS3CredentialDto); err == nil {
		u.typ = "CreateS3CredentialDto"
		u.CreateS3CredentialDto = valueCreateS3CredentialDto
		return nil
	}
	valueCreateSupabaseCredentialDto := new(CreateSupabaseCredentialDto)
	if err := json.Unmarshal(data, &valueCreateSupabaseCredentialDto); err == nil {
		u.typ = "CreateSupabaseCredentialDto"
		u.CreateSupabaseCredentialDto = valueCreateSupabaseCredentialDto
		return nil
	}
	valueCreateSmallestAiCredentialDto := new(CreateSmallestAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateSmallestAiCredentialDto); err == nil {
		u.typ = "CreateSmallestAiCredentialDto"
		u.CreateSmallestAiCredentialDto = valueCreateSmallestAiCredentialDto
		return nil
	}
	valueCreateTavusCredentialDto := new(CreateTavusCredentialDto)
	if err := json.Unmarshal(data, &valueCreateTavusCredentialDto); err == nil {
		u.typ = "CreateTavusCredentialDto"
		u.CreateTavusCredentialDto = valueCreateTavusCredentialDto
		return nil
	}
	valueCreateTogetherAiCredentialDto := new(CreateTogetherAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateTogetherAiCredentialDto); err == nil {
		u.typ = "CreateTogetherAiCredentialDto"
		u.CreateTogetherAiCredentialDto = valueCreateTogetherAiCredentialDto
		return nil
	}
	valueCreateTwilioCredentialDto := new(CreateTwilioCredentialDto)
	if err := json.Unmarshal(data, &valueCreateTwilioCredentialDto); err == nil {
		u.typ = "CreateTwilioCredentialDto"
		u.CreateTwilioCredentialDto = valueCreateTwilioCredentialDto
		return nil
	}
	valueCreateVonageCredentialDto := new(CreateVonageCredentialDto)
	if err := json.Unmarshal(data, &valueCreateVonageCredentialDto); err == nil {
		u.typ = "CreateVonageCredentialDto"
		u.CreateVonageCredentialDto = valueCreateVonageCredentialDto
		return nil
	}
	valueCreateWebhookCredentialDto := new(CreateWebhookCredentialDto)
	if err := json.Unmarshal(data, &valueCreateWebhookCredentialDto); err == nil {
		u.typ = "CreateWebhookCredentialDto"
		u.CreateWebhookCredentialDto = valueCreateWebhookCredentialDto
		return nil
	}
	valueCreateXAiCredentialDto := new(CreateXAiCredentialDto)
	if err := json.Unmarshal(data, &valueCreateXAiCredentialDto); err == nil {
		u.typ = "CreateXAiCredentialDto"
		u.CreateXAiCredentialDto = valueCreateXAiCredentialDto
		return nil
	}
	valueCreateNeuphonicCredentialDto := new(CreateNeuphonicCredentialDto)
	if err := json.Unmarshal(data, &valueCreateNeuphonicCredentialDto); err == nil {
		u.typ = "CreateNeuphonicCredentialDto"
		u.CreateNeuphonicCredentialDto = valueCreateNeuphonicCredentialDto
		return nil
	}
	valueCreateHumeCredentialDto := new(CreateHumeCredentialDto)
	if err := json.Unmarshal(data, &valueCreateHumeCredentialDto); err == nil {
		u.typ = "CreateHumeCredentialDto"
		u.CreateHumeCredentialDto = valueCreateHumeCredentialDto
		return nil
	}
	valueCreateMistralCredentialDto := new(CreateMistralCredentialDto)
	if err := json.Unmarshal(data, &valueCreateMistralCredentialDto); err == nil {
		u.typ = "CreateMistralCredentialDto"
		u.CreateMistralCredentialDto = valueCreateMistralCredentialDto
		return nil
	}
	valueCreateSpeechmaticsCredentialDto := new(CreateSpeechmaticsCredentialDto)
	if err := json.Unmarshal(data, &valueCreateSpeechmaticsCredentialDto); err == nil {
		u.typ = "CreateSpeechmaticsCredentialDto"
		u.CreateSpeechmaticsCredentialDto = valueCreateSpeechmaticsCredentialDto
		return nil
	}
	valueCreateTrieveCredentialDto := new(CreateTrieveCredentialDto)
	if err := json.Unmarshal(data, &valueCreateTrieveCredentialDto); err == nil {
		u.typ = "CreateTrieveCredentialDto"
		u.CreateTrieveCredentialDto = valueCreateTrieveCredentialDto
		return nil
	}
	valueCreateGoogleCalendarOAuth2ClientCredentialDto := new(CreateGoogleCalendarOAuth2ClientCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGoogleCalendarOAuth2ClientCredentialDto); err == nil {
		u.typ = "CreateGoogleCalendarOAuth2ClientCredentialDto"
		u.CreateGoogleCalendarOAuth2ClientCredentialDto = valueCreateGoogleCalendarOAuth2ClientCredentialDto
		return nil
	}
	valueCreateGoogleCalendarOAuth2AuthorizationCredentialDto := new(CreateGoogleCalendarOAuth2AuthorizationCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGoogleCalendarOAuth2AuthorizationCredentialDto); err == nil {
		u.typ = "CreateGoogleCalendarOAuth2AuthorizationCredentialDto"
		u.CreateGoogleCalendarOAuth2AuthorizationCredentialDto = valueCreateGoogleCalendarOAuth2AuthorizationCredentialDto
		return nil
	}
	valueCreateGoogleSheetsOAuth2AuthorizationCredentialDto := new(CreateGoogleSheetsOAuth2AuthorizationCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGoogleSheetsOAuth2AuthorizationCredentialDto); err == nil {
		u.typ = "CreateGoogleSheetsOAuth2AuthorizationCredentialDto"
		u.CreateGoogleSheetsOAuth2AuthorizationCredentialDto = valueCreateGoogleSheetsOAuth2AuthorizationCredentialDto
		return nil
	}
	valueCreateSlackOAuth2AuthorizationCredentialDto := new(CreateSlackOAuth2AuthorizationCredentialDto)
	if err := json.Unmarshal(data, &valueCreateSlackOAuth2AuthorizationCredentialDto); err == nil {
		u.typ = "CreateSlackOAuth2AuthorizationCredentialDto"
		u.CreateSlackOAuth2AuthorizationCredentialDto = valueCreateSlackOAuth2AuthorizationCredentialDto
		return nil
	}
	valueCreateGoHighLevelMcpCredentialDto := new(CreateGoHighLevelMcpCredentialDto)
	if err := json.Unmarshal(data, &valueCreateGoHighLevelMcpCredentialDto); err == nil {
		u.typ = "CreateGoHighLevelMcpCredentialDto"
		u.CreateGoHighLevelMcpCredentialDto = valueCreateGoHighLevelMcpCredentialDto
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpdateAssistantDtoCredentialsItem) MarshalJSON() ([]byte, error) {
	if u.typ == "CreateElevenLabsCredentialDto" || u.CreateElevenLabsCredentialDto != nil {
		return json.Marshal(u.CreateElevenLabsCredentialDto)
	}
	if u.typ == "CreateAnthropicCredentialDto" || u.CreateAnthropicCredentialDto != nil {
		return json.Marshal(u.CreateAnthropicCredentialDto)
	}
	if u.typ == "CreateAnyscaleCredentialDto" || u.CreateAnyscaleCredentialDto != nil {
		return json.Marshal(u.CreateAnyscaleCredentialDto)
	}
	if u.typ == "CreateAssemblyAiCredentialDto" || u.CreateAssemblyAiCredentialDto != nil {
		return json.Marshal(u.CreateAssemblyAiCredentialDto)
	}
	if u.typ == "CreateAzureOpenAiCredentialDto" || u.CreateAzureOpenAiCredentialDto != nil {
		return json.Marshal(u.CreateAzureOpenAiCredentialDto)
	}
	if u.typ == "CreateAzureCredentialDto" || u.CreateAzureCredentialDto != nil {
		return json.Marshal(u.CreateAzureCredentialDto)
	}
	if u.typ == "CreateByoSipTrunkCredentialDto" || u.CreateByoSipTrunkCredentialDto != nil {
		return json.Marshal(u.CreateByoSipTrunkCredentialDto)
	}
	if u.typ == "CreateCartesiaCredentialDto" || u.CreateCartesiaCredentialDto != nil {
		return json.Marshal(u.CreateCartesiaCredentialDto)
	}
	if u.typ == "CreateCerebrasCredentialDto" || u.CreateCerebrasCredentialDto != nil {
		return json.Marshal(u.CreateCerebrasCredentialDto)
	}
	if u.typ == "CreateCloudflareCredentialDto" || u.CreateCloudflareCredentialDto != nil {
		return json.Marshal(u.CreateCloudflareCredentialDto)
	}
	if u.typ == "CreateCustomLlmCredentialDto" || u.CreateCustomLlmCredentialDto != nil {
		return json.Marshal(u.CreateCustomLlmCredentialDto)
	}
	if u.typ == "CreateDeepgramCredentialDto" || u.CreateDeepgramCredentialDto != nil {
		return json.Marshal(u.CreateDeepgramCredentialDto)
	}
	if u.typ == "CreateDeepInfraCredentialDto" || u.CreateDeepInfraCredentialDto != nil {
		return json.Marshal(u.CreateDeepInfraCredentialDto)
	}
	if u.typ == "CreateDeepSeekCredentialDto" || u.CreateDeepSeekCredentialDto != nil {
		return json.Marshal(u.CreateDeepSeekCredentialDto)
	}
	if u.typ == "CreateGcpCredentialDto" || u.CreateGcpCredentialDto != nil {
		return json.Marshal(u.CreateGcpCredentialDto)
	}
	if u.typ == "CreateGladiaCredentialDto" || u.CreateGladiaCredentialDto != nil {
		return json.Marshal(u.CreateGladiaCredentialDto)
	}
	if u.typ == "CreateGoHighLevelCredentialDto" || u.CreateGoHighLevelCredentialDto != nil {
		return json.Marshal(u.CreateGoHighLevelCredentialDto)
	}
	if u.typ == "CreateGoogleCredentialDto" || u.CreateGoogleCredentialDto != nil {
		return json.Marshal(u.CreateGoogleCredentialDto)
	}
	if u.typ == "CreateGroqCredentialDto" || u.CreateGroqCredentialDto != nil {
		return json.Marshal(u.CreateGroqCredentialDto)
	}
	if u.typ == "CreateInflectionAiCredentialDto" || u.CreateInflectionAiCredentialDto != nil {
		return json.Marshal(u.CreateInflectionAiCredentialDto)
	}
	if u.typ == "CreateLangfuseCredentialDto" || u.CreateLangfuseCredentialDto != nil {
		return json.Marshal(u.CreateLangfuseCredentialDto)
	}
	if u.typ == "CreateLmntCredentialDto" || u.CreateLmntCredentialDto != nil {
		return json.Marshal(u.CreateLmntCredentialDto)
	}
	if u.typ == "CreateMakeCredentialDto" || u.CreateMakeCredentialDto != nil {
		return json.Marshal(u.CreateMakeCredentialDto)
	}
	if u.typ == "CreateOpenAiCredentialDto" || u.CreateOpenAiCredentialDto != nil {
		return json.Marshal(u.CreateOpenAiCredentialDto)
	}
	if u.typ == "CreateOpenRouterCredentialDto" || u.CreateOpenRouterCredentialDto != nil {
		return json.Marshal(u.CreateOpenRouterCredentialDto)
	}
	if u.typ == "CreatePerplexityAiCredentialDto" || u.CreatePerplexityAiCredentialDto != nil {
		return json.Marshal(u.CreatePerplexityAiCredentialDto)
	}
	if u.typ == "CreatePlayHtCredentialDto" || u.CreatePlayHtCredentialDto != nil {
		return json.Marshal(u.CreatePlayHtCredentialDto)
	}
	if u.typ == "CreateRimeAiCredentialDto" || u.CreateRimeAiCredentialDto != nil {
		return json.Marshal(u.CreateRimeAiCredentialDto)
	}
	if u.typ == "CreateRunpodCredentialDto" || u.CreateRunpodCredentialDto != nil {
		return json.Marshal(u.CreateRunpodCredentialDto)
	}
	if u.typ == "CreateS3CredentialDto" || u.CreateS3CredentialDto != nil {
		return json.Marshal(u.CreateS3CredentialDto)
	}
	if u.typ == "CreateSupabaseCredentialDto" || u.CreateSupabaseCredentialDto != nil {
		return json.Marshal(u.CreateSupabaseCredentialDto)
	}
	if u.typ == "CreateSmallestAiCredentialDto" || u.CreateSmallestAiCredentialDto != nil {
		return json.Marshal(u.CreateSmallestAiCredentialDto)
	}
	if u.typ == "CreateTavusCredentialDto" || u.CreateTavusCredentialDto != nil {
		return json.Marshal(u.CreateTavusCredentialDto)
	}
	if u.typ == "CreateTogetherAiCredentialDto" || u.CreateTogetherAiCredentialDto != nil {
		return json.Marshal(u.CreateTogetherAiCredentialDto)
	}
	if u.typ == "CreateTwilioCredentialDto" || u.CreateTwilioCredentialDto != nil {
		return json.Marshal(u.CreateTwilioCredentialDto)
	}
	if u.typ == "CreateVonageCredentialDto" || u.CreateVonageCredentialDto != nil {
		return json.Marshal(u.CreateVonageCredentialDto)
	}
	if u.typ == "CreateWebhookCredentialDto" || u.CreateWebhookCredentialDto != nil {
		return json.Marshal(u.CreateWebhookCredentialDto)
	}
	if u.typ == "CreateXAiCredentialDto" || u.CreateXAiCredentialDto != nil {
		return json.Marshal(u.CreateXAiCredentialDto)
	}
	if u.typ == "CreateNeuphonicCredentialDto" || u.CreateNeuphonicCredentialDto != nil {
		return json.Marshal(u.CreateNeuphonicCredentialDto)
	}
	if u.typ == "CreateHumeCredentialDto" || u.CreateHumeCredentialDto != nil {
		return json.Marshal(u.CreateHumeCredentialDto)
	}
	if u.typ == "CreateMistralCredentialDto" || u.CreateMistralCredentialDto != nil {
		return json.Marshal(u.CreateMistralCredentialDto)
	}
	if u.typ == "CreateSpeechmaticsCredentialDto" || u.CreateSpeechmaticsCredentialDto != nil {
		return json.Marshal(u.CreateSpeechmaticsCredentialDto)
	}
	if u.typ == "CreateTrieveCredentialDto" || u.CreateTrieveCredentialDto != nil {
		return json.Marshal(u.CreateTrieveCredentialDto)
	}
	if u.typ == "CreateGoogleCalendarOAuth2ClientCredentialDto" || u.CreateGoogleCalendarOAuth2ClientCredentialDto != nil {
		return json.Marshal(u.CreateGoogleCalendarOAuth2ClientCredentialDto)
	}
	if u.typ == "CreateGoogleCalendarOAuth2AuthorizationCredentialDto" || u.CreateGoogleCalendarOAuth2AuthorizationCredentialDto != nil {
		return json.Marshal(u.CreateGoogleCalendarOAuth2AuthorizationCredentialDto)
	}
	if u.typ == "CreateGoogleSheetsOAuth2AuthorizationCredentialDto" || u.CreateGoogleSheetsOAuth2AuthorizationCredentialDto != nil {
		return json.Marshal(u.CreateGoogleSheetsOAuth2AuthorizationCredentialDto)
	}
	if u.typ == "CreateSlackOAuth2AuthorizationCredentialDto" || u.CreateSlackOAuth2AuthorizationCredentialDto != nil {
		return json.Marshal(u.CreateSlackOAuth2AuthorizationCredentialDto)
	}
	if u.typ == "CreateGoHighLevelMcpCredentialDto" || u.CreateGoHighLevelMcpCredentialDto != nil {
		return json.Marshal(u.CreateGoHighLevelMcpCredentialDto)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateAssistantDtoCredentialsItemVisitor interface {
	VisitCreateElevenLabsCredentialDto(*CreateElevenLabsCredentialDto) error
	VisitCreateAnthropicCredentialDto(*CreateAnthropicCredentialDto) error
	VisitCreateAnyscaleCredentialDto(*CreateAnyscaleCredentialDto) error
	VisitCreateAssemblyAiCredentialDto(*CreateAssemblyAiCredentialDto) error
	VisitCreateAzureOpenAiCredentialDto(*CreateAzureOpenAiCredentialDto) error
	VisitCreateAzureCredentialDto(*CreateAzureCredentialDto) error
	VisitCreateByoSipTrunkCredentialDto(*CreateByoSipTrunkCredentialDto) error
	VisitCreateCartesiaCredentialDto(*CreateCartesiaCredentialDto) error
	VisitCreateCerebrasCredentialDto(*CreateCerebrasCredentialDto) error
	VisitCreateCloudflareCredentialDto(*CreateCloudflareCredentialDto) error
	VisitCreateCustomLlmCredentialDto(*CreateCustomLlmCredentialDto) error
	VisitCreateDeepgramCredentialDto(*CreateDeepgramCredentialDto) error
	VisitCreateDeepInfraCredentialDto(*CreateDeepInfraCredentialDto) error
	VisitCreateDeepSeekCredentialDto(*CreateDeepSeekCredentialDto) error
	VisitCreateGcpCredentialDto(*CreateGcpCredentialDto) error
	VisitCreateGladiaCredentialDto(*CreateGladiaCredentialDto) error
	VisitCreateGoHighLevelCredentialDto(*CreateGoHighLevelCredentialDto) error
	VisitCreateGoogleCredentialDto(*CreateGoogleCredentialDto) error
	VisitCreateGroqCredentialDto(*CreateGroqCredentialDto) error
	VisitCreateInflectionAiCredentialDto(*CreateInflectionAiCredentialDto) error
	VisitCreateLangfuseCredentialDto(*CreateLangfuseCredentialDto) error
	VisitCreateLmntCredentialDto(*CreateLmntCredentialDto) error
	VisitCreateMakeCredentialDto(*CreateMakeCredentialDto) error
	VisitCreateOpenAiCredentialDto(*CreateOpenAiCredentialDto) error
	VisitCreateOpenRouterCredentialDto(*CreateOpenRouterCredentialDto) error
	VisitCreatePerplexityAiCredentialDto(*CreatePerplexityAiCredentialDto) error
	VisitCreatePlayHtCredentialDto(*CreatePlayHtCredentialDto) error
	VisitCreateRimeAiCredentialDto(*CreateRimeAiCredentialDto) error
	VisitCreateRunpodCredentialDto(*CreateRunpodCredentialDto) error
	VisitCreateS3CredentialDto(*CreateS3CredentialDto) error
	VisitCreateSupabaseCredentialDto(*CreateSupabaseCredentialDto) error
	VisitCreateSmallestAiCredentialDto(*CreateSmallestAiCredentialDto) error
	VisitCreateTavusCredentialDto(*CreateTavusCredentialDto) error
	VisitCreateTogetherAiCredentialDto(*CreateTogetherAiCredentialDto) error
	VisitCreateTwilioCredentialDto(*CreateTwilioCredentialDto) error
	VisitCreateVonageCredentialDto(*CreateVonageCredentialDto) error
	VisitCreateWebhookCredentialDto(*CreateWebhookCredentialDto) error
	VisitCreateXAiCredentialDto(*CreateXAiCredentialDto) error
	VisitCreateNeuphonicCredentialDto(*CreateNeuphonicCredentialDto) error
	VisitCreateHumeCredentialDto(*CreateHumeCredentialDto) error
	VisitCreateMistralCredentialDto(*CreateMistralCredentialDto) error
	VisitCreateSpeechmaticsCredentialDto(*CreateSpeechmaticsCredentialDto) error
	VisitCreateTrieveCredentialDto(*CreateTrieveCredentialDto) error
	VisitCreateGoogleCalendarOAuth2ClientCredentialDto(*CreateGoogleCalendarOAuth2ClientCredentialDto) error
	VisitCreateGoogleCalendarOAuth2AuthorizationCredentialDto(*CreateGoogleCalendarOAuth2AuthorizationCredentialDto) error
	VisitCreateGoogleSheetsOAuth2AuthorizationCredentialDto(*CreateGoogleSheetsOAuth2AuthorizationCredentialDto) error
	VisitCreateSlackOAuth2AuthorizationCredentialDto(*CreateSlackOAuth2AuthorizationCredentialDto) error
	VisitCreateGoHighLevelMcpCredentialDto(*CreateGoHighLevelMcpCredentialDto) error
}

func (u *UpdateAssistantDtoCredentialsItem) Accept(visitor UpdateAssistantDtoCredentialsItemVisitor) error {
	if u.typ == "CreateElevenLabsCredentialDto" || u.CreateElevenLabsCredentialDto != nil {
		return visitor.VisitCreateElevenLabsCredentialDto(u.CreateElevenLabsCredentialDto)
	}
	if u.typ == "CreateAnthropicCredentialDto" || u.CreateAnthropicCredentialDto != nil {
		return visitor.VisitCreateAnthropicCredentialDto(u.CreateAnthropicCredentialDto)
	}
	if u.typ == "CreateAnyscaleCredentialDto" || u.CreateAnyscaleCredentialDto != nil {
		return visitor.VisitCreateAnyscaleCredentialDto(u.CreateAnyscaleCredentialDto)
	}
	if u.typ == "CreateAssemblyAiCredentialDto" || u.CreateAssemblyAiCredentialDto != nil {
		return visitor.VisitCreateAssemblyAiCredentialDto(u.CreateAssemblyAiCredentialDto)
	}
	if u.typ == "CreateAzureOpenAiCredentialDto" || u.CreateAzureOpenAiCredentialDto != nil {
		return visitor.VisitCreateAzureOpenAiCredentialDto(u.CreateAzureOpenAiCredentialDto)
	}
	if u.typ == "CreateAzureCredentialDto" || u.CreateAzureCredentialDto != nil {
		return visitor.VisitCreateAzureCredentialDto(u.CreateAzureCredentialDto)
	}
	if u.typ == "CreateByoSipTrunkCredentialDto" || u.CreateByoSipTrunkCredentialDto != nil {
		return visitor.VisitCreateByoSipTrunkCredentialDto(u.CreateByoSipTrunkCredentialDto)
	}
	if u.typ == "CreateCartesiaCredentialDto" || u.CreateCartesiaCredentialDto != nil {
		return visitor.VisitCreateCartesiaCredentialDto(u.CreateCartesiaCredentialDto)
	}
	if u.typ == "CreateCerebrasCredentialDto" || u.CreateCerebrasCredentialDto != nil {
		return visitor.VisitCreateCerebrasCredentialDto(u.CreateCerebrasCredentialDto)
	}
	if u.typ == "CreateCloudflareCredentialDto" || u.CreateCloudflareCredentialDto != nil {
		return visitor.VisitCreateCloudflareCredentialDto(u.CreateCloudflareCredentialDto)
	}
	if u.typ == "CreateCustomLlmCredentialDto" || u.CreateCustomLlmCredentialDto != nil {
		return visitor.VisitCreateCustomLlmCredentialDto(u.CreateCustomLlmCredentialDto)
	}
	if u.typ == "CreateDeepgramCredentialDto" || u.CreateDeepgramCredentialDto != nil {
		return visitor.VisitCreateDeepgramCredentialDto(u.CreateDeepgramCredentialDto)
	}
	if u.typ == "CreateDeepInfraCredentialDto" || u.CreateDeepInfraCredentialDto != nil {
		return visitor.VisitCreateDeepInfraCredentialDto(u.CreateDeepInfraCredentialDto)
	}
	if u.typ == "CreateDeepSeekCredentialDto" || u.CreateDeepSeekCredentialDto != nil {
		return visitor.VisitCreateDeepSeekCredentialDto(u.CreateDeepSeekCredentialDto)
	}
	if u.typ == "CreateGcpCredentialDto" || u.CreateGcpCredentialDto != nil {
		return visitor.VisitCreateGcpCredentialDto(u.CreateGcpCredentialDto)
	}
	if u.typ == "CreateGladiaCredentialDto" || u.CreateGladiaCredentialDto != nil {
		return visitor.VisitCreateGladiaCredentialDto(u.CreateGladiaCredentialDto)
	}
	if u.typ == "CreateGoHighLevelCredentialDto" || u.CreateGoHighLevelCredentialDto != nil {
		return visitor.VisitCreateGoHighLevelCredentialDto(u.CreateGoHighLevelCredentialDto)
	}
	if u.typ == "CreateGoogleCredentialDto" || u.CreateGoogleCredentialDto != nil {
		return visitor.VisitCreateGoogleCredentialDto(u.CreateGoogleCredentialDto)
	}
	if u.typ == "CreateGroqCredentialDto" || u.CreateGroqCredentialDto != nil {
		return visitor.VisitCreateGroqCredentialDto(u.CreateGroqCredentialDto)
	}
	if u.typ == "CreateInflectionAiCredentialDto" || u.CreateInflectionAiCredentialDto != nil {
		return visitor.VisitCreateInflectionAiCredentialDto(u.CreateInflectionAiCredentialDto)
	}
	if u.typ == "CreateLangfuseCredentialDto" || u.CreateLangfuseCredentialDto != nil {
		return visitor.VisitCreateLangfuseCredentialDto(u.CreateLangfuseCredentialDto)
	}
	if u.typ == "CreateLmntCredentialDto" || u.CreateLmntCredentialDto != nil {
		return visitor.VisitCreateLmntCredentialDto(u.CreateLmntCredentialDto)
	}
	if u.typ == "CreateMakeCredentialDto" || u.CreateMakeCredentialDto != nil {
		return visitor.VisitCreateMakeCredentialDto(u.CreateMakeCredentialDto)
	}
	if u.typ == "CreateOpenAiCredentialDto" || u.CreateOpenAiCredentialDto != nil {
		return visitor.VisitCreateOpenAiCredentialDto(u.CreateOpenAiCredentialDto)
	}
	if u.typ == "CreateOpenRouterCredentialDto" || u.CreateOpenRouterCredentialDto != nil {
		return visitor.VisitCreateOpenRouterCredentialDto(u.CreateOpenRouterCredentialDto)
	}
	if u.typ == "CreatePerplexityAiCredentialDto" || u.CreatePerplexityAiCredentialDto != nil {
		return visitor.VisitCreatePerplexityAiCredentialDto(u.CreatePerplexityAiCredentialDto)
	}
	if u.typ == "CreatePlayHtCredentialDto" || u.CreatePlayHtCredentialDto != nil {
		return visitor.VisitCreatePlayHtCredentialDto(u.CreatePlayHtCredentialDto)
	}
	if u.typ == "CreateRimeAiCredentialDto" || u.CreateRimeAiCredentialDto != nil {
		return visitor.VisitCreateRimeAiCredentialDto(u.CreateRimeAiCredentialDto)
	}
	if u.typ == "CreateRunpodCredentialDto" || u.CreateRunpodCredentialDto != nil {
		return visitor.VisitCreateRunpodCredentialDto(u.CreateRunpodCredentialDto)
	}
	if u.typ == "CreateS3CredentialDto" || u.CreateS3CredentialDto != nil {
		return visitor.VisitCreateS3CredentialDto(u.CreateS3CredentialDto)
	}
	if u.typ == "CreateSupabaseCredentialDto" || u.CreateSupabaseCredentialDto != nil {
		return visitor.VisitCreateSupabaseCredentialDto(u.CreateSupabaseCredentialDto)
	}
	if u.typ == "CreateSmallestAiCredentialDto" || u.CreateSmallestAiCredentialDto != nil {
		return visitor.VisitCreateSmallestAiCredentialDto(u.CreateSmallestAiCredentialDto)
	}
	if u.typ == "CreateTavusCredentialDto" || u.CreateTavusCredentialDto != nil {
		return visitor.VisitCreateTavusCredentialDto(u.CreateTavusCredentialDto)
	}
	if u.typ == "CreateTogetherAiCredentialDto" || u.CreateTogetherAiCredentialDto != nil {
		return visitor.VisitCreateTogetherAiCredentialDto(u.CreateTogetherAiCredentialDto)
	}
	if u.typ == "CreateTwilioCredentialDto" || u.CreateTwilioCredentialDto != nil {
		return visitor.VisitCreateTwilioCredentialDto(u.CreateTwilioCredentialDto)
	}
	if u.typ == "CreateVonageCredentialDto" || u.CreateVonageCredentialDto != nil {
		return visitor.VisitCreateVonageCredentialDto(u.CreateVonageCredentialDto)
	}
	if u.typ == "CreateWebhookCredentialDto" || u.CreateWebhookCredentialDto != nil {
		return visitor.VisitCreateWebhookCredentialDto(u.CreateWebhookCredentialDto)
	}
	if u.typ == "CreateXAiCredentialDto" || u.CreateXAiCredentialDto != nil {
		return visitor.VisitCreateXAiCredentialDto(u.CreateXAiCredentialDto)
	}
	if u.typ == "CreateNeuphonicCredentialDto" || u.CreateNeuphonicCredentialDto != nil {
		return visitor.VisitCreateNeuphonicCredentialDto(u.CreateNeuphonicCredentialDto)
	}
	if u.typ == "CreateHumeCredentialDto" || u.CreateHumeCredentialDto != nil {
		return visitor.VisitCreateHumeCredentialDto(u.CreateHumeCredentialDto)
	}
	if u.typ == "CreateMistralCredentialDto" || u.CreateMistralCredentialDto != nil {
		return visitor.VisitCreateMistralCredentialDto(u.CreateMistralCredentialDto)
	}
	if u.typ == "CreateSpeechmaticsCredentialDto" || u.CreateSpeechmaticsCredentialDto != nil {
		return visitor.VisitCreateSpeechmaticsCredentialDto(u.CreateSpeechmaticsCredentialDto)
	}
	if u.typ == "CreateTrieveCredentialDto" || u.CreateTrieveCredentialDto != nil {
		return visitor.VisitCreateTrieveCredentialDto(u.CreateTrieveCredentialDto)
	}
	if u.typ == "CreateGoogleCalendarOAuth2ClientCredentialDto" || u.CreateGoogleCalendarOAuth2ClientCredentialDto != nil {
		return visitor.VisitCreateGoogleCalendarOAuth2ClientCredentialDto(u.CreateGoogleCalendarOAuth2ClientCredentialDto)
	}
	if u.typ == "CreateGoogleCalendarOAuth2AuthorizationCredentialDto" || u.CreateGoogleCalendarOAuth2AuthorizationCredentialDto != nil {
		return visitor.VisitCreateGoogleCalendarOAuth2AuthorizationCredentialDto(u.CreateGoogleCalendarOAuth2AuthorizationCredentialDto)
	}
	if u.typ == "CreateGoogleSheetsOAuth2AuthorizationCredentialDto" || u.CreateGoogleSheetsOAuth2AuthorizationCredentialDto != nil {
		return visitor.VisitCreateGoogleSheetsOAuth2AuthorizationCredentialDto(u.CreateGoogleSheetsOAuth2AuthorizationCredentialDto)
	}
	if u.typ == "CreateSlackOAuth2AuthorizationCredentialDto" || u.CreateSlackOAuth2AuthorizationCredentialDto != nil {
		return visitor.VisitCreateSlackOAuth2AuthorizationCredentialDto(u.CreateSlackOAuth2AuthorizationCredentialDto)
	}
	if u.typ == "CreateGoHighLevelMcpCredentialDto" || u.CreateGoHighLevelMcpCredentialDto != nil {
		return visitor.VisitCreateGoHighLevelMcpCredentialDto(u.CreateGoHighLevelMcpCredentialDto)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}

// This is the mode for the first message. Default is 'assistant-speaks-first'.
//
// Use:
// - 'assistant-speaks-first' to have the assistant speak first.
// - 'assistant-waits-for-user' to have the assistant wait for the user to speak first.
// - 'assistant-speaks-first-with-model-generated-message' to have the assistant speak first with a message generated by the model based on the conversation state. (`assistant.model.messages` at call start, `call.messages` at squad transfer points).
//
// @default 'assistant-speaks-first'
type UpdateAssistantDtoFirstMessageMode string

const (
	UpdateAssistantDtoFirstMessageModeAssistantSpeaksFirst                          UpdateAssistantDtoFirstMessageMode = "assistant-speaks-first"
	UpdateAssistantDtoFirstMessageModeAssistantSpeaksFirstWithModelGeneratedMessage UpdateAssistantDtoFirstMessageMode = "assistant-speaks-first-with-model-generated-message"
	UpdateAssistantDtoFirstMessageModeAssistantWaitsForUser                         UpdateAssistantDtoFirstMessageMode = "assistant-waits-for-user"
)

func NewUpdateAssistantDtoFirstMessageModeFromString(s string) (UpdateAssistantDtoFirstMessageMode, error) {
	switch s {
	case "assistant-speaks-first":
		return UpdateAssistantDtoFirstMessageModeAssistantSpeaksFirst, nil
	case "assistant-speaks-first-with-model-generated-message":
		return UpdateAssistantDtoFirstMessageModeAssistantSpeaksFirstWithModelGeneratedMessage, nil
	case "assistant-waits-for-user":
		return UpdateAssistantDtoFirstMessageModeAssistantWaitsForUser, nil
	}
	var t UpdateAssistantDtoFirstMessageMode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateAssistantDtoFirstMessageMode) Ptr() *UpdateAssistantDtoFirstMessageMode {
	return &u
}

type UpdateAssistantDtoHooksItem struct {
	AssistantHookCallEnding                 *AssistantHookCallEnding
	AssistantHookAssistantSpeechInterrupted *AssistantHookAssistantSpeechInterrupted
	AssistantHookCustomerSpeechInterrupted  *AssistantHookCustomerSpeechInterrupted

	typ string
}

func (u *UpdateAssistantDtoHooksItem) GetAssistantHookCallEnding() *AssistantHookCallEnding {
	if u == nil {
		return nil
	}
	return u.AssistantHookCallEnding
}

func (u *UpdateAssistantDtoHooksItem) GetAssistantHookAssistantSpeechInterrupted() *AssistantHookAssistantSpeechInterrupted {
	if u == nil {
		return nil
	}
	return u.AssistantHookAssistantSpeechInterrupted
}

func (u *UpdateAssistantDtoHooksItem) GetAssistantHookCustomerSpeechInterrupted() *AssistantHookCustomerSpeechInterrupted {
	if u == nil {
		return nil
	}
	return u.AssistantHookCustomerSpeechInterrupted
}

func (u *UpdateAssistantDtoHooksItem) UnmarshalJSON(data []byte) error {
	valueAssistantHookCallEnding := new(AssistantHookCallEnding)
	if err := json.Unmarshal(data, &valueAssistantHookCallEnding); err == nil {
		u.typ = "AssistantHookCallEnding"
		u.AssistantHookCallEnding = valueAssistantHookCallEnding
		return nil
	}
	valueAssistantHookAssistantSpeechInterrupted := new(AssistantHookAssistantSpeechInterrupted)
	if err := json.Unmarshal(data, &valueAssistantHookAssistantSpeechInterrupted); err == nil {
		u.typ = "AssistantHookAssistantSpeechInterrupted"
		u.AssistantHookAssistantSpeechInterrupted = valueAssistantHookAssistantSpeechInterrupted
		return nil
	}
	valueAssistantHookCustomerSpeechInterrupted := new(AssistantHookCustomerSpeechInterrupted)
	if err := json.Unmarshal(data, &valueAssistantHookCustomerSpeechInterrupted); err == nil {
		u.typ = "AssistantHookCustomerSpeechInterrupted"
		u.AssistantHookCustomerSpeechInterrupted = valueAssistantHookCustomerSpeechInterrupted
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpdateAssistantDtoHooksItem) MarshalJSON() ([]byte, error) {
	if u.typ == "AssistantHookCallEnding" || u.AssistantHookCallEnding != nil {
		return json.Marshal(u.AssistantHookCallEnding)
	}
	if u.typ == "AssistantHookAssistantSpeechInterrupted" || u.AssistantHookAssistantSpeechInterrupted != nil {
		return json.Marshal(u.AssistantHookAssistantSpeechInterrupted)
	}
	if u.typ == "AssistantHookCustomerSpeechInterrupted" || u.AssistantHookCustomerSpeechInterrupted != nil {
		return json.Marshal(u.AssistantHookCustomerSpeechInterrupted)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateAssistantDtoHooksItemVisitor interface {
	VisitAssistantHookCallEnding(*AssistantHookCallEnding) error
	VisitAssistantHookAssistantSpeechInterrupted(*AssistantHookAssistantSpeechInterrupted) error
	VisitAssistantHookCustomerSpeechInterrupted(*AssistantHookCustomerSpeechInterrupted) error
}

func (u *UpdateAssistantDtoHooksItem) Accept(visitor UpdateAssistantDtoHooksItemVisitor) error {
	if u.typ == "AssistantHookCallEnding" || u.AssistantHookCallEnding != nil {
		return visitor.VisitAssistantHookCallEnding(u.AssistantHookCallEnding)
	}
	if u.typ == "AssistantHookAssistantSpeechInterrupted" || u.AssistantHookAssistantSpeechInterrupted != nil {
		return visitor.VisitAssistantHookAssistantSpeechInterrupted(u.AssistantHookAssistantSpeechInterrupted)
	}
	if u.typ == "AssistantHookCustomerSpeechInterrupted" || u.AssistantHookCustomerSpeechInterrupted != nil {
		return visitor.VisitAssistantHookCustomerSpeechInterrupted(u.AssistantHookCustomerSpeechInterrupted)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}

// These are the options for the assistant's LLM.
type UpdateAssistantDtoModel struct {
	AnthropicModel    *AnthropicModel
	AnyscaleModel     *AnyscaleModel
	CerebrasModel     *CerebrasModel
	CustomLlmModel    *CustomLlmModel
	DeepInfraModel    *DeepInfraModel
	DeepSeekModel     *DeepSeekModel
	GoogleModel       *GoogleModel
	GroqModel         *GroqModel
	InflectionAiModel *InflectionAiModel
	OpenAiModel       *OpenAiModel
	OpenRouterModel   *OpenRouterModel
	PerplexityAiModel *PerplexityAiModel
	TogetherAiModel   *TogetherAiModel
	XaiModel          *XaiModel

	typ string
}

func (u *UpdateAssistantDtoModel) GetAnthropicModel() *AnthropicModel {
	if u == nil {
		return nil
	}
	return u.AnthropicModel
}

func (u *UpdateAssistantDtoModel) GetAnyscaleModel() *AnyscaleModel {
	if u == nil {
		return nil
	}
	return u.AnyscaleModel
}

func (u *UpdateAssistantDtoModel) GetCerebrasModel() *CerebrasModel {
	if u == nil {
		return nil
	}
	return u.CerebrasModel
}

func (u *UpdateAssistantDtoModel) GetCustomLlmModel() *CustomLlmModel {
	if u == nil {
		return nil
	}
	return u.CustomLlmModel
}

func (u *UpdateAssistantDtoModel) GetDeepInfraModel() *DeepInfraModel {
	if u == nil {
		return nil
	}
	return u.DeepInfraModel
}

func (u *UpdateAssistantDtoModel) GetDeepSeekModel() *DeepSeekModel {
	if u == nil {
		return nil
	}
	return u.DeepSeekModel
}

func (u *UpdateAssistantDtoModel) GetGoogleModel() *GoogleModel {
	if u == nil {
		return nil
	}
	return u.GoogleModel
}

func (u *UpdateAssistantDtoModel) GetGroqModel() *GroqModel {
	if u == nil {
		return nil
	}
	return u.GroqModel
}

func (u *UpdateAssistantDtoModel) GetInflectionAiModel() *InflectionAiModel {
	if u == nil {
		return nil
	}
	return u.InflectionAiModel
}

func (u *UpdateAssistantDtoModel) GetOpenAiModel() *OpenAiModel {
	if u == nil {
		return nil
	}
	return u.OpenAiModel
}

func (u *UpdateAssistantDtoModel) GetOpenRouterModel() *OpenRouterModel {
	if u == nil {
		return nil
	}
	return u.OpenRouterModel
}

func (u *UpdateAssistantDtoModel) GetPerplexityAiModel() *PerplexityAiModel {
	if u == nil {
		return nil
	}
	return u.PerplexityAiModel
}

func (u *UpdateAssistantDtoModel) GetTogetherAiModel() *TogetherAiModel {
	if u == nil {
		return nil
	}
	return u.TogetherAiModel
}

func (u *UpdateAssistantDtoModel) GetXaiModel() *XaiModel {
	if u == nil {
		return nil
	}
	return u.XaiModel
}

func (u *UpdateAssistantDtoModel) UnmarshalJSON(data []byte) error {
	valueAnthropicModel := new(AnthropicModel)
	if err := json.Unmarshal(data, &valueAnthropicModel); err == nil {
		u.typ = "AnthropicModel"
		u.AnthropicModel = valueAnthropicModel
		return nil
	}
	valueAnyscaleModel := new(AnyscaleModel)
	if err := json.Unmarshal(data, &valueAnyscaleModel); err == nil {
		u.typ = "AnyscaleModel"
		u.AnyscaleModel = valueAnyscaleModel
		return nil
	}
	valueCerebrasModel := new(CerebrasModel)
	if err := json.Unmarshal(data, &valueCerebrasModel); err == nil {
		u.typ = "CerebrasModel"
		u.CerebrasModel = valueCerebrasModel
		return nil
	}
	valueCustomLlmModel := new(CustomLlmModel)
	if err := json.Unmarshal(data, &valueCustomLlmModel); err == nil {
		u.typ = "CustomLlmModel"
		u.CustomLlmModel = valueCustomLlmModel
		return nil
	}
	valueDeepInfraModel := new(DeepInfraModel)
	if err := json.Unmarshal(data, &valueDeepInfraModel); err == nil {
		u.typ = "DeepInfraModel"
		u.DeepInfraModel = valueDeepInfraModel
		return nil
	}
	valueDeepSeekModel := new(DeepSeekModel)
	if err := json.Unmarshal(data, &valueDeepSeekModel); err == nil {
		u.typ = "DeepSeekModel"
		u.DeepSeekModel = valueDeepSeekModel
		return nil
	}
	valueGoogleModel := new(GoogleModel)
	if err := json.Unmarshal(data, &valueGoogleModel); err == nil {
		u.typ = "GoogleModel"
		u.GoogleModel = valueGoogleModel
		return nil
	}
	valueGroqModel := new(GroqModel)
	if err := json.Unmarshal(data, &valueGroqModel); err == nil {
		u.typ = "GroqModel"
		u.GroqModel = valueGroqModel
		return nil
	}
	valueInflectionAiModel := new(InflectionAiModel)
	if err := json.Unmarshal(data, &valueInflectionAiModel); err == nil {
		u.typ = "InflectionAiModel"
		u.InflectionAiModel = valueInflectionAiModel
		return nil
	}
	valueOpenAiModel := new(OpenAiModel)
	if err := json.Unmarshal(data, &valueOpenAiModel); err == nil {
		u.typ = "OpenAiModel"
		u.OpenAiModel = valueOpenAiModel
		return nil
	}
	valueOpenRouterModel := new(OpenRouterModel)
	if err := json.Unmarshal(data, &valueOpenRouterModel); err == nil {
		u.typ = "OpenRouterModel"
		u.OpenRouterModel = valueOpenRouterModel
		return nil
	}
	valuePerplexityAiModel := new(PerplexityAiModel)
	if err := json.Unmarshal(data, &valuePerplexityAiModel); err == nil {
		u.typ = "PerplexityAiModel"
		u.PerplexityAiModel = valuePerplexityAiModel
		return nil
	}
	valueTogetherAiModel := new(TogetherAiModel)
	if err := json.Unmarshal(data, &valueTogetherAiModel); err == nil {
		u.typ = "TogetherAiModel"
		u.TogetherAiModel = valueTogetherAiModel
		return nil
	}
	valueXaiModel := new(XaiModel)
	if err := json.Unmarshal(data, &valueXaiModel); err == nil {
		u.typ = "XaiModel"
		u.XaiModel = valueXaiModel
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpdateAssistantDtoModel) MarshalJSON() ([]byte, error) {
	if u.typ == "AnthropicModel" || u.AnthropicModel != nil {
		return json.Marshal(u.AnthropicModel)
	}
	if u.typ == "AnyscaleModel" || u.AnyscaleModel != nil {
		return json.Marshal(u.AnyscaleModel)
	}
	if u.typ == "CerebrasModel" || u.CerebrasModel != nil {
		return json.Marshal(u.CerebrasModel)
	}
	if u.typ == "CustomLlmModel" || u.CustomLlmModel != nil {
		return json.Marshal(u.CustomLlmModel)
	}
	if u.typ == "DeepInfraModel" || u.DeepInfraModel != nil {
		return json.Marshal(u.DeepInfraModel)
	}
	if u.typ == "DeepSeekModel" || u.DeepSeekModel != nil {
		return json.Marshal(u.DeepSeekModel)
	}
	if u.typ == "GoogleModel" || u.GoogleModel != nil {
		return json.Marshal(u.GoogleModel)
	}
	if u.typ == "GroqModel" || u.GroqModel != nil {
		return json.Marshal(u.GroqModel)
	}
	if u.typ == "InflectionAiModel" || u.InflectionAiModel != nil {
		return json.Marshal(u.InflectionAiModel)
	}
	if u.typ == "OpenAiModel" || u.OpenAiModel != nil {
		return json.Marshal(u.OpenAiModel)
	}
	if u.typ == "OpenRouterModel" || u.OpenRouterModel != nil {
		return json.Marshal(u.OpenRouterModel)
	}
	if u.typ == "PerplexityAiModel" || u.PerplexityAiModel != nil {
		return json.Marshal(u.PerplexityAiModel)
	}
	if u.typ == "TogetherAiModel" || u.TogetherAiModel != nil {
		return json.Marshal(u.TogetherAiModel)
	}
	if u.typ == "XaiModel" || u.XaiModel != nil {
		return json.Marshal(u.XaiModel)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateAssistantDtoModelVisitor interface {
	VisitAnthropicModel(*AnthropicModel) error
	VisitAnyscaleModel(*AnyscaleModel) error
	VisitCerebrasModel(*CerebrasModel) error
	VisitCustomLlmModel(*CustomLlmModel) error
	VisitDeepInfraModel(*DeepInfraModel) error
	VisitDeepSeekModel(*DeepSeekModel) error
	VisitGoogleModel(*GoogleModel) error
	VisitGroqModel(*GroqModel) error
	VisitInflectionAiModel(*InflectionAiModel) error
	VisitOpenAiModel(*OpenAiModel) error
	VisitOpenRouterModel(*OpenRouterModel) error
	VisitPerplexityAiModel(*PerplexityAiModel) error
	VisitTogetherAiModel(*TogetherAiModel) error
	VisitXaiModel(*XaiModel) error
}

func (u *UpdateAssistantDtoModel) Accept(visitor UpdateAssistantDtoModelVisitor) error {
	if u.typ == "AnthropicModel" || u.AnthropicModel != nil {
		return visitor.VisitAnthropicModel(u.AnthropicModel)
	}
	if u.typ == "AnyscaleModel" || u.AnyscaleModel != nil {
		return visitor.VisitAnyscaleModel(u.AnyscaleModel)
	}
	if u.typ == "CerebrasModel" || u.CerebrasModel != nil {
		return visitor.VisitCerebrasModel(u.CerebrasModel)
	}
	if u.typ == "CustomLlmModel" || u.CustomLlmModel != nil {
		return visitor.VisitCustomLlmModel(u.CustomLlmModel)
	}
	if u.typ == "DeepInfraModel" || u.DeepInfraModel != nil {
		return visitor.VisitDeepInfraModel(u.DeepInfraModel)
	}
	if u.typ == "DeepSeekModel" || u.DeepSeekModel != nil {
		return visitor.VisitDeepSeekModel(u.DeepSeekModel)
	}
	if u.typ == "GoogleModel" || u.GoogleModel != nil {
		return visitor.VisitGoogleModel(u.GoogleModel)
	}
	if u.typ == "GroqModel" || u.GroqModel != nil {
		return visitor.VisitGroqModel(u.GroqModel)
	}
	if u.typ == "InflectionAiModel" || u.InflectionAiModel != nil {
		return visitor.VisitInflectionAiModel(u.InflectionAiModel)
	}
	if u.typ == "OpenAiModel" || u.OpenAiModel != nil {
		return visitor.VisitOpenAiModel(u.OpenAiModel)
	}
	if u.typ == "OpenRouterModel" || u.OpenRouterModel != nil {
		return visitor.VisitOpenRouterModel(u.OpenRouterModel)
	}
	if u.typ == "PerplexityAiModel" || u.PerplexityAiModel != nil {
		return visitor.VisitPerplexityAiModel(u.PerplexityAiModel)
	}
	if u.typ == "TogetherAiModel" || u.TogetherAiModel != nil {
		return visitor.VisitTogetherAiModel(u.TogetherAiModel)
	}
	if u.typ == "XaiModel" || u.XaiModel != nil {
		return visitor.VisitXaiModel(u.XaiModel)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateAssistantDtoServerMessagesItem string

const (
	UpdateAssistantDtoServerMessagesItemConversationUpdate            UpdateAssistantDtoServerMessagesItem = "conversation-update"
	UpdateAssistantDtoServerMessagesItemEndOfCallReport               UpdateAssistantDtoServerMessagesItem = "end-of-call-report"
	UpdateAssistantDtoServerMessagesItemFunctionCall                  UpdateAssistantDtoServerMessagesItem = "function-call"
	UpdateAssistantDtoServerMessagesItemHang                          UpdateAssistantDtoServerMessagesItem = "hang"
	UpdateAssistantDtoServerMessagesItemLanguageChanged               UpdateAssistantDtoServerMessagesItem = "language-changed"
	UpdateAssistantDtoServerMessagesItemLanguageChangeDetected        UpdateAssistantDtoServerMessagesItem = "language-change-detected"
	UpdateAssistantDtoServerMessagesItemModelOutput                   UpdateAssistantDtoServerMessagesItem = "model-output"
	UpdateAssistantDtoServerMessagesItemPhoneCallControl              UpdateAssistantDtoServerMessagesItem = "phone-call-control"
	UpdateAssistantDtoServerMessagesItemSpeechUpdate                  UpdateAssistantDtoServerMessagesItem = "speech-update"
	UpdateAssistantDtoServerMessagesItemStatusUpdate                  UpdateAssistantDtoServerMessagesItem = "status-update"
	UpdateAssistantDtoServerMessagesItemTranscript                    UpdateAssistantDtoServerMessagesItem = "transcript"
	UpdateAssistantDtoServerMessagesItemTranscriptTranscriptTypeFinal UpdateAssistantDtoServerMessagesItem = "transcript[transcriptType=\\\"final\\\"]"
	UpdateAssistantDtoServerMessagesItemToolCalls                     UpdateAssistantDtoServerMessagesItem = "tool-calls"
	UpdateAssistantDtoServerMessagesItemTransferDestinationRequest    UpdateAssistantDtoServerMessagesItem = "transfer-destination-request"
	UpdateAssistantDtoServerMessagesItemTransferUpdate                UpdateAssistantDtoServerMessagesItem = "transfer-update"
	UpdateAssistantDtoServerMessagesItemUserInterrupted               UpdateAssistantDtoServerMessagesItem = "user-interrupted"
	UpdateAssistantDtoServerMessagesItemVoiceInput                    UpdateAssistantDtoServerMessagesItem = "voice-input"
)

func NewUpdateAssistantDtoServerMessagesItemFromString(s string) (UpdateAssistantDtoServerMessagesItem, error) {
	switch s {
	case "conversation-update":
		return UpdateAssistantDtoServerMessagesItemConversationUpdate, nil
	case "end-of-call-report":
		return UpdateAssistantDtoServerMessagesItemEndOfCallReport, nil
	case "function-call":
		return UpdateAssistantDtoServerMessagesItemFunctionCall, nil
	case "hang":
		return UpdateAssistantDtoServerMessagesItemHang, nil
	case "language-changed":
		return UpdateAssistantDtoServerMessagesItemLanguageChanged, nil
	case "language-change-detected":
		return UpdateAssistantDtoServerMessagesItemLanguageChangeDetected, nil
	case "model-output":
		return UpdateAssistantDtoServerMessagesItemModelOutput, nil
	case "phone-call-control":
		return UpdateAssistantDtoServerMessagesItemPhoneCallControl, nil
	case "speech-update":
		return UpdateAssistantDtoServerMessagesItemSpeechUpdate, nil
	case "status-update":
		return UpdateAssistantDtoServerMessagesItemStatusUpdate, nil
	case "transcript":
		return UpdateAssistantDtoServerMessagesItemTranscript, nil
	case "transcript[transcriptType=\"final\"]":
		return UpdateAssistantDtoServerMessagesItemTranscriptTranscriptTypeFinal, nil
	case "tool-calls":
		return UpdateAssistantDtoServerMessagesItemToolCalls, nil
	case "transfer-destination-request":
		return UpdateAssistantDtoServerMessagesItemTransferDestinationRequest, nil
	case "transfer-update":
		return UpdateAssistantDtoServerMessagesItemTransferUpdate, nil
	case "user-interrupted":
		return UpdateAssistantDtoServerMessagesItemUserInterrupted, nil
	case "voice-input":
		return UpdateAssistantDtoServerMessagesItemVoiceInput, nil
	}
	var t UpdateAssistantDtoServerMessagesItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateAssistantDtoServerMessagesItem) Ptr() *UpdateAssistantDtoServerMessagesItem {
	return &u
}

// These are the options for the assistant's transcriber.
type UpdateAssistantDtoTranscriber struct {
	AssemblyAiTranscriber   *AssemblyAiTranscriber
	AzureSpeechTranscriber  *AzureSpeechTranscriber
	CustomTranscriber       *CustomTranscriber
	DeepgramTranscriber     *DeepgramTranscriber
	ElevenLabsTranscriber   *ElevenLabsTranscriber
	GladiaTranscriber       *GladiaTranscriber
	GoogleTranscriber       *GoogleTranscriber
	SpeechmaticsTranscriber *SpeechmaticsTranscriber
	TalkscriberTranscriber  *TalkscriberTranscriber
	OpenAiTranscriber       *OpenAiTranscriber

	typ string
}

func (u *UpdateAssistantDtoTranscriber) GetAssemblyAiTranscriber() *AssemblyAiTranscriber {
	if u == nil {
		return nil
	}
	return u.AssemblyAiTranscriber
}

func (u *UpdateAssistantDtoTranscriber) GetAzureSpeechTranscriber() *AzureSpeechTranscriber {
	if u == nil {
		return nil
	}
	return u.AzureSpeechTranscriber
}

func (u *UpdateAssistantDtoTranscriber) GetCustomTranscriber() *CustomTranscriber {
	if u == nil {
		return nil
	}
	return u.CustomTranscriber
}

func (u *UpdateAssistantDtoTranscriber) GetDeepgramTranscriber() *DeepgramTranscriber {
	if u == nil {
		return nil
	}
	return u.DeepgramTranscriber
}

func (u *UpdateAssistantDtoTranscriber) GetElevenLabsTranscriber() *ElevenLabsTranscriber {
	if u == nil {
		return nil
	}
	return u.ElevenLabsTranscriber
}

func (u *UpdateAssistantDtoTranscriber) GetGladiaTranscriber() *GladiaTranscriber {
	if u == nil {
		return nil
	}
	return u.GladiaTranscriber
}

func (u *UpdateAssistantDtoTranscriber) GetGoogleTranscriber() *GoogleTranscriber {
	if u == nil {
		return nil
	}
	return u.GoogleTranscriber
}

func (u *UpdateAssistantDtoTranscriber) GetSpeechmaticsTranscriber() *SpeechmaticsTranscriber {
	if u == nil {
		return nil
	}
	return u.SpeechmaticsTranscriber
}

func (u *UpdateAssistantDtoTranscriber) GetTalkscriberTranscriber() *TalkscriberTranscriber {
	if u == nil {
		return nil
	}
	return u.TalkscriberTranscriber
}

func (u *UpdateAssistantDtoTranscriber) GetOpenAiTranscriber() *OpenAiTranscriber {
	if u == nil {
		return nil
	}
	return u.OpenAiTranscriber
}

func (u *UpdateAssistantDtoTranscriber) UnmarshalJSON(data []byte) error {
	valueAssemblyAiTranscriber := new(AssemblyAiTranscriber)
	if err := json.Unmarshal(data, &valueAssemblyAiTranscriber); err == nil {
		u.typ = "AssemblyAiTranscriber"
		u.AssemblyAiTranscriber = valueAssemblyAiTranscriber
		return nil
	}
	valueAzureSpeechTranscriber := new(AzureSpeechTranscriber)
	if err := json.Unmarshal(data, &valueAzureSpeechTranscriber); err == nil {
		u.typ = "AzureSpeechTranscriber"
		u.AzureSpeechTranscriber = valueAzureSpeechTranscriber
		return nil
	}
	valueCustomTranscriber := new(CustomTranscriber)
	if err := json.Unmarshal(data, &valueCustomTranscriber); err == nil {
		u.typ = "CustomTranscriber"
		u.CustomTranscriber = valueCustomTranscriber
		return nil
	}
	valueDeepgramTranscriber := new(DeepgramTranscriber)
	if err := json.Unmarshal(data, &valueDeepgramTranscriber); err == nil {
		u.typ = "DeepgramTranscriber"
		u.DeepgramTranscriber = valueDeepgramTranscriber
		return nil
	}
	valueElevenLabsTranscriber := new(ElevenLabsTranscriber)
	if err := json.Unmarshal(data, &valueElevenLabsTranscriber); err == nil {
		u.typ = "ElevenLabsTranscriber"
		u.ElevenLabsTranscriber = valueElevenLabsTranscriber
		return nil
	}
	valueGladiaTranscriber := new(GladiaTranscriber)
	if err := json.Unmarshal(data, &valueGladiaTranscriber); err == nil {
		u.typ = "GladiaTranscriber"
		u.GladiaTranscriber = valueGladiaTranscriber
		return nil
	}
	valueGoogleTranscriber := new(GoogleTranscriber)
	if err := json.Unmarshal(data, &valueGoogleTranscriber); err == nil {
		u.typ = "GoogleTranscriber"
		u.GoogleTranscriber = valueGoogleTranscriber
		return nil
	}
	valueSpeechmaticsTranscriber := new(SpeechmaticsTranscriber)
	if err := json.Unmarshal(data, &valueSpeechmaticsTranscriber); err == nil {
		u.typ = "SpeechmaticsTranscriber"
		u.SpeechmaticsTranscriber = valueSpeechmaticsTranscriber
		return nil
	}
	valueTalkscriberTranscriber := new(TalkscriberTranscriber)
	if err := json.Unmarshal(data, &valueTalkscriberTranscriber); err == nil {
		u.typ = "TalkscriberTranscriber"
		u.TalkscriberTranscriber = valueTalkscriberTranscriber
		return nil
	}
	valueOpenAiTranscriber := new(OpenAiTranscriber)
	if err := json.Unmarshal(data, &valueOpenAiTranscriber); err == nil {
		u.typ = "OpenAiTranscriber"
		u.OpenAiTranscriber = valueOpenAiTranscriber
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpdateAssistantDtoTranscriber) MarshalJSON() ([]byte, error) {
	if u.typ == "AssemblyAiTranscriber" || u.AssemblyAiTranscriber != nil {
		return json.Marshal(u.AssemblyAiTranscriber)
	}
	if u.typ == "AzureSpeechTranscriber" || u.AzureSpeechTranscriber != nil {
		return json.Marshal(u.AzureSpeechTranscriber)
	}
	if u.typ == "CustomTranscriber" || u.CustomTranscriber != nil {
		return json.Marshal(u.CustomTranscriber)
	}
	if u.typ == "DeepgramTranscriber" || u.DeepgramTranscriber != nil {
		return json.Marshal(u.DeepgramTranscriber)
	}
	if u.typ == "ElevenLabsTranscriber" || u.ElevenLabsTranscriber != nil {
		return json.Marshal(u.ElevenLabsTranscriber)
	}
	if u.typ == "GladiaTranscriber" || u.GladiaTranscriber != nil {
		return json.Marshal(u.GladiaTranscriber)
	}
	if u.typ == "GoogleTranscriber" || u.GoogleTranscriber != nil {
		return json.Marshal(u.GoogleTranscriber)
	}
	if u.typ == "SpeechmaticsTranscriber" || u.SpeechmaticsTranscriber != nil {
		return json.Marshal(u.SpeechmaticsTranscriber)
	}
	if u.typ == "TalkscriberTranscriber" || u.TalkscriberTranscriber != nil {
		return json.Marshal(u.TalkscriberTranscriber)
	}
	if u.typ == "OpenAiTranscriber" || u.OpenAiTranscriber != nil {
		return json.Marshal(u.OpenAiTranscriber)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateAssistantDtoTranscriberVisitor interface {
	VisitAssemblyAiTranscriber(*AssemblyAiTranscriber) error
	VisitAzureSpeechTranscriber(*AzureSpeechTranscriber) error
	VisitCustomTranscriber(*CustomTranscriber) error
	VisitDeepgramTranscriber(*DeepgramTranscriber) error
	VisitElevenLabsTranscriber(*ElevenLabsTranscriber) error
	VisitGladiaTranscriber(*GladiaTranscriber) error
	VisitGoogleTranscriber(*GoogleTranscriber) error
	VisitSpeechmaticsTranscriber(*SpeechmaticsTranscriber) error
	VisitTalkscriberTranscriber(*TalkscriberTranscriber) error
	VisitOpenAiTranscriber(*OpenAiTranscriber) error
}

func (u *UpdateAssistantDtoTranscriber) Accept(visitor UpdateAssistantDtoTranscriberVisitor) error {
	if u.typ == "AssemblyAiTranscriber" || u.AssemblyAiTranscriber != nil {
		return visitor.VisitAssemblyAiTranscriber(u.AssemblyAiTranscriber)
	}
	if u.typ == "AzureSpeechTranscriber" || u.AzureSpeechTranscriber != nil {
		return visitor.VisitAzureSpeechTranscriber(u.AzureSpeechTranscriber)
	}
	if u.typ == "CustomTranscriber" || u.CustomTranscriber != nil {
		return visitor.VisitCustomTranscriber(u.CustomTranscriber)
	}
	if u.typ == "DeepgramTranscriber" || u.DeepgramTranscriber != nil {
		return visitor.VisitDeepgramTranscriber(u.DeepgramTranscriber)
	}
	if u.typ == "ElevenLabsTranscriber" || u.ElevenLabsTranscriber != nil {
		return visitor.VisitElevenLabsTranscriber(u.ElevenLabsTranscriber)
	}
	if u.typ == "GladiaTranscriber" || u.GladiaTranscriber != nil {
		return visitor.VisitGladiaTranscriber(u.GladiaTranscriber)
	}
	if u.typ == "GoogleTranscriber" || u.GoogleTranscriber != nil {
		return visitor.VisitGoogleTranscriber(u.GoogleTranscriber)
	}
	if u.typ == "SpeechmaticsTranscriber" || u.SpeechmaticsTranscriber != nil {
		return visitor.VisitSpeechmaticsTranscriber(u.SpeechmaticsTranscriber)
	}
	if u.typ == "TalkscriberTranscriber" || u.TalkscriberTranscriber != nil {
		return visitor.VisitTalkscriberTranscriber(u.TalkscriberTranscriber)
	}
	if u.typ == "OpenAiTranscriber" || u.OpenAiTranscriber != nil {
		return visitor.VisitOpenAiTranscriber(u.OpenAiTranscriber)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}

// These are the options for the assistant's voice.
type UpdateAssistantDtoVoice struct {
	AzureVoice      *AzureVoice
	CartesiaVoice   *CartesiaVoice
	CustomVoice     *CustomVoice
	DeepgramVoice   *DeepgramVoice
	ElevenLabsVoice *ElevenLabsVoice
	HumeVoice       *HumeVoice
	LmntVoice       *LmntVoice
	NeuphonicVoice  *NeuphonicVoice
	OpenAiVoice     *OpenAiVoice
	PlayHtVoice     *PlayHtVoice
	RimeAiVoice     *RimeAiVoice
	SmallestAiVoice *SmallestAiVoice
	TavusVoice      *TavusVoice
	VapiVoice       *VapiVoice
	SesameVoice     *SesameVoice

	typ string
}

func (u *UpdateAssistantDtoVoice) GetAzureVoice() *AzureVoice {
	if u == nil {
		return nil
	}
	return u.AzureVoice
}

func (u *UpdateAssistantDtoVoice) GetCartesiaVoice() *CartesiaVoice {
	if u == nil {
		return nil
	}
	return u.CartesiaVoice
}

func (u *UpdateAssistantDtoVoice) GetCustomVoice() *CustomVoice {
	if u == nil {
		return nil
	}
	return u.CustomVoice
}

func (u *UpdateAssistantDtoVoice) GetDeepgramVoice() *DeepgramVoice {
	if u == nil {
		return nil
	}
	return u.DeepgramVoice
}

func (u *UpdateAssistantDtoVoice) GetElevenLabsVoice() *ElevenLabsVoice {
	if u == nil {
		return nil
	}
	return u.ElevenLabsVoice
}

func (u *UpdateAssistantDtoVoice) GetHumeVoice() *HumeVoice {
	if u == nil {
		return nil
	}
	return u.HumeVoice
}

func (u *UpdateAssistantDtoVoice) GetLmntVoice() *LmntVoice {
	if u == nil {
		return nil
	}
	return u.LmntVoice
}

func (u *UpdateAssistantDtoVoice) GetNeuphonicVoice() *NeuphonicVoice {
	if u == nil {
		return nil
	}
	return u.NeuphonicVoice
}

func (u *UpdateAssistantDtoVoice) GetOpenAiVoice() *OpenAiVoice {
	if u == nil {
		return nil
	}
	return u.OpenAiVoice
}

func (u *UpdateAssistantDtoVoice) GetPlayHtVoice() *PlayHtVoice {
	if u == nil {
		return nil
	}
	return u.PlayHtVoice
}

func (u *UpdateAssistantDtoVoice) GetRimeAiVoice() *RimeAiVoice {
	if u == nil {
		return nil
	}
	return u.RimeAiVoice
}

func (u *UpdateAssistantDtoVoice) GetSmallestAiVoice() *SmallestAiVoice {
	if u == nil {
		return nil
	}
	return u.SmallestAiVoice
}

func (u *UpdateAssistantDtoVoice) GetTavusVoice() *TavusVoice {
	if u == nil {
		return nil
	}
	return u.TavusVoice
}

func (u *UpdateAssistantDtoVoice) GetVapiVoice() *VapiVoice {
	if u == nil {
		return nil
	}
	return u.VapiVoice
}

func (u *UpdateAssistantDtoVoice) GetSesameVoice() *SesameVoice {
	if u == nil {
		return nil
	}
	return u.SesameVoice
}

func (u *UpdateAssistantDtoVoice) UnmarshalJSON(data []byte) error {
	valueAzureVoice := new(AzureVoice)
	if err := json.Unmarshal(data, &valueAzureVoice); err == nil {
		u.typ = "AzureVoice"
		u.AzureVoice = valueAzureVoice
		return nil
	}
	valueCartesiaVoice := new(CartesiaVoice)
	if err := json.Unmarshal(data, &valueCartesiaVoice); err == nil {
		u.typ = "CartesiaVoice"
		u.CartesiaVoice = valueCartesiaVoice
		return nil
	}
	valueCustomVoice := new(CustomVoice)
	if err := json.Unmarshal(data, &valueCustomVoice); err == nil {
		u.typ = "CustomVoice"
		u.CustomVoice = valueCustomVoice
		return nil
	}
	valueDeepgramVoice := new(DeepgramVoice)
	if err := json.Unmarshal(data, &valueDeepgramVoice); err == nil {
		u.typ = "DeepgramVoice"
		u.DeepgramVoice = valueDeepgramVoice
		return nil
	}
	valueElevenLabsVoice := new(ElevenLabsVoice)
	if err := json.Unmarshal(data, &valueElevenLabsVoice); err == nil {
		u.typ = "ElevenLabsVoice"
		u.ElevenLabsVoice = valueElevenLabsVoice
		return nil
	}
	valueHumeVoice := new(HumeVoice)
	if err := json.Unmarshal(data, &valueHumeVoice); err == nil {
		u.typ = "HumeVoice"
		u.HumeVoice = valueHumeVoice
		return nil
	}
	valueLmntVoice := new(LmntVoice)
	if err := json.Unmarshal(data, &valueLmntVoice); err == nil {
		u.typ = "LmntVoice"
		u.LmntVoice = valueLmntVoice
		return nil
	}
	valueNeuphonicVoice := new(NeuphonicVoice)
	if err := json.Unmarshal(data, &valueNeuphonicVoice); err == nil {
		u.typ = "NeuphonicVoice"
		u.NeuphonicVoice = valueNeuphonicVoice
		return nil
	}
	valueOpenAiVoice := new(OpenAiVoice)
	if err := json.Unmarshal(data, &valueOpenAiVoice); err == nil {
		u.typ = "OpenAiVoice"
		u.OpenAiVoice = valueOpenAiVoice
		return nil
	}
	valuePlayHtVoice := new(PlayHtVoice)
	if err := json.Unmarshal(data, &valuePlayHtVoice); err == nil {
		u.typ = "PlayHtVoice"
		u.PlayHtVoice = valuePlayHtVoice
		return nil
	}
	valueRimeAiVoice := new(RimeAiVoice)
	if err := json.Unmarshal(data, &valueRimeAiVoice); err == nil {
		u.typ = "RimeAiVoice"
		u.RimeAiVoice = valueRimeAiVoice
		return nil
	}
	valueSmallestAiVoice := new(SmallestAiVoice)
	if err := json.Unmarshal(data, &valueSmallestAiVoice); err == nil {
		u.typ = "SmallestAiVoice"
		u.SmallestAiVoice = valueSmallestAiVoice
		return nil
	}
	valueTavusVoice := new(TavusVoice)
	if err := json.Unmarshal(data, &valueTavusVoice); err == nil {
		u.typ = "TavusVoice"
		u.TavusVoice = valueTavusVoice
		return nil
	}
	valueVapiVoice := new(VapiVoice)
	if err := json.Unmarshal(data, &valueVapiVoice); err == nil {
		u.typ = "VapiVoice"
		u.VapiVoice = valueVapiVoice
		return nil
	}
	valueSesameVoice := new(SesameVoice)
	if err := json.Unmarshal(data, &valueSesameVoice); err == nil {
		u.typ = "SesameVoice"
		u.SesameVoice = valueSesameVoice
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpdateAssistantDtoVoice) MarshalJSON() ([]byte, error) {
	if u.typ == "AzureVoice" || u.AzureVoice != nil {
		return json.Marshal(u.AzureVoice)
	}
	if u.typ == "CartesiaVoice" || u.CartesiaVoice != nil {
		return json.Marshal(u.CartesiaVoice)
	}
	if u.typ == "CustomVoice" || u.CustomVoice != nil {
		return json.Marshal(u.CustomVoice)
	}
	if u.typ == "DeepgramVoice" || u.DeepgramVoice != nil {
		return json.Marshal(u.DeepgramVoice)
	}
	if u.typ == "ElevenLabsVoice" || u.ElevenLabsVoice != nil {
		return json.Marshal(u.ElevenLabsVoice)
	}
	if u.typ == "HumeVoice" || u.HumeVoice != nil {
		return json.Marshal(u.HumeVoice)
	}
	if u.typ == "LmntVoice" || u.LmntVoice != nil {
		return json.Marshal(u.LmntVoice)
	}
	if u.typ == "NeuphonicVoice" || u.NeuphonicVoice != nil {
		return json.Marshal(u.NeuphonicVoice)
	}
	if u.typ == "OpenAiVoice" || u.OpenAiVoice != nil {
		return json.Marshal(u.OpenAiVoice)
	}
	if u.typ == "PlayHtVoice" || u.PlayHtVoice != nil {
		return json.Marshal(u.PlayHtVoice)
	}
	if u.typ == "RimeAiVoice" || u.RimeAiVoice != nil {
		return json.Marshal(u.RimeAiVoice)
	}
	if u.typ == "SmallestAiVoice" || u.SmallestAiVoice != nil {
		return json.Marshal(u.SmallestAiVoice)
	}
	if u.typ == "TavusVoice" || u.TavusVoice != nil {
		return json.Marshal(u.TavusVoice)
	}
	if u.typ == "VapiVoice" || u.VapiVoice != nil {
		return json.Marshal(u.VapiVoice)
	}
	if u.typ == "SesameVoice" || u.SesameVoice != nil {
		return json.Marshal(u.SesameVoice)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateAssistantDtoVoiceVisitor interface {
	VisitAzureVoice(*AzureVoice) error
	VisitCartesiaVoice(*CartesiaVoice) error
	VisitCustomVoice(*CustomVoice) error
	VisitDeepgramVoice(*DeepgramVoice) error
	VisitElevenLabsVoice(*ElevenLabsVoice) error
	VisitHumeVoice(*HumeVoice) error
	VisitLmntVoice(*LmntVoice) error
	VisitNeuphonicVoice(*NeuphonicVoice) error
	VisitOpenAiVoice(*OpenAiVoice) error
	VisitPlayHtVoice(*PlayHtVoice) error
	VisitRimeAiVoice(*RimeAiVoice) error
	VisitSmallestAiVoice(*SmallestAiVoice) error
	VisitTavusVoice(*TavusVoice) error
	VisitVapiVoice(*VapiVoice) error
	VisitSesameVoice(*SesameVoice) error
}

func (u *UpdateAssistantDtoVoice) Accept(visitor UpdateAssistantDtoVoiceVisitor) error {
	if u.typ == "AzureVoice" || u.AzureVoice != nil {
		return visitor.VisitAzureVoice(u.AzureVoice)
	}
	if u.typ == "CartesiaVoice" || u.CartesiaVoice != nil {
		return visitor.VisitCartesiaVoice(u.CartesiaVoice)
	}
	if u.typ == "CustomVoice" || u.CustomVoice != nil {
		return visitor.VisitCustomVoice(u.CustomVoice)
	}
	if u.typ == "DeepgramVoice" || u.DeepgramVoice != nil {
		return visitor.VisitDeepgramVoice(u.DeepgramVoice)
	}
	if u.typ == "ElevenLabsVoice" || u.ElevenLabsVoice != nil {
		return visitor.VisitElevenLabsVoice(u.ElevenLabsVoice)
	}
	if u.typ == "HumeVoice" || u.HumeVoice != nil {
		return visitor.VisitHumeVoice(u.HumeVoice)
	}
	if u.typ == "LmntVoice" || u.LmntVoice != nil {
		return visitor.VisitLmntVoice(u.LmntVoice)
	}
	if u.typ == "NeuphonicVoice" || u.NeuphonicVoice != nil {
		return visitor.VisitNeuphonicVoice(u.NeuphonicVoice)
	}
	if u.typ == "OpenAiVoice" || u.OpenAiVoice != nil {
		return visitor.VisitOpenAiVoice(u.OpenAiVoice)
	}
	if u.typ == "PlayHtVoice" || u.PlayHtVoice != nil {
		return visitor.VisitPlayHtVoice(u.PlayHtVoice)
	}
	if u.typ == "RimeAiVoice" || u.RimeAiVoice != nil {
		return visitor.VisitRimeAiVoice(u.RimeAiVoice)
	}
	if u.typ == "SmallestAiVoice" || u.SmallestAiVoice != nil {
		return visitor.VisitSmallestAiVoice(u.SmallestAiVoice)
	}
	if u.typ == "TavusVoice" || u.TavusVoice != nil {
		return visitor.VisitTavusVoice(u.TavusVoice)
	}
	if u.typ == "VapiVoice" || u.VapiVoice != nil {
		return visitor.VisitVapiVoice(u.VapiVoice)
	}
	if u.typ == "SesameVoice" || u.SesameVoice != nil {
		return visitor.VisitSesameVoice(u.SesameVoice)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}

// These are the settings to configure or disable voicemail detection. Alternatively, voicemail detection can be configured using the model.tools=[VoicemailTool].
// This uses Twilio's built-in detection while the VoicemailTool relies on the model to detect if a voicemail was reached.
// You can use neither of them, one of them, or both of them. By default, Twilio built-in detection is enabled while VoicemailTool is not.
type UpdateAssistantDtoVoicemailDetection struct {
	GoogleVoicemailDetectionPlan *GoogleVoicemailDetectionPlan
	OpenAiVoicemailDetectionPlan *OpenAiVoicemailDetectionPlan
	TwilioVoicemailDetectionPlan *TwilioVoicemailDetectionPlan
	VapiVoicemailDetectionPlan   *VapiVoicemailDetectionPlan

	typ string
}

func (u *UpdateAssistantDtoVoicemailDetection) GetGoogleVoicemailDetectionPlan() *GoogleVoicemailDetectionPlan {
	if u == nil {
		return nil
	}
	return u.GoogleVoicemailDetectionPlan
}

func (u *UpdateAssistantDtoVoicemailDetection) GetOpenAiVoicemailDetectionPlan() *OpenAiVoicemailDetectionPlan {
	if u == nil {
		return nil
	}
	return u.OpenAiVoicemailDetectionPlan
}

func (u *UpdateAssistantDtoVoicemailDetection) GetTwilioVoicemailDetectionPlan() *TwilioVoicemailDetectionPlan {
	if u == nil {
		return nil
	}
	return u.TwilioVoicemailDetectionPlan
}

func (u *UpdateAssistantDtoVoicemailDetection) GetVapiVoicemailDetectionPlan() *VapiVoicemailDetectionPlan {
	if u == nil {
		return nil
	}
	return u.VapiVoicemailDetectionPlan
}

func (u *UpdateAssistantDtoVoicemailDetection) UnmarshalJSON(data []byte) error {
	valueGoogleVoicemailDetectionPlan := new(GoogleVoicemailDetectionPlan)
	if err := json.Unmarshal(data, &valueGoogleVoicemailDetectionPlan); err == nil {
		u.typ = "GoogleVoicemailDetectionPlan"
		u.GoogleVoicemailDetectionPlan = valueGoogleVoicemailDetectionPlan
		return nil
	}
	valueOpenAiVoicemailDetectionPlan := new(OpenAiVoicemailDetectionPlan)
	if err := json.Unmarshal(data, &valueOpenAiVoicemailDetectionPlan); err == nil {
		u.typ = "OpenAiVoicemailDetectionPlan"
		u.OpenAiVoicemailDetectionPlan = valueOpenAiVoicemailDetectionPlan
		return nil
	}
	valueTwilioVoicemailDetectionPlan := new(TwilioVoicemailDetectionPlan)
	if err := json.Unmarshal(data, &valueTwilioVoicemailDetectionPlan); err == nil {
		u.typ = "TwilioVoicemailDetectionPlan"
		u.TwilioVoicemailDetectionPlan = valueTwilioVoicemailDetectionPlan
		return nil
	}
	valueVapiVoicemailDetectionPlan := new(VapiVoicemailDetectionPlan)
	if err := json.Unmarshal(data, &valueVapiVoicemailDetectionPlan); err == nil {
		u.typ = "VapiVoicemailDetectionPlan"
		u.VapiVoicemailDetectionPlan = valueVapiVoicemailDetectionPlan
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpdateAssistantDtoVoicemailDetection) MarshalJSON() ([]byte, error) {
	if u.typ == "GoogleVoicemailDetectionPlan" || u.GoogleVoicemailDetectionPlan != nil {
		return json.Marshal(u.GoogleVoicemailDetectionPlan)
	}
	if u.typ == "OpenAiVoicemailDetectionPlan" || u.OpenAiVoicemailDetectionPlan != nil {
		return json.Marshal(u.OpenAiVoicemailDetectionPlan)
	}
	if u.typ == "TwilioVoicemailDetectionPlan" || u.TwilioVoicemailDetectionPlan != nil {
		return json.Marshal(u.TwilioVoicemailDetectionPlan)
	}
	if u.typ == "VapiVoicemailDetectionPlan" || u.VapiVoicemailDetectionPlan != nil {
		return json.Marshal(u.VapiVoicemailDetectionPlan)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateAssistantDtoVoicemailDetectionVisitor interface {
	VisitGoogleVoicemailDetectionPlan(*GoogleVoicemailDetectionPlan) error
	VisitOpenAiVoicemailDetectionPlan(*OpenAiVoicemailDetectionPlan) error
	VisitTwilioVoicemailDetectionPlan(*TwilioVoicemailDetectionPlan) error
	VisitVapiVoicemailDetectionPlan(*VapiVoicemailDetectionPlan) error
}

func (u *UpdateAssistantDtoVoicemailDetection) Accept(visitor UpdateAssistantDtoVoicemailDetectionVisitor) error {
	if u.typ == "GoogleVoicemailDetectionPlan" || u.GoogleVoicemailDetectionPlan != nil {
		return visitor.VisitGoogleVoicemailDetectionPlan(u.GoogleVoicemailDetectionPlan)
	}
	if u.typ == "OpenAiVoicemailDetectionPlan" || u.OpenAiVoicemailDetectionPlan != nil {
		return visitor.VisitOpenAiVoicemailDetectionPlan(u.OpenAiVoicemailDetectionPlan)
	}
	if u.typ == "TwilioVoicemailDetectionPlan" || u.TwilioVoicemailDetectionPlan != nil {
		return visitor.VisitTwilioVoicemailDetectionPlan(u.TwilioVoicemailDetectionPlan)
	}
	if u.typ == "VapiVoicemailDetectionPlan" || u.VapiVoicemailDetectionPlan != nil {
		return visitor.VisitVapiVoicemailDetectionPlan(u.VapiVoicemailDetectionPlan)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateAssistantDto struct {
	// These are the options for the assistant's transcriber.
	Transcriber *UpdateAssistantDtoTranscriber `json:"transcriber,omitempty" url:"-"`
	// These are the options for the assistant's LLM.
	Model *UpdateAssistantDtoModel `json:"model,omitempty" url:"-"`
	// These are the options for the assistant's voice.
	Voice *UpdateAssistantDtoVoice `json:"voice,omitempty" url:"-"`
	// This is the first message that the assistant will say. This can also be a URL to a containerized audio file (mp3, wav, etc.).
	//
	// If unspecified, assistant will wait for user to speak and use the model to respond once they speak.
	FirstMessage                     *string `json:"firstMessage,omitempty" url:"-"`
	FirstMessageInterruptionsEnabled *bool   `json:"firstMessageInterruptionsEnabled,omitempty" url:"-"`
	// This is the mode for the first message. Default is 'assistant-speaks-first'.
	//
	// Use:
	// - 'assistant-speaks-first' to have the assistant speak first.
	// - 'assistant-waits-for-user' to have the assistant wait for the user to speak first.
	// - 'assistant-speaks-first-with-model-generated-message' to have the assistant speak first with a message generated by the model based on the conversation state. (`assistant.model.messages` at call start, `call.messages` at squad transfer points).
	//
	// @default 'assistant-speaks-first'
	FirstMessageMode *UpdateAssistantDtoFirstMessageMode `json:"firstMessageMode,omitempty" url:"-"`
	// These are the settings to configure or disable voicemail detection. Alternatively, voicemail detection can be configured using the model.tools=[VoicemailTool].
	// This uses Twilio's built-in detection while the VoicemailTool relies on the model to detect if a voicemail was reached.
	// You can use neither of them, one of them, or both of them. By default, Twilio built-in detection is enabled while VoicemailTool is not.
	VoicemailDetection *UpdateAssistantDtoVoicemailDetection `json:"voicemailDetection,omitempty" url:"-"`
	// These are the messages that will be sent to your Client SDKs. Default is conversation-update,function-call,hang,model-output,speech-update,status-update,transfer-update,transcript,tool-calls,user-interrupted,voice-input,workflow.node.started. You can check the shape of the messages in ClientMessage schema.
	ClientMessages []UpdateAssistantDtoClientMessagesItem `json:"clientMessages,omitempty" url:"-"`
	// These are the messages that will be sent to your Server URL. Default is conversation-update,end-of-call-report,function-call,hang,speech-update,status-update,tool-calls,transfer-destination-request,user-interrupted. You can check the shape of the messages in ServerMessage schema.
	ServerMessages []UpdateAssistantDtoServerMessagesItem `json:"serverMessages,omitempty" url:"-"`
	// How many seconds of silence to wait before ending the call. Defaults to 30.
	//
	// @default 30
	SilenceTimeoutSeconds *float64 `json:"silenceTimeoutSeconds,omitempty" url:"-"`
	// This is the maximum number of seconds that the call will last. When the call reaches this duration, it will be ended.
	//
	// @default 600 (10 minutes)
	MaxDurationSeconds *float64 `json:"maxDurationSeconds,omitempty" url:"-"`
	// This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.
	// You can also provide a custom sound by providing a URL to an audio file.
	BackgroundSound *UpdateAssistantDtoBackgroundSound `json:"backgroundSound,omitempty" url:"-"`
	// This enables filtering of noise and background speech while the user is talking.
	//
	// Default `false` while in beta.
	//
	// @default false
	BackgroundDenoisingEnabled *bool `json:"backgroundDenoisingEnabled,omitempty" url:"-"`
	// This determines whether the model's output is used in conversation history rather than the transcription of assistant's speech.
	//
	// Default `false` while in beta.
	//
	// @default false
	ModelOutputInMessagesEnabled *bool `json:"modelOutputInMessagesEnabled,omitempty" url:"-"`
	// These are the configurations to be passed to the transport providers of assistant's calls, like Twilio. You can store multiple configurations for different transport providers. For a call, only the configuration matching the call transport provider is used.
	TransportConfigurations []*TransportConfigurationTwilio `json:"transportConfigurations,omitempty" url:"-"`
	// This is the plan for observability configuration of assistant's calls.
	// Currently supports Langfuse for tracing and monitoring.
	ObservabilityPlan *LangfuseObservabilityPlan `json:"observabilityPlan,omitempty" url:"-"`
	// These are dynamic credentials that will be used for the assistant calls. By default, all the credentials are available for use in the call but you can supplement an additional credentials using this. Dynamic credentials override existing credentials.
	Credentials []*UpdateAssistantDtoCredentialsItem `json:"credentials,omitempty" url:"-"`
	// This is a set of actions that will be performed on certain events.
	Hooks []*UpdateAssistantDtoHooksItem `json:"hooks,omitempty" url:"-"`
	// This is the name of the assistant.
	//
	// This is required when you want to transfer between assistants in a call.
	Name *string `json:"name,omitempty" url:"-"`
	// This is the message that the assistant will say if the call is forwarded to voicemail.
	//
	// If unspecified, it will hang up.
	VoicemailMessage *string `json:"voicemailMessage,omitempty" url:"-"`
	// This is the message that the assistant will say if it ends the call.
	//
	// If unspecified, it will hang up without saying anything.
	EndCallMessage *string `json:"endCallMessage,omitempty" url:"-"`
	// This list contains phrases that, if spoken by the assistant, will trigger the call to be hung up. Case insensitive.
	EndCallPhrases []string        `json:"endCallPhrases,omitempty" url:"-"`
	CompliancePlan *CompliancePlan `json:"compliancePlan,omitempty" url:"-"`
	// This is for metadata you want to store on the assistant.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
	// This is the plan for analysis of assistant's calls. Stored in `call.analysis`.
	AnalysisPlan *AnalysisPlan `json:"analysisPlan,omitempty" url:"-"`
	// This is the plan for artifacts generated during assistant's calls. Stored in `call.artifact`.
	//
	// Note: `recordingEnabled` is currently at the root level. It will be moved to `artifactPlan` in the future, but will remain backwards compatible.
	ArtifactPlan *ArtifactPlan `json:"artifactPlan,omitempty" url:"-"`
	// This is the plan for static predefined messages that can be spoken by the assistant during the call, like `idleMessages`.
	//
	// Note: `firstMessage`, `voicemailMessage`, and `endCallMessage` are currently at the root level. They will be moved to `messagePlan` in the future, but will remain backwards compatible.
	MessagePlan *MessagePlan `json:"messagePlan,omitempty" url:"-"`
	// This is the plan for when the assistant should start talking.
	//
	// You should configure this if you're running into these issues:
	// - The assistant is too slow to start talking after the customer is done speaking.
	// - The assistant is too fast to start talking after the customer is done speaking.
	// - The assistant is so fast that it's actually interrupting the customer.
	StartSpeakingPlan *StartSpeakingPlan `json:"startSpeakingPlan,omitempty" url:"-"`
	// This is the plan for when assistant should stop talking on customer interruption.
	//
	// You should configure this if you're running into these issues:
	// - The assistant is too slow to recognize customer's interruption.
	// - The assistant is too fast to recognize customer's interruption.
	// - The assistant is getting interrupted by phrases that are just acknowledgments.
	// - The assistant is getting interrupted by background noises.
	// - The assistant is not properly stopping -- it starts talking right after getting interrupted.
	StopSpeakingPlan *StopSpeakingPlan `json:"stopSpeakingPlan,omitempty" url:"-"`
	// This is the plan for real-time monitoring of the assistant's calls.
	//
	// Usage:
	// - To enable live listening of the assistant's calls, set `monitorPlan.listenEnabled` to `true`.
	// - To enable live control of the assistant's calls, set `monitorPlan.controlEnabled` to `true`.
	//
	// Note, `serverMessages`, `clientMessages`, `serverUrl` and `serverUrlSecret` are currently at the root level but will be moved to `monitorPlan` in the future. Will remain backwards compatible
	MonitorPlan *MonitorPlan `json:"monitorPlan,omitempty" url:"-"`
	// These are the credentials that will be used for the assistant calls. By default, all the credentials are available for use in the call but you can provide a subset using this.
	CredentialIds []string `json:"credentialIds,omitempty" url:"-"`
	// This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.
	//
	// The order of precedence is:
	//
	// 1. assistant.server.url
	// 2. phoneNumber.serverUrl
	// 3. org.serverUrl
	Server          *Server          `json:"server,omitempty" url:"-"`
	KeypadInputPlan *KeypadInputPlan `json:"keypadInputPlan,omitempty" url:"-"`
}
