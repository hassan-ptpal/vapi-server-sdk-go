// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	time "time"

	internal "github.com/hassan-ptpal/vapi-server-sdk-go/internal"
)

type UpdateWorkflowDto struct {
	Nodes []*UpdateWorkflowDtoNodesItem `json:"nodes,omitempty" url:"-"`
	// These are the options for the workflow's LLM.
	Model *UpdateWorkflowDtoModel `json:"model,omitempty" url:"-"`
	Name  *string                 `json:"name,omitempty" url:"-"`
	Edges []*Edge                 `json:"edges,omitempty" url:"-"`
}

type Workflow struct {
	Nodes []*WorkflowNodesItem `json:"nodes,omitempty" url:"nodes,omitempty"`
	// These are the options for the workflow's LLM.
	Model     *WorkflowModel `json:"model,omitempty" url:"model,omitempty"`
	Id        string         `json:"id" url:"id"`
	OrgId     string         `json:"orgId" url:"orgId"`
	CreatedAt time.Time      `json:"createdAt" url:"createdAt"`
	UpdatedAt time.Time      `json:"updatedAt" url:"updatedAt"`
	Name      string         `json:"name" url:"name"`
	Edges     []*Edge        `json:"edges,omitempty" url:"edges,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *Workflow) GetNodes() []*WorkflowNodesItem {
	if w == nil {
		return nil
	}
	return w.Nodes
}

func (w *Workflow) GetModel() *WorkflowModel {
	if w == nil {
		return nil
	}
	return w.Model
}

func (w *Workflow) GetId() string {
	if w == nil {
		return ""
	}
	return w.Id
}

func (w *Workflow) GetOrgId() string {
	if w == nil {
		return ""
	}
	return w.OrgId
}

func (w *Workflow) GetCreatedAt() time.Time {
	if w == nil {
		return time.Time{}
	}
	return w.CreatedAt
}

func (w *Workflow) GetUpdatedAt() time.Time {
	if w == nil {
		return time.Time{}
	}
	return w.UpdatedAt
}

func (w *Workflow) GetName() string {
	if w == nil {
		return ""
	}
	return w.Name
}

func (w *Workflow) GetEdges() []*Edge {
	if w == nil {
		return nil
	}
	return w.Edges
}

func (w *Workflow) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *Workflow) UnmarshalJSON(data []byte) error {
	type embed Workflow
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = Workflow(unmarshaler.embed)
	w.CreatedAt = unmarshaler.CreatedAt.Time()
	w.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *Workflow) MarshalJSON() ([]byte, error) {
	type embed Workflow
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*w),
		CreatedAt: internal.NewDateTime(w.CreatedAt),
		UpdatedAt: internal.NewDateTime(w.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (w *Workflow) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// These are the options for the workflow's LLM.
type WorkflowModel struct {
	WorkflowOpenAiModel    *WorkflowOpenAiModel
	WorkflowAnthropicModel *WorkflowAnthropicModel

	typ string
}

func (w *WorkflowModel) GetWorkflowOpenAiModel() *WorkflowOpenAiModel {
	if w == nil {
		return nil
	}
	return w.WorkflowOpenAiModel
}

func (w *WorkflowModel) GetWorkflowAnthropicModel() *WorkflowAnthropicModel {
	if w == nil {
		return nil
	}
	return w.WorkflowAnthropicModel
}

func (w *WorkflowModel) UnmarshalJSON(data []byte) error {
	valueWorkflowOpenAiModel := new(WorkflowOpenAiModel)
	if err := json.Unmarshal(data, &valueWorkflowOpenAiModel); err == nil {
		w.typ = "WorkflowOpenAiModel"
		w.WorkflowOpenAiModel = valueWorkflowOpenAiModel
		return nil
	}
	valueWorkflowAnthropicModel := new(WorkflowAnthropicModel)
	if err := json.Unmarshal(data, &valueWorkflowAnthropicModel); err == nil {
		w.typ = "WorkflowAnthropicModel"
		w.WorkflowAnthropicModel = valueWorkflowAnthropicModel
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowModel) MarshalJSON() ([]byte, error) {
	if w.typ == "WorkflowOpenAiModel" || w.WorkflowOpenAiModel != nil {
		return json.Marshal(w.WorkflowOpenAiModel)
	}
	if w.typ == "WorkflowAnthropicModel" || w.WorkflowAnthropicModel != nil {
		return json.Marshal(w.WorkflowAnthropicModel)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowModelVisitor interface {
	VisitWorkflowOpenAiModel(*WorkflowOpenAiModel) error
	VisitWorkflowAnthropicModel(*WorkflowAnthropicModel) error
}

func (w *WorkflowModel) Accept(visitor WorkflowModelVisitor) error {
	if w.typ == "WorkflowOpenAiModel" || w.WorkflowOpenAiModel != nil {
		return visitor.VisitWorkflowOpenAiModel(w.WorkflowOpenAiModel)
	}
	if w.typ == "WorkflowAnthropicModel" || w.WorkflowAnthropicModel != nil {
		return visitor.VisitWorkflowAnthropicModel(w.WorkflowAnthropicModel)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowNodesItem struct {
	ConversationNode *ConversationNode
	ToolNode         *ToolNode

	typ string
}

func (w *WorkflowNodesItem) GetConversationNode() *ConversationNode {
	if w == nil {
		return nil
	}
	return w.ConversationNode
}

func (w *WorkflowNodesItem) GetToolNode() *ToolNode {
	if w == nil {
		return nil
	}
	return w.ToolNode
}

func (w *WorkflowNodesItem) UnmarshalJSON(data []byte) error {
	valueConversationNode := new(ConversationNode)
	if err := json.Unmarshal(data, &valueConversationNode); err == nil {
		w.typ = "ConversationNode"
		w.ConversationNode = valueConversationNode
		return nil
	}
	valueToolNode := new(ToolNode)
	if err := json.Unmarshal(data, &valueToolNode); err == nil {
		w.typ = "ToolNode"
		w.ToolNode = valueToolNode
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowNodesItem) MarshalJSON() ([]byte, error) {
	if w.typ == "ConversationNode" || w.ConversationNode != nil {
		return json.Marshal(w.ConversationNode)
	}
	if w.typ == "ToolNode" || w.ToolNode != nil {
		return json.Marshal(w.ToolNode)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowNodesItemVisitor interface {
	VisitConversationNode(*ConversationNode) error
	VisitToolNode(*ToolNode) error
}

func (w *WorkflowNodesItem) Accept(visitor WorkflowNodesItemVisitor) error {
	if w.typ == "ConversationNode" || w.ConversationNode != nil {
		return visitor.VisitConversationNode(w.ConversationNode)
	}
	if w.typ == "ToolNode" || w.ToolNode != nil {
		return visitor.VisitToolNode(w.ToolNode)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}

// These are the options for the workflow's LLM.
type UpdateWorkflowDtoModel struct {
	WorkflowOpenAiModel    *WorkflowOpenAiModel
	WorkflowAnthropicModel *WorkflowAnthropicModel

	typ string
}

func (u *UpdateWorkflowDtoModel) GetWorkflowOpenAiModel() *WorkflowOpenAiModel {
	if u == nil {
		return nil
	}
	return u.WorkflowOpenAiModel
}

func (u *UpdateWorkflowDtoModel) GetWorkflowAnthropicModel() *WorkflowAnthropicModel {
	if u == nil {
		return nil
	}
	return u.WorkflowAnthropicModel
}

func (u *UpdateWorkflowDtoModel) UnmarshalJSON(data []byte) error {
	valueWorkflowOpenAiModel := new(WorkflowOpenAiModel)
	if err := json.Unmarshal(data, &valueWorkflowOpenAiModel); err == nil {
		u.typ = "WorkflowOpenAiModel"
		u.WorkflowOpenAiModel = valueWorkflowOpenAiModel
		return nil
	}
	valueWorkflowAnthropicModel := new(WorkflowAnthropicModel)
	if err := json.Unmarshal(data, &valueWorkflowAnthropicModel); err == nil {
		u.typ = "WorkflowAnthropicModel"
		u.WorkflowAnthropicModel = valueWorkflowAnthropicModel
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpdateWorkflowDtoModel) MarshalJSON() ([]byte, error) {
	if u.typ == "WorkflowOpenAiModel" || u.WorkflowOpenAiModel != nil {
		return json.Marshal(u.WorkflowOpenAiModel)
	}
	if u.typ == "WorkflowAnthropicModel" || u.WorkflowAnthropicModel != nil {
		return json.Marshal(u.WorkflowAnthropicModel)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateWorkflowDtoModelVisitor interface {
	VisitWorkflowOpenAiModel(*WorkflowOpenAiModel) error
	VisitWorkflowAnthropicModel(*WorkflowAnthropicModel) error
}

func (u *UpdateWorkflowDtoModel) Accept(visitor UpdateWorkflowDtoModelVisitor) error {
	if u.typ == "WorkflowOpenAiModel" || u.WorkflowOpenAiModel != nil {
		return visitor.VisitWorkflowOpenAiModel(u.WorkflowOpenAiModel)
	}
	if u.typ == "WorkflowAnthropicModel" || u.WorkflowAnthropicModel != nil {
		return visitor.VisitWorkflowAnthropicModel(u.WorkflowAnthropicModel)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateWorkflowDtoNodesItem struct {
	ConversationNode *ConversationNode
	ToolNode         *ToolNode

	typ string
}

func (u *UpdateWorkflowDtoNodesItem) GetConversationNode() *ConversationNode {
	if u == nil {
		return nil
	}
	return u.ConversationNode
}

func (u *UpdateWorkflowDtoNodesItem) GetToolNode() *ToolNode {
	if u == nil {
		return nil
	}
	return u.ToolNode
}

func (u *UpdateWorkflowDtoNodesItem) UnmarshalJSON(data []byte) error {
	valueConversationNode := new(ConversationNode)
	if err := json.Unmarshal(data, &valueConversationNode); err == nil {
		u.typ = "ConversationNode"
		u.ConversationNode = valueConversationNode
		return nil
	}
	valueToolNode := new(ToolNode)
	if err := json.Unmarshal(data, &valueToolNode); err == nil {
		u.typ = "ToolNode"
		u.ToolNode = valueToolNode
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpdateWorkflowDtoNodesItem) MarshalJSON() ([]byte, error) {
	if u.typ == "ConversationNode" || u.ConversationNode != nil {
		return json.Marshal(u.ConversationNode)
	}
	if u.typ == "ToolNode" || u.ToolNode != nil {
		return json.Marshal(u.ToolNode)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateWorkflowDtoNodesItemVisitor interface {
	VisitConversationNode(*ConversationNode) error
	VisitToolNode(*ToolNode) error
}

func (u *UpdateWorkflowDtoNodesItem) Accept(visitor UpdateWorkflowDtoNodesItemVisitor) error {
	if u.typ == "ConversationNode" || u.ConversationNode != nil {
		return visitor.VisitConversationNode(u.ConversationNode)
	}
	if u.typ == "ToolNode" || u.ToolNode != nil {
		return visitor.VisitToolNode(u.ToolNode)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}
