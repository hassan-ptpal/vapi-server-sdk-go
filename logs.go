// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	time "time"

	internal "github.com/hassan-ptpal/vapi-server-sdk-go/internal"
)

type LoggingControllerLogsDeleteQueryRequest struct {
	// This is the type of the log.
	Type        *LoggingControllerLogsDeleteQueryRequestType `json:"-" url:"type,omitempty"`
	AssistantId *string                                      `json:"-" url:"assistantId,omitempty"`
	// This is the ID of the phone number.
	PhoneNumberId *string `json:"-" url:"phoneNumberId,omitempty"`
	// This is the ID of the customer.
	CustomerId *string `json:"-" url:"customerId,omitempty"`
	// This is the ID of the squad.
	SquadId *string `json:"-" url:"squadId,omitempty"`
	// This is the ID of the call.
	CallId *string `json:"-" url:"callId,omitempty"`
}

type LogsGetRequest struct {
	// This is the type of the log.
	Type *LogsGetRequestType `json:"-" url:"type,omitempty"`
	// This is the type of the webhook, given the log is from a webhook.
	WebhookType *string `json:"-" url:"webhookType,omitempty"`
	// This is the ID of the assistant.
	AssistantId *string `json:"-" url:"assistantId,omitempty"`
	// This is the ID of the phone number.
	PhoneNumberId *string `json:"-" url:"phoneNumberId,omitempty"`
	// This is the ID of the customer.
	CustomerId *string `json:"-" url:"customerId,omitempty"`
	// This is the ID of the squad.
	SquadId *string `json:"-" url:"squadId,omitempty"`
	// This is the ID of the call.
	CallId *string `json:"-" url:"callId,omitempty"`
	// This is the page number to return. Defaults to 1.
	Page *float64 `json:"-" url:"page,omitempty"`
	// This is the sort order for pagination. Defaults to 'ASC'.
	SortOrder *LogsGetRequestSortOrder `json:"-" url:"sortOrder,omitempty"`
	// This is the maximum number of items to return. Defaults to 100.
	Limit *float64 `json:"-" url:"limit,omitempty"`
	// This will return items where the createdAt is greater than the specified value.
	CreatedAtGt *time.Time `json:"-" url:"createdAtGt,omitempty"`
	// This will return items where the createdAt is less than the specified value.
	CreatedAtLt *time.Time `json:"-" url:"createdAtLt,omitempty"`
	// This will return items where the createdAt is greater than or equal to the specified value.
	CreatedAtGe *time.Time `json:"-" url:"createdAtGe,omitempty"`
	// This will return items where the createdAt is less than or equal to the specified value.
	CreatedAtLe *time.Time `json:"-" url:"createdAtLe,omitempty"`
	// This will return items where the updatedAt is greater than the specified value.
	UpdatedAtGt *time.Time `json:"-" url:"updatedAtGt,omitempty"`
	// This will return items where the updatedAt is less than the specified value.
	UpdatedAtLt *time.Time `json:"-" url:"updatedAtLt,omitempty"`
	// This will return items where the updatedAt is greater than or equal to the specified value.
	UpdatedAtGe *time.Time `json:"-" url:"updatedAtGe,omitempty"`
	// This will return items where the updatedAt is less than or equal to the specified value.
	UpdatedAtLe *time.Time `json:"-" url:"updatedAtLe,omitempty"`
}

type Error struct {
	Message string `json:"message" url:"message"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *Error) GetMessage() string {
	if e == nil {
		return ""
	}
	return e.Message
}

func (e *Error) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Error) UnmarshalJSON(data []byte) error {
	type unmarshaler Error
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Error(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *Error) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type Log struct {
	// This is the timestamp at which the log was written.
	Time string `json:"time" url:"time"`
	// This is the unique identifier for the org that this log belongs to.
	OrgId string `json:"orgId" url:"orgId"`
	// This is the type of the log.
	Type LogType `json:"type" url:"type"`
	// This is the type of the webhook, given the log is from a webhook.
	WebhookType *string `json:"webhookType,omitempty" url:"webhookType,omitempty"`
	// This is the specific resource, relevant only to API logs.
	Resource *LogResource `json:"resource,omitempty" url:"resource,omitempty"`
	// 'This is how long the request took.
	RequestDurationSeconds *float64 `json:"requestDurationSeconds,omitempty" url:"requestDurationSeconds,omitempty"`
	// This is the timestamp at which the request began.
	RequestStartedAt *string `json:"requestStartedAt,omitempty" url:"requestStartedAt,omitempty"`
	// This is the timestamp at which the request finished.
	RequestFinishedAt *string `json:"requestFinishedAt,omitempty" url:"requestFinishedAt,omitempty"`
	// This is the body of the request.
	RequestBody map[string]interface{} `json:"requestBody,omitempty" url:"requestBody,omitempty"`
	// This is the request method.
	RequestHttpMethod *LogRequestHttpMethod `json:"requestHttpMethod,omitempty" url:"requestHttpMethod,omitempty"`
	// This is the request URL.
	RequestUrl *string `json:"requestUrl,omitempty" url:"requestUrl,omitempty"`
	// This is the request path.
	RequestPath *string `json:"requestPath,omitempty" url:"requestPath,omitempty"`
	// This is the request query.
	RequestQuery *string `json:"requestQuery,omitempty" url:"requestQuery,omitempty"`
	// This the HTTP status code of the response.
	ResponseHttpCode *float64 `json:"responseHttpCode,omitempty" url:"responseHttpCode,omitempty"`
	// This is the request IP address.
	RequestIpAddress *string `json:"requestIpAddress,omitempty" url:"requestIpAddress,omitempty"`
	// This is the origin of the request
	RequestOrigin *string `json:"requestOrigin,omitempty" url:"requestOrigin,omitempty"`
	// This is the body of the response.
	ResponseBody map[string]interface{} `json:"responseBody,omitempty" url:"responseBody,omitempty"`
	// These are the headers of the request.
	RequestHeaders map[string]interface{} `json:"requestHeaders,omitempty" url:"requestHeaders,omitempty"`
	// This is the error, if one occurred.
	Error *Error `json:"error,omitempty" url:"error,omitempty"`
	// This is the ID of the assistant.
	AssistantId *string `json:"assistantId,omitempty" url:"assistantId,omitempty"`
	// This is the ID of the phone number.
	PhoneNumberId *string `json:"phoneNumberId,omitempty" url:"phoneNumberId,omitempty"`
	// This is the ID of the customer.
	CustomerId *string `json:"customerId,omitempty" url:"customerId,omitempty"`
	// This is the ID of the squad.
	SquadId *string `json:"squadId,omitempty" url:"squadId,omitempty"`
	// This is the ID of the call.
	CallId *string `json:"callId,omitempty" url:"callId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *Log) GetTime() string {
	if l == nil {
		return ""
	}
	return l.Time
}

func (l *Log) GetOrgId() string {
	if l == nil {
		return ""
	}
	return l.OrgId
}

func (l *Log) GetType() LogType {
	if l == nil {
		return ""
	}
	return l.Type
}

func (l *Log) GetWebhookType() *string {
	if l == nil {
		return nil
	}
	return l.WebhookType
}

func (l *Log) GetResource() *LogResource {
	if l == nil {
		return nil
	}
	return l.Resource
}

func (l *Log) GetRequestDurationSeconds() *float64 {
	if l == nil {
		return nil
	}
	return l.RequestDurationSeconds
}

func (l *Log) GetRequestStartedAt() *string {
	if l == nil {
		return nil
	}
	return l.RequestStartedAt
}

func (l *Log) GetRequestFinishedAt() *string {
	if l == nil {
		return nil
	}
	return l.RequestFinishedAt
}

func (l *Log) GetRequestBody() map[string]interface{} {
	if l == nil {
		return nil
	}
	return l.RequestBody
}

func (l *Log) GetRequestHttpMethod() *LogRequestHttpMethod {
	if l == nil {
		return nil
	}
	return l.RequestHttpMethod
}

func (l *Log) GetRequestUrl() *string {
	if l == nil {
		return nil
	}
	return l.RequestUrl
}

func (l *Log) GetRequestPath() *string {
	if l == nil {
		return nil
	}
	return l.RequestPath
}

func (l *Log) GetRequestQuery() *string {
	if l == nil {
		return nil
	}
	return l.RequestQuery
}

func (l *Log) GetResponseHttpCode() *float64 {
	if l == nil {
		return nil
	}
	return l.ResponseHttpCode
}

func (l *Log) GetRequestIpAddress() *string {
	if l == nil {
		return nil
	}
	return l.RequestIpAddress
}

func (l *Log) GetRequestOrigin() *string {
	if l == nil {
		return nil
	}
	return l.RequestOrigin
}

func (l *Log) GetResponseBody() map[string]interface{} {
	if l == nil {
		return nil
	}
	return l.ResponseBody
}

func (l *Log) GetRequestHeaders() map[string]interface{} {
	if l == nil {
		return nil
	}
	return l.RequestHeaders
}

func (l *Log) GetError() *Error {
	if l == nil {
		return nil
	}
	return l.Error
}

func (l *Log) GetAssistantId() *string {
	if l == nil {
		return nil
	}
	return l.AssistantId
}

func (l *Log) GetPhoneNumberId() *string {
	if l == nil {
		return nil
	}
	return l.PhoneNumberId
}

func (l *Log) GetCustomerId() *string {
	if l == nil {
		return nil
	}
	return l.CustomerId
}

func (l *Log) GetSquadId() *string {
	if l == nil {
		return nil
	}
	return l.SquadId
}

func (l *Log) GetCallId() *string {
	if l == nil {
		return nil
	}
	return l.CallId
}

func (l *Log) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *Log) UnmarshalJSON(data []byte) error {
	type unmarshaler Log
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = Log(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *Log) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// This is the request method.
type LogRequestHttpMethod string

const (
	LogRequestHttpMethodPost   LogRequestHttpMethod = "POST"
	LogRequestHttpMethodGet    LogRequestHttpMethod = "GET"
	LogRequestHttpMethodPut    LogRequestHttpMethod = "PUT"
	LogRequestHttpMethodPatch  LogRequestHttpMethod = "PATCH"
	LogRequestHttpMethodDelete LogRequestHttpMethod = "DELETE"
)

func NewLogRequestHttpMethodFromString(s string) (LogRequestHttpMethod, error) {
	switch s {
	case "POST":
		return LogRequestHttpMethodPost, nil
	case "GET":
		return LogRequestHttpMethodGet, nil
	case "PUT":
		return LogRequestHttpMethodPut, nil
	case "PATCH":
		return LogRequestHttpMethodPatch, nil
	case "DELETE":
		return LogRequestHttpMethodDelete, nil
	}
	var t LogRequestHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogRequestHttpMethod) Ptr() *LogRequestHttpMethod {
	return &l
}

// This is the specific resource, relevant only to API logs.
type LogResource string

const (
	LogResourceOrg          LogResource = "org"
	LogResourceAssistant    LogResource = "assistant"
	LogResourceAnalytics    LogResource = "analytics"
	LogResourceCredential   LogResource = "credential"
	LogResourcePhoneNumber  LogResource = "phone-number"
	LogResourceBlock        LogResource = "block"
	LogResourceVoiceLibrary LogResource = "voice-library"
	LogResourceProvider     LogResource = "provider"
	LogResourceTool         LogResource = "tool"
	LogResourceToken        LogResource = "token"
	LogResourceTemplate     LogResource = "template"
	LogResourceSquad        LogResource = "squad"
	LogResourceCall         LogResource = "call"
	LogResourceFile         LogResource = "file"
	LogResourceMetric       LogResource = "metric"
	LogResourceLog          LogResource = "log"
)

func NewLogResourceFromString(s string) (LogResource, error) {
	switch s {
	case "org":
		return LogResourceOrg, nil
	case "assistant":
		return LogResourceAssistant, nil
	case "analytics":
		return LogResourceAnalytics, nil
	case "credential":
		return LogResourceCredential, nil
	case "phone-number":
		return LogResourcePhoneNumber, nil
	case "block":
		return LogResourceBlock, nil
	case "voice-library":
		return LogResourceVoiceLibrary, nil
	case "provider":
		return LogResourceProvider, nil
	case "tool":
		return LogResourceTool, nil
	case "token":
		return LogResourceToken, nil
	case "template":
		return LogResourceTemplate, nil
	case "squad":
		return LogResourceSquad, nil
	case "call":
		return LogResourceCall, nil
	case "file":
		return LogResourceFile, nil
	case "metric":
		return LogResourceMetric, nil
	case "log":
		return LogResourceLog, nil
	}
	var t LogResource
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogResource) Ptr() *LogResource {
	return &l
}

// This is the type of the log.
type LogType string

const (
	LogTypeApi      LogType = "API"
	LogTypeWebhook  LogType = "Webhook"
	LogTypeCall     LogType = "Call"
	LogTypeProvider LogType = "Provider"
)

func NewLogTypeFromString(s string) (LogType, error) {
	switch s {
	case "API":
		return LogTypeApi, nil
	case "Webhook":
		return LogTypeWebhook, nil
	case "Call":
		return LogTypeCall, nil
	case "Provider":
		return LogTypeProvider, nil
	}
	var t LogType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogType) Ptr() *LogType {
	return &l
}

type LogsPaginatedResponse struct {
	Results  []*Log          `json:"results,omitempty" url:"results,omitempty"`
	Metadata *PaginationMeta `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LogsPaginatedResponse) GetResults() []*Log {
	if l == nil {
		return nil
	}
	return l.Results
}

func (l *LogsPaginatedResponse) GetMetadata() *PaginationMeta {
	if l == nil {
		return nil
	}
	return l.Metadata
}

func (l *LogsPaginatedResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LogsPaginatedResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LogsPaginatedResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LogsPaginatedResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LogsPaginatedResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type PaginationMeta struct {
	ItemsPerPage float64 `json:"itemsPerPage" url:"itemsPerPage"`
	TotalItems   float64 `json:"totalItems" url:"totalItems"`
	CurrentPage  float64 `json:"currentPage" url:"currentPage"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginationMeta) GetItemsPerPage() float64 {
	if p == nil {
		return 0
	}
	return p.ItemsPerPage
}

func (p *PaginationMeta) GetTotalItems() float64 {
	if p == nil {
		return 0
	}
	return p.TotalItems
}

func (p *PaginationMeta) GetCurrentPage() float64 {
	if p == nil {
		return 0
	}
	return p.CurrentPage
}

func (p *PaginationMeta) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginationMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginationMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginationMeta(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginationMeta) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type LoggingControllerLogsDeleteQueryRequestType string

const (
	LoggingControllerLogsDeleteQueryRequestTypeApi      LoggingControllerLogsDeleteQueryRequestType = "API"
	LoggingControllerLogsDeleteQueryRequestTypeWebhook  LoggingControllerLogsDeleteQueryRequestType = "Webhook"
	LoggingControllerLogsDeleteQueryRequestTypeCall     LoggingControllerLogsDeleteQueryRequestType = "Call"
	LoggingControllerLogsDeleteQueryRequestTypeProvider LoggingControllerLogsDeleteQueryRequestType = "Provider"
)

func NewLoggingControllerLogsDeleteQueryRequestTypeFromString(s string) (LoggingControllerLogsDeleteQueryRequestType, error) {
	switch s {
	case "API":
		return LoggingControllerLogsDeleteQueryRequestTypeApi, nil
	case "Webhook":
		return LoggingControllerLogsDeleteQueryRequestTypeWebhook, nil
	case "Call":
		return LoggingControllerLogsDeleteQueryRequestTypeCall, nil
	case "Provider":
		return LoggingControllerLogsDeleteQueryRequestTypeProvider, nil
	}
	var t LoggingControllerLogsDeleteQueryRequestType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LoggingControllerLogsDeleteQueryRequestType) Ptr() *LoggingControllerLogsDeleteQueryRequestType {
	return &l
}

type LogsGetRequestSortOrder string

const (
	LogsGetRequestSortOrderAsc  LogsGetRequestSortOrder = "ASC"
	LogsGetRequestSortOrderDesc LogsGetRequestSortOrder = "DESC"
)

func NewLogsGetRequestSortOrderFromString(s string) (LogsGetRequestSortOrder, error) {
	switch s {
	case "ASC":
		return LogsGetRequestSortOrderAsc, nil
	case "DESC":
		return LogsGetRequestSortOrderDesc, nil
	}
	var t LogsGetRequestSortOrder
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogsGetRequestSortOrder) Ptr() *LogsGetRequestSortOrder {
	return &l
}

type LogsGetRequestType string

const (
	LogsGetRequestTypeApi      LogsGetRequestType = "API"
	LogsGetRequestTypeWebhook  LogsGetRequestType = "Webhook"
	LogsGetRequestTypeCall     LogsGetRequestType = "Call"
	LogsGetRequestTypeProvider LogsGetRequestType = "Provider"
)

func NewLogsGetRequestTypeFromString(s string) (LogsGetRequestType, error) {
	switch s {
	case "API":
		return LogsGetRequestTypeApi, nil
	case "Webhook":
		return LogsGetRequestTypeWebhook, nil
	case "Call":
		return LogsGetRequestTypeCall, nil
	case "Provider":
		return LogsGetRequestTypeProvider, nil
	}
	var t LogsGetRequestType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogsGetRequestType) Ptr() *LogsGetRequestType {
	return &l
}
